
ChristmasDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe8  08005fe8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005fe8  08005fe8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fe8  08005fe8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa4  20000010  08006000  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ab4  08006000  00021ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad29  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000317a  00000000  00000000  0003ad69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001568  00000000  00000000  0003dee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  0003f450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005753  00000000  00000000  00040880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f9f  00000000  00000000  00045fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b160c  00000000  00000000  00057f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010957e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a40  00000000  00000000  001095fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f6c 	.word	0x08005f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005f6c 	.word	0x08005f6c

080001d0 <SN74PowerOn>:
#include <stdio.h>
#include "sn74_api.h"
#include "sn74_dd.h"

BaseType_t SN74PowerOn( void )
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
	SN74Msg_t msg;
	msg.cmd = eSN74PowerOn;
 80001d6:	2300      	movs	r3, #0
 80001d8:	713b      	strb	r3, [r7, #4]
	return xSN74Ctrl( &msg );
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fbfd 	bl	80009dc <xSN74Ctrl>
 80001e2:	4603      	mov	r3, r0
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <SN74Write>:
	msg.cmd = eSN74PowerOff;
	return xSN74Ctrl( &msg );
}

BaseType_t SN74Write( uint8_t pattern )
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
	SN74Msg_t msg;
	msg.cmd = eSN74Write;
 80001f6:	2302      	movs	r3, #2
 80001f8:	733b      	strb	r3, [r7, #12]
	msg.data = pattern;
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	737b      	strb	r3, [r7, #13]
	return xSN74Ctrl( &msg );
 80001fe:	f107 030c 	add.w	r3, r7, #12
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fbea 	bl	80009dc <xSN74Ctrl>
 8000208:	4603      	mov	r3, r0
}
 800020a:	4618      	mov	r0, r3
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fc25 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f825 	bl	800026c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f895 	bl	8000350 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000226:	f000 f863 	bl	80002f0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  if ( xRunSN74() != pdFREERTOS_ERRNO_NONE )
 800022a:	f000 fb85 	bl	8000938 <xRunSN74>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <main+0x24>
  {
	  Error_Handler();
 8000234:	f000 f8fc 	bl	8000430 <Error_Handler>
  }
   if ( xTaskCreate( StartDefaultTask, "DefaultTask", 1024, NULL, tskIDLE_PRIORITY, &defaultTaskHandle ) < 0 )
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <main+0x4c>)
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	2300      	movs	r3, #0
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000246:	4907      	ldr	r1, [pc, #28]	; (8000264 <main+0x50>)
 8000248:	4807      	ldr	r0, [pc, #28]	; (8000268 <main+0x54>)
 800024a:	f004 f8a4 	bl	8004396 <xTaskCreate>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	da01      	bge.n	8000258 <main+0x44>
   {
	   Error_Handler();
 8000254:	f000 f8ec 	bl	8000430 <Error_Handler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
   vTaskStartScheduler();
 8000258:	f004 fa0c 	bl	8004674 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025c:	e7fe      	b.n	800025c <main+0x48>
 800025e:	bf00      	nop
 8000260:	20001938 	.word	0x20001938
 8000264:	08005f84 	.word	0x08005f84
 8000268:	080003e5 	.word	0x080003e5

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	; 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f005 fe6d 	bl	8005f5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2310      	movs	r3, #16
 8000298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029e:	2300      	movs	r3, #0
 80002a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	f107 0318 	add.w	r3, r7, #24
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 ff4f 	bl	8001150 <HAL_RCC_OscConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002b8:	f000 f8ba 	bl	8000430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	230f      	movs	r3, #15
 80002be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c0:	2302      	movs	r3, #2
 80002c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2102      	movs	r1, #2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fe42 	bl	8001f60 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002e2:	f000 f8a5 	bl	8000430 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3740      	adds	r7, #64	; 0x40
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_USART2_UART_Init+0x58>)
 80002f6:	4a15      	ldr	r2, [pc, #84]	; (800034c <MX_USART2_UART_Init+0x5c>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <MX_USART2_UART_Init+0x58>)
 80002fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_USART2_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_USART2_UART_Init+0x58>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_USART2_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_USART2_UART_Init+0x58>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_USART2_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MX_USART2_UART_Init+0x58>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <MX_USART2_UART_Init+0x58>)
 8000328:	2200      	movs	r2, #0
 800032a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <MX_USART2_UART_Init+0x58>)
 800032e:	2200      	movs	r2, #0
 8000330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <MX_USART2_UART_Init+0x58>)
 8000334:	f002 fea4 	bl	8003080 <HAL_UART_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800033e:	f000 f877 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	2000193c 	.word	0x2000193c
 800034c:	40004400 	.word	0x40004400

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 030c 	add.w	r3, r7, #12
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_GPIO_Init+0x84>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a1a      	ldr	r2, [pc, #104]	; (80003d4 <MX_GPIO_Init+0x84>)
 800036c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_GPIO_Init+0x84>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_GPIO_Init+0x84>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <MX_GPIO_Init+0x84>)
 8000384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_GPIO_Init+0x84>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_GPIO_Init+0x88>)
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	4619      	mov	r1, r3
 80003aa:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_GPIO_Init+0x8c>)
 80003ac:	f000 fc74 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <MX_GPIO_Init+0x90>)
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4619      	mov	r1, r3
 80003c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c8:	f000 fc66 	bl	8000c98 <HAL_GPIO_Init>

}
 80003cc:	bf00      	nop
 80003ce:	3720      	adds	r7, #32
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000
 80003d8:	10210000 	.word	0x10210000
 80003dc:	48000800 	.word	0x48000800
 80003e0:	10110000 	.word	0x10110000

080003e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
uint8_t out = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	73fb      	strb	r3, [r7, #15]
	SN74PowerOn();
 80003f0:	f7ff feee 	bl	80001d0 <SN74PowerOn>
  for(;;)
  {
	  SN74Write(out++);
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
 80003f6:	1c5a      	adds	r2, r3, #1
 80003f8:	73fa      	strb	r2, [r7, #15]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff fef6 	bl	80001ec <SN74Write>
    vTaskDelay(500 * portTICK_PERIOD_MS);
 8000400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000404:	f004 f902 	bl	800460c <vTaskDelay>
	  SN74Write(out++);
 8000408:	e7f4      	b.n	80003f4 <StartDefaultTask+0x10>
	...

0800040c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d101      	bne.n	8000422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041e:	f000 fb39 	bl	8000a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40001000 	.word	0x40001000

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000436:	e7fe      	b.n	8000436 <Error_Handler+0x6>

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <HAL_MspInit+0x4c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a10      	ldr	r2, [pc, #64]	; (8000484 <HAL_MspInit+0x4c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <HAL_MspInit+0x4c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <HAL_MspInit+0x4c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <HAL_MspInit+0x4c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_MspInit+0x4c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	210f      	movs	r1, #15
 8000472:	f06f 0001 	mvn.w	r0, #1
 8000476:	f000 fbe5 	bl	8000c44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a17      	ldr	r2, [pc, #92]	; (8000504 <HAL_SPI_MspInit+0x7c>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d128      	bne.n	80004fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <HAL_SPI_MspInit+0x80>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a16      	ldr	r2, [pc, #88]	; (8000508 <HAL_SPI_MspInit+0x80>)
 80004b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <HAL_SPI_MspInit+0x80>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <HAL_SPI_MspInit+0x80>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a10      	ldr	r2, [pc, #64]	; (8000508 <HAL_SPI_MspInit+0x80>)
 80004c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_SPI_MspInit+0x80>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004da:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e8:	2303      	movs	r3, #3
 80004ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004ec:	2305      	movs	r3, #5
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <HAL_SPI_MspInit+0x84>)
 80004f8:	f000 fbce 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004fc:	bf00      	nop
 80004fe:	3728      	adds	r7, #40	; 0x28
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40003800 	.word	0x40003800
 8000508:	40021000 	.word	0x40021000
 800050c:	48000400 	.word	0x48000400

08000510 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_SPI_MspDeInit+0x30>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10a      	bne.n	8000538 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_SPI_MspDeInit+0x34>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_SPI_MspDeInit+0x34>)
 8000528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800052c:	61d3      	str	r3, [r2, #28]

    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 800052e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <HAL_SPI_MspDeInit+0x38>)
 8000534:	f000 fd22 	bl	8000f7c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40003800 	.word	0x40003800
 8000544:	40021000 	.word	0x40021000
 8000548:	48000400 	.word	0x48000400

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <HAL_UART_MspInit+0x7c>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d128      	bne.n	80005c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_UART_MspInit+0x80>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <HAL_UART_MspInit+0x80>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800059e:	230c      	movs	r3, #12
 80005a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ae:	2307      	movs	r3, #7
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f000 fb6c 	bl	8000c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40004400 	.word	0x40004400
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	2036      	movs	r0, #54	; 0x36
 80005e6:	f000 fb2d 	bl	8000c44 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005ea:	2036      	movs	r0, #54	; 0x36
 80005ec:	f000 fb46 	bl	8000c7c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <HAL_InitTick+0xa0>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <HAL_InitTick+0xa0>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <HAL_InitTick+0xa0>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000608:	f107 0210 	add.w	r2, r7, #16
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f001 feda 	bl	80023cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000618:	f001 fe94 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 800061c:	4603      	mov	r3, r0
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000624:	4a13      	ldr	r2, [pc, #76]	; (8000674 <HAL_InitTick+0xa4>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	0c9b      	lsrs	r3, r3, #18
 800062c:	3b01      	subs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_InitTick+0xa8>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <HAL_InitTick+0xac>)
 8000634:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HAL_InitTick+0xa8>)
 8000638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800063c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_InitTick+0xa8>)
 8000640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000642:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_InitTick+0xa8>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <HAL_InitTick+0xa8>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <HAL_InitTick+0xa8>)
 8000652:	f002 fa8b 	bl	8002b6c <HAL_TIM_Base_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d104      	bne.n	8000666 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800065c:	4806      	ldr	r0, [pc, #24]	; (8000678 <HAL_InitTick+0xa8>)
 800065e:	f002 fae7 	bl	8002c30 <HAL_TIM_Base_Start_IT>
 8000662:	4603      	mov	r3, r0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3730      	adds	r7, #48	; 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	431bde83 	.word	0x431bde83
 8000678:	200019c0 	.word	0x200019c0
 800067c:	40001000 	.word	0x40001000

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <TIM6_DAC_IRQHandler+0x10>)
 80006b2:	f002 fb11 	bl	8002cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200019c0 	.word	0x200019c0

080006c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SystemInit+0x20>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ca:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <SystemInit+0x20>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <HardwareInit>:
TaskHandle_t xSN74TaskHandle = NULL;
QueueHandle_t xSN74QueueHandle = NULL;
SPI_HandleTypeDef sn74_spi2;

static BaseType_t HardwareInit( void )
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
BaseType_t xRet;
GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

	sn74_spi2.Instance = SN74_SPI_INTERFACE;
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <HardwareInit+0x110>)
 80006fc:	4a3e      	ldr	r2, [pc, #248]	; (80007f8 <HardwareInit+0x114>)
 80006fe:	601a      	str	r2, [r3, #0]
	sn74_spi2.Init.Mode = SPI_MODE_MASTER;
 8000700:	4b3c      	ldr	r3, [pc, #240]	; (80007f4 <HardwareInit+0x110>)
 8000702:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000706:	605a      	str	r2, [r3, #4]
	sn74_spi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000708:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <HardwareInit+0x110>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
	sn74_spi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800070e:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <HardwareInit+0x110>)
 8000710:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000714:	60da      	str	r2, [r3, #12]
	sn74_spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <HardwareInit+0x110>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
	sn74_spi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071c:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <HardwareInit+0x110>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
	sn74_spi2.Init.NSS = SPI_NSS_SOFT;
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <HardwareInit+0x110>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	619a      	str	r2, [r3, #24]
	sn74_spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800072a:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <HardwareInit+0x110>)
 800072c:	2208      	movs	r2, #8
 800072e:	61da      	str	r2, [r3, #28]
	sn74_spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000730:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <HardwareInit+0x110>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
	sn74_spi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <HardwareInit+0x110>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
	sn74_spi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <HardwareInit+0x110>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
	sn74_spi2.Init.CRCPolynomial = 7;
 8000742:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <HardwareInit+0x110>)
 8000744:	2207      	movs	r2, #7
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
	sn74_spi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <HardwareInit+0x110>)
 800074a:	2200      	movs	r2, #0
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
	sn74_spi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <HardwareInit+0x110>)
 8000750:	2208      	movs	r2, #8
 8000752:	635a      	str	r2, [r3, #52]	; 0x34
	xRet = HAL_SPI_Init( &sn74_spi2 );
 8000754:	4827      	ldr	r0, [pc, #156]	; (80007f4 <HardwareInit+0x110>)
 8000756:	f001 fe6b 	bl	8002430 <HAL_SPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	61fb      	str	r3, [r7, #28]
	if ( xRet != HAL_OK )
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <HardwareInit+0x84>
	{
		return xRet;
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	e040      	b.n	80007ea <HardwareInit+0x106>
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <HardwareInit+0x118>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a23      	ldr	r2, [pc, #140]	; (80007fc <HardwareInit+0x118>)
 800076e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000772:	6153      	str	r3, [r2, #20]
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <HardwareInit+0x118>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <HardwareInit+0x118>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <HardwareInit+0x118>)
 8000786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800078a:	6153      	str	r3, [r2, #20]
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HardwareInit+0x118>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SN74_RCLK_PORT, SN74_RCLK_PIN|SN74_SRCLR_PIN, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f244 0140 	movw	r1, #16448	; 0x4040
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <HardwareInit+0x11c>)
 80007a0:	f000 fcbe 	bl	8001120 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SN74_OE_PORT, SN74_OE_PIN, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	4816      	ldr	r0, [pc, #88]	; (8000804 <HardwareInit+0x120>)
 80007aa:	f000 fcb9 	bl	8001120 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB14 PB6 */
	GPIO_InitStruct.Pin = SN74_RCLK_PIN|SN74_SRCLR_PIN;
 80007ae:	f244 0340 	movw	r3, #16448	; 0x4040
 80007b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SN74_RCLK_PORT, &GPIO_InitStruct);
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4619      	mov	r1, r3
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <HardwareInit+0x11c>)
 80007c8:	f000 fa66 	bl	8000c98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = SN74_OE_PIN;
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SN74_OE_PORT, &GPIO_InitStruct);
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4619      	mov	r1, r3
 80007e2:	4808      	ldr	r0, [pc, #32]	; (8000804 <HardwareInit+0x120>)
 80007e4:	f000 fa58 	bl	8000c98 <HAL_GPIO_Init>

	return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20001a0c 	.word	0x20001a0c
 80007f8:	40003800 	.word	0x40003800
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000400 	.word	0x48000400
 8000804:	48000800 	.word	0x48000800

08000808 <DriverInit>:

static BaseType_t DriverInit( void )
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af02      	add	r7, sp, #8
	if ( xSN74TaskHandle != NULL )
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <DriverInit+0x58>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <DriverInit+0x12>
	{
		return pdFREERTOS_ERRNO_EADDRINUSE; /* Device already initialized */
 8000816:	2370      	movs	r3, #112	; 0x70
 8000818:	e01e      	b.n	8000858 <DriverInit+0x50>
	}
	if ( ( xSN74QueueHandle = xQueueCreate( SN74_MSG_QUEUE_LEN, sizeof(SN74Msg_t) ) ) < 0 )
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	2005      	movs	r0, #5
 8000820:	f003 f8de 	bl	80039e0 <xQueueGenericCreate>
 8000824:	4602      	mov	r2, r0
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <DriverInit+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
	{
		return errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	if ( xTaskCreate( SN74Task, "sn74_dd",  256, NULL, tskIDLE_PRIORITY, &xSN74TaskHandle ) < 0 )
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <DriverInit+0x58>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2300      	movs	r3, #0
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000838:	490b      	ldr	r1, [pc, #44]	; (8000868 <DriverInit+0x60>)
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <DriverInit+0x64>)
 800083c:	f003 fdab 	bl	8004396 <xTaskCreate>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	da07      	bge.n	8000856 <DriverInit+0x4e>
	{
		vQueueDelete( xSN74QueueHandle );
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <DriverInit+0x5c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fb92 	bl	8003f74 <vQueueDelete>
		return errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000854:	e000      	b.n	8000858 <DriverInit+0x50>
	}
	return pdFREERTOS_ERRNO_NONE;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000002c 	.word	0x2000002c
 8000864:	20000030 	.word	0x20000030
 8000868:	08005f90 	.word	0x08005f90
 800086c:	08000975 	.word	0x08000975

08000870 <IO_SN74PowerOff>:

static void IO_SN74PowerOff( void )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SN74_SRCLR_PORT, SN74_SRCLR_PIN, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <IO_SN74PowerOff+0x34>)
 800087a:	f000 fc51 	bl	8001120 <HAL_GPIO_WritePin>
	vTaskDelay(1 * portTICK_PERIOD_MS);
 800087e:	2001      	movs	r0, #1
 8000880:	f003 fec4 	bl	800460c <vTaskDelay>
	HAL_GPIO_WritePin(SN74_SRCLR_PORT, SN74_SRCLR_PIN, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <IO_SN74PowerOff+0x34>)
 800088a:	f000 fc49 	bl	8001120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SN74_OE_PORT, SN74_OE_PIN, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <IO_SN74PowerOff+0x38>)
 8000894:	f000 fc44 	bl	8001120 <HAL_GPIO_WritePin>
	vTaskDelay(1 * portTICK_PERIOD_MS);
 8000898:	2001      	movs	r0, #1
 800089a:	f003 feb7 	bl	800460c <vTaskDelay>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	48000400 	.word	0x48000400
 80008a8:	48000800 	.word	0x48000800

080008ac <IO_SN74PowerOn>:

static void IO_SN74PowerOn( void )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SN74_SRCLR_PORT, SN74_SRCLR_PIN, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <IO_SN74PowerOn+0x34>)
 80008b6:	f000 fc33 	bl	8001120 <HAL_GPIO_WritePin>
	vTaskDelay(1 * portTICK_PERIOD_MS);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f003 fea6 	bl	800460c <vTaskDelay>
	HAL_GPIO_WritePin(SN74_SRCLR_PORT, SN74_SRCLR_PIN, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <IO_SN74PowerOn+0x34>)
 80008c6:	f000 fc2b 	bl	8001120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SN74_OE_PORT, SN74_OE_PIN, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <IO_SN74PowerOn+0x38>)
 80008d0:	f000 fc26 	bl	8001120 <HAL_GPIO_WritePin>
	vTaskDelay(1 * portTICK_PERIOD_MS);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f003 fe99 	bl	800460c <vTaskDelay>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	48000400 	.word	0x48000400
 80008e4:	48000800 	.word	0x48000800

080008e8 <IO_SN74Write>:

static void IO_SN74Write( uint8_t pattern )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit( &sn74_spi2, &pattern, sizeof(uint8_t), 10 );
 80008f2:	1df9      	adds	r1, r7, #7
 80008f4:	230a      	movs	r3, #10
 80008f6:	2201      	movs	r2, #1
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <IO_SN74Write+0x48>)
 80008fa:	f001 fe6c 	bl	80025d6 <HAL_SPI_Transmit>
	vTaskDelay(1 * portTICK_PERIOD_MS);
 80008fe:	2001      	movs	r0, #1
 8000900:	f003 fe84 	bl	800460c <vTaskDelay>
	HAL_GPIO_WritePin(SN74_RCLK_PORT, SN74_RCLK_PIN, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <IO_SN74Write+0x4c>)
 800090c:	f000 fc08 	bl	8001120 <HAL_GPIO_WritePin>
	vTaskDelay(1 * portTICK_PERIOD_MS);
 8000910:	2001      	movs	r0, #1
 8000912:	f003 fe7b 	bl	800460c <vTaskDelay>
	HAL_GPIO_WritePin(SN74_RCLK_PORT, SN74_RCLK_PIN, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <IO_SN74Write+0x4c>)
 800091e:	f000 fbff 	bl	8001120 <HAL_GPIO_WritePin>
	vTaskDelay(1 * portTICK_PERIOD_MS);
 8000922:	2001      	movs	r0, #1
 8000924:	f003 fe72 	bl	800460c <vTaskDelay>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20001a0c 	.word	0x20001a0c
 8000934:	48000400 	.word	0x48000400

08000938 <xRunSN74>:

BaseType_t xRunSN74( void )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
BaseType_t xRet;
	if ( ( xRet = HardwareInit() ) != HAL_OK )
 800093e:	f7ff fed1 	bl	80006e4 <HardwareInit>
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <xRunSN74+0x16>
	{
		return xRet;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	e00b      	b.n	8000966 <xRunSN74+0x2e>
	}
	if ( ( xRet = DriverInit() ) != pdFREERTOS_ERRNO_NONE )
 800094e:	f7ff ff5b 	bl	8000808 <DriverInit>
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <xRunSN74+0x2c>
	{
		HAL_SPI_DeInit(&sn74_spi2);
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <xRunSN74+0x38>)
 800095c:	f001 fe13 	bl	8002586 <HAL_SPI_DeInit>
		return xRet;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	e000      	b.n	8000966 <xRunSN74+0x2e>
	}
	return pdFREERTOS_ERRNO_NONE;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20001a0c 	.word	0x20001a0c

08000974 <SN74Task>:

void SN74Task( void *pvParameters )
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
SN74Msg_t RecvMsg;
uint8_t DevOnStatus = pdFALSE;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
	IO_SN74PowerOff();
 8000980:	f7ff ff76 	bl	8000870 <IO_SN74PowerOff>
	while ( 1 )
	{
		if ( xQueueReceive( xSN74QueueHandle, &RecvMsg, portMAX_DELAY ) )
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <SN74Task+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fa13 	bl	8003dbc <xQueueReceive>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d019      	beq.n	80009d0 <SN74Task+0x5c>
		{
			switch ( RecvMsg.cmd )
 800099c:	7b3b      	ldrb	r3, [r7, #12]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d009      	beq.n	80009b6 <SN74Task+0x42>
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d00c      	beq.n	80009c0 <SN74Task+0x4c>
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d000      	beq.n	80009ac <SN74Task+0x38>
					IO_SN74Write( RecvMsg.data );
				}
				break;

			default:
				break;
 80009aa:	e014      	b.n	80009d6 <SN74Task+0x62>
				IO_SN74PowerOn();
 80009ac:	f7ff ff7e 	bl	80008ac <IO_SN74PowerOn>
				DevOnStatus = pdTRUE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
				break;
 80009b4:	e00f      	b.n	80009d6 <SN74Task+0x62>
				IO_SN74PowerOff();
 80009b6:	f7ff ff5b 	bl	8000870 <IO_SN74PowerOff>
				DevOnStatus = pdFALSE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	73fb      	strb	r3, [r7, #15]
				break;
 80009be:	e00a      	b.n	80009d6 <SN74Task+0x62>
				if ( DevOnStatus )
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <SN74Task+0x60>
					IO_SN74Write( RecvMsg.data );
 80009c6:	7b7b      	ldrb	r3, [r7, #13]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff8d 	bl	80008e8 <IO_SN74Write>
				break;
 80009ce:	e001      	b.n	80009d4 <SN74Task+0x60>
			}
		}
 80009d0:	bf00      	nop
 80009d2:	e7d7      	b.n	8000984 <SN74Task+0x10>
				break;
 80009d4:	bf00      	nop
		if ( xQueueReceive( xSN74QueueHandle, &RecvMsg, portMAX_DELAY ) )
 80009d6:	e7d5      	b.n	8000984 <SN74Task+0x10>
 80009d8:	20000030 	.word	0x20000030

080009dc <xSN74Ctrl>:

/*
 * Exposed IO command
 */
BaseType_t xSN74Ctrl( SN74Msg_t *msg )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if ( xSN74TaskHandle == NULL ) {
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <xSN74Ctrl+0x30>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <xSN74Ctrl+0x16>
		return errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f0:	e007      	b.n	8000a02 <xSN74Ctrl+0x26>
	}
	return xQueueSend( xSN74QueueHandle, msg, (TickType_t) 0 );
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <xSN74Ctrl+0x34>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f003 f850 	bl	8003aa0 <xQueueGenericSend>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000002c 	.word	0x2000002c
 8000a10:	20000030 	.word	0x20000030

08000a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490e      	ldr	r1, [pc, #56]	; (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0b      	ldr	r4, [pc, #44]	; (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a3e:	f7ff fe3f 	bl	80006c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f005 fa5b 	bl	8005efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a46:	f7ff fbe5 	bl	8000214 <main>

08000a4a <LoopForever>:

LoopForever:
    b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a4c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a58:	08005ff0 	.word	0x08005ff0
  ldr r2, =_sbss
 8000a5c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a60:	20001ab4 	.word	0x20001ab4

08000a64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x28>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x28>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f8d8 	bl	8000c2e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fda6 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fcd8 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20001a70 	.word	0x20001a70

08000abc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20001a70 	.word	0x20001a70

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff4c 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c56:	f7ff ff61 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	6978      	ldr	r0, [r7, #20]
 8000c62:	f7ff ffb1 	bl	8000bc8 <NVIC_EncodePriority>
 8000c66:	4602      	mov	r2, r0
 8000c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff80 	bl	8000b74 <__NVIC_SetPriority>
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff54 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	e14e      	b.n	8000f46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8140 	beq.w	8000f40 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d00b      	beq.n	8000ce0 <HAL_GPIO_Init+0x48>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d007      	beq.n	8000ce0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd4:	2b11      	cmp	r3, #17
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b12      	cmp	r3, #18
 8000cde:	d130      	bne.n	8000d42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	f003 0201 	and.w	r2, r3, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0xea>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d123      	bne.n	8000dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	6939      	ldr	r1, [r7, #16]
 8000dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0203 	and.w	r2, r3, #3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 809a 	beq.w	8000f40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0c:	4b55      	ldr	r3, [pc, #340]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a54      	ldr	r2, [pc, #336]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <HAL_GPIO_Init+0x2cc>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e24:	4a50      	ldr	r2, [pc, #320]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e4e:	d013      	beq.n	8000e78 <HAL_GPIO_Init+0x1e0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a46      	ldr	r2, [pc, #280]	; (8000f6c <HAL_GPIO_Init+0x2d4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d00d      	beq.n	8000e74 <HAL_GPIO_Init+0x1dc>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a45      	ldr	r2, [pc, #276]	; (8000f70 <HAL_GPIO_Init+0x2d8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d007      	beq.n	8000e70 <HAL_GPIO_Init+0x1d8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a44      	ldr	r2, [pc, #272]	; (8000f74 <HAL_GPIO_Init+0x2dc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d101      	bne.n	8000e6c <HAL_GPIO_Init+0x1d4>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	e004      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_GPIO_Init+0x1e2>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	f002 0203 	and.w	r2, r2, #3
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	4093      	lsls	r3, r2
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e8a:	4937      	ldr	r1, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x2d0>)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ee6:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_GPIO_Init+0x2e0>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f aea9 	bne.w	8000ca8 <HAL_GPIO_Init+0x10>
  }
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000f8a:	e0b2      	b.n	80010f2 <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a5 	beq.w	80010ec <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000fa2:	4a5a      	ldr	r2, [pc, #360]	; (800110c <HAL_GPIO_DeInit+0x190>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fca:	d013      	beq.n	8000ff4 <HAL_GPIO_DeInit+0x78>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a50      	ldr	r2, [pc, #320]	; (8001110 <HAL_GPIO_DeInit+0x194>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_GPIO_DeInit+0x74>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_GPIO_DeInit+0x198>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_DeInit+0x70>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_GPIO_DeInit+0x19c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_GPIO_DeInit+0x6c>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_DeInit+0x7a>
 8000fe8:	2305      	movs	r3, #5
 8000fea:	e004      	b.n	8000ff6 <HAL_GPIO_DeInit+0x7a>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_DeInit+0x7a>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_GPIO_DeInit+0x7a>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	f002 0203 	and.w	r2, r2, #3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4093      	lsls	r3, r2
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	429a      	cmp	r2, r3
 8001004:	d132      	bne.n	800106c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001006:	4b45      	ldr	r3, [pc, #276]	; (800111c <HAL_GPIO_DeInit+0x1a0>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	4943      	ldr	r1, [pc, #268]	; (800111c <HAL_GPIO_DeInit+0x1a0>)
 8001010:	4013      	ands	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <HAL_GPIO_DeInit+0x1a0>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	493f      	ldr	r1, [pc, #252]	; (800111c <HAL_GPIO_DeInit+0x1a0>)
 800101e:	4013      	ands	r3, r2
 8001020:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <HAL_GPIO_DeInit+0x1a0>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	493c      	ldr	r1, [pc, #240]	; (800111c <HAL_GPIO_DeInit+0x1a0>)
 800102c:	4013      	ands	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001030:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_GPIO_DeInit+0x1a0>)
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	4938      	ldr	r1, [pc, #224]	; (800111c <HAL_GPIO_DeInit+0x1a0>)
 800103a:	4013      	ands	r3, r2
 800103c:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800104e:	4a2f      	ldr	r2, [pc, #188]	; (800110c <HAL_GPIO_DeInit+0x190>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43da      	mvns	r2, r3
 800105e:	482b      	ldr	r0, [pc, #172]	; (800110c <HAL_GPIO_DeInit+0x190>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	400a      	ands	r2, r1
 8001066:	3302      	adds	r3, #2
 8001068:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2103      	movs	r1, #3
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	08d2      	lsrs	r2, r2, #3
 80010a2:	4019      	ands	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2103      	movs	r1, #3
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	401a      	ands	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	2101      	movs	r1, #1
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2103      	movs	r1, #3
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
    }

    position++;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa22 f303 	lsr.w	r3, r2, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f47f af46 	bne.w	8000f8c <HAL_GPIO_DeInit+0x10>
  }
}
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40010000 	.word	0x40010000
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	48000c00 	.word	0x48000c00
 800111c:	40010400 	.word	0x40010400

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800113c:	e002      	b.n	8001144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001156:	af00      	add	r7, sp, #0
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	f000 bef4 	b.w	8001f52 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 816a 	beq.w	800144e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800117a:	4bb3      	ldr	r3, [pc, #716]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b04      	cmp	r3, #4
 8001184:	d00c      	beq.n	80011a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001186:	4bb0      	ldr	r3, [pc, #704]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b08      	cmp	r3, #8
 8001190:	d159      	bne.n	8001246 <HAL_RCC_OscConfig+0xf6>
 8001192:	4bad      	ldr	r3, [pc, #692]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119e:	d152      	bne.n	8001246 <HAL_RCC_OscConfig+0xf6>
 80011a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d102      	bne.n	80011d2 <HAL_RCC_OscConfig+0x82>
 80011cc:	4b9e      	ldr	r3, [pc, #632]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	e015      	b.n	80011fe <HAL_RCC_OscConfig+0xae>
 80011d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80011fa:	4b93      	ldr	r3, [pc, #588]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001202:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001206:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800120a:	fa92 f2a2 	rbit	r2, r2
 800120e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001212:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001216:	fab2 f282 	clz	r2, r2
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	f042 0220 	orr.w	r2, r2, #32
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	f002 021f 	and.w	r2, r2, #31
 8001226:	2101      	movs	r1, #1
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 810c 	beq.w	800144c <HAL_RCC_OscConfig+0x2fc>
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 8106 	bne.w	800144c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	f000 be86 	b.w	8001f52 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001250:	d106      	bne.n	8001260 <HAL_RCC_OscConfig+0x110>
 8001252:	4b7d      	ldr	r3, [pc, #500]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7c      	ldr	r2, [pc, #496]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e030      	b.n	80012c2 <HAL_RCC_OscConfig+0x172>
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x134>
 800126a:	4b77      	ldr	r3, [pc, #476]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a76      	ldr	r2, [pc, #472]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b74      	ldr	r3, [pc, #464]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a73      	ldr	r2, [pc, #460]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 800127c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01e      	b.n	80012c2 <HAL_RCC_OscConfig+0x172>
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128e:	d10c      	bne.n	80012aa <HAL_RCC_OscConfig+0x15a>
 8001290:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a6c      	ldr	r2, [pc, #432]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a69      	ldr	r2, [pc, #420]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e00b      	b.n	80012c2 <HAL_RCC_OscConfig+0x172>
 80012aa:	4b67      	ldr	r3, [pc, #412]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a66      	ldr	r2, [pc, #408]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80012b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b64      	ldr	r3, [pc, #400]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a63      	ldr	r2, [pc, #396]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80012bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012c2:	4b61      	ldr	r3, [pc, #388]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	f023 020f 	bic.w	r2, r3, #15
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	495d      	ldr	r1, [pc, #372]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d059      	beq.n	8001394 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbec 	bl	8000abc <HAL_GetTick>
 80012e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ea:	f7ff fbe7 	bl	8000abc <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d902      	bls.n	8001300 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f000 be29 	b.w	8001f52 <HAL_RCC_OscConfig+0xe02>
 8001300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001304:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001314:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001318:	fab3 f383 	clz	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d102      	bne.n	8001332 <HAL_RCC_OscConfig+0x1e2>
 800132c:	4b46      	ldr	r3, [pc, #280]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x20e>
 8001332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001336:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800134e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001362:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001366:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800136a:	fa92 f2a2 	rbit	r2, r2
 800136e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001372:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001376:	fab2 f282 	clz	r2, r2
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	f042 0220 	orr.w	r2, r2, #32
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	f002 021f 	and.w	r2, r2, #31
 8001386:	2101      	movs	r1, #1
 8001388:	fa01 f202 	lsl.w	r2, r1, r2
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0ab      	beq.n	80012ea <HAL_RCC_OscConfig+0x19a>
 8001392:	e05c      	b.n	800144e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fb92 	bl	8000abc <HAL_GetTick>
 8001398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139e:	f7ff fb8d 	bl	8000abc <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d902      	bls.n	80013b4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f000 bdcf 	b.w	8001f52 <HAL_RCC_OscConfig+0xe02>
 80013b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013cc:	fab3 f383 	clz	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d102      	bne.n	80013e6 <HAL_RCC_OscConfig+0x296>
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x2c2>
 80013e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001402:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_RCC_OscConfig+0x2f8>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001416:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800141a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800141e:	fa92 f2a2 	rbit	r2, r2
 8001422:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001426:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800142a:	fab2 f282 	clz	r2, r2
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	f042 0220 	orr.w	r2, r2, #32
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	f002 021f 	and.w	r2, r2, #31
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1ab      	bne.n	800139e <HAL_RCC_OscConfig+0x24e>
 8001446:	e002      	b.n	800144e <HAL_RCC_OscConfig+0x2fe>
 8001448:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 816f 	beq.w	800173c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800145e:	4bd0      	ldr	r3, [pc, #832]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800146a:	4bcd      	ldr	r3, [pc, #820]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d16c      	bne.n	8001550 <HAL_RCC_OscConfig+0x400>
 8001476:	4bca      	ldr	r3, [pc, #808]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d166      	bne.n	8001550 <HAL_RCC_OscConfig+0x400>
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001494:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d102      	bne.n	80014b2 <HAL_RCC_OscConfig+0x362>
 80014ac:	4bbc      	ldr	r3, [pc, #752]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	e013      	b.n	80014da <HAL_RCC_OscConfig+0x38a>
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014bc:	fa93 f3a3 	rbit	r3, r3
 80014c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014d6:	4bb2      	ldr	r3, [pc, #712]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	2202      	movs	r2, #2
 80014dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014e4:	fa92 f2a2 	rbit	r2, r2
 80014e8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80014ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80014f0:	fab2 f282 	clz	r2, r2
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	f042 0220 	orr.w	r2, r2, #32
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	f002 021f 	and.w	r2, r2, #31
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <HAL_RCC_OscConfig+0x3cc>
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d002      	beq.n	800151c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	f000 bd1b 	b.w	8001f52 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4ba0      	ldr	r3, [pc, #640]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	21f8      	movs	r1, #248	; 0xf8
 800152c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001534:	fa91 f1a1 	rbit	r1, r1
 8001538:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800153c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001540:	fab1 f181 	clz	r1, r1
 8001544:	b2c9      	uxtb	r1, r1
 8001546:	408b      	lsls	r3, r1
 8001548:	4995      	ldr	r1, [pc, #596]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	e0f5      	b.n	800173c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8085 	beq.w	8001666 <HAL_RCC_OscConfig+0x516>
 800155c:	2301      	movs	r3, #1
 800155e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800156e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001572:	fab3 f383 	clz	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800157c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	461a      	mov	r2, r3
 8001584:	2301      	movs	r3, #1
 8001586:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fa98 	bl	8000abc <HAL_GetTick>
 800158c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fa93 	bl	8000abc <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d902      	bls.n	80015a8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	f000 bcd5 	b.w	8001f52 <HAL_RCC_OscConfig+0xe02>
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80015ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	095b      	lsrs	r3, r3, #5
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d102      	bne.n	80015d8 <HAL_RCC_OscConfig+0x488>
 80015d2:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	e013      	b.n	8001600 <HAL_RCC_OscConfig+0x4b0>
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	2202      	movs	r2, #2
 8001602:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001606:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800160a:	fa92 f2a2 	rbit	r2, r2
 800160e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001612:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001616:	fab2 f282 	clz	r2, r2
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	f042 0220 	orr.w	r2, r2, #32
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f002 021f 	and.w	r2, r2, #31
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0af      	beq.n	8001592 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001632:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	21f8      	movs	r1, #248	; 0xf8
 8001642:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800164a:	fa91 f1a1 	rbit	r1, r1
 800164e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001652:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001656:	fab1 f181 	clz	r1, r1
 800165a:	b2c9      	uxtb	r1, r1
 800165c:	408b      	lsls	r3, r1
 800165e:	4950      	ldr	r1, [pc, #320]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e06a      	b.n	800173c <HAL_RCC_OscConfig+0x5ec>
 8001666:	2301      	movs	r3, #1
 8001668:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001678:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001686:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	461a      	mov	r2, r3
 800168e:	2300      	movs	r3, #0
 8001690:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fa13 	bl	8000abc <HAL_GetTick>
 8001696:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff fa0e 	bl	8000abc <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d902      	bls.n	80016b2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f000 bc50 	b.w	8001f52 <HAL_RCC_OscConfig+0xe02>
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80016c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d102      	bne.n	80016e2 <HAL_RCC_OscConfig+0x592>
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	e013      	b.n	800170a <HAL_RCC_OscConfig+0x5ba>
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x650>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	2202      	movs	r2, #2
 800170c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001710:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001714:	fa92 f2a2 	rbit	r2, r2
 8001718:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800171c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001720:	fab2 f282 	clz	r2, r2
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f042 0220 	orr.w	r2, r2, #32
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	f002 021f 	and.w	r2, r2, #31
 8001730:	2101      	movs	r1, #1
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1af      	bne.n	800169c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80da 	beq.w	8001900 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d069      	beq.n	800182a <HAL_RCC_OscConfig+0x6da>
 8001756:	2301      	movs	r3, #1
 8001758:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176c:	fab3 f383 	clz	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x654>)
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	461a      	mov	r2, r3
 800177c:	2301      	movs	r3, #1
 800177e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff f99c 	bl	8000abc <HAL_GetTick>
 8001784:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001788:	e00e      	b.n	80017a8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff f997 	bl	8000abc <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d906      	bls.n	80017a8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e3d9      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	10908120 	.word	0x10908120
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017d6:	2202      	movs	r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4ba5      	ldr	r3, [pc, #660]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80017ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017f2:	2102      	movs	r1, #2
 80017f4:	6019      	str	r1, [r3, #0]
 80017f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f1a3 	rbit	r1, r3
 8001800:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001804:	6019      	str	r1, [r3, #0]
  return result;
 8001806:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0b0      	beq.n	800178a <HAL_RCC_OscConfig+0x63a>
 8001828:	e06a      	b.n	8001900 <HAL_RCC_OscConfig+0x7b0>
 800182a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001840:	601a      	str	r2, [r3, #0]
  return result;
 8001842:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001846:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <HAL_RCC_OscConfig+0x934>)
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	461a      	mov	r2, r3
 8001858:	2300      	movs	r3, #0
 800185a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7ff f92e 	bl	8000abc <HAL_GetTick>
 8001860:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001864:	e009      	b.n	800187a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001866:	f7ff f929 	bl	8000abc <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e36b      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
 800187a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c2:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80018c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ca:	2102      	movs	r1, #2
 80018cc:	6019      	str	r1, [r3, #0]
 80018ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f1a3 	rbit	r1, r3
 80018d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018dc:	6019      	str	r1, [r3, #0]
  return result;
 80018de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1b2      	bne.n	8001866 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8158 	beq.w	8001bc0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d112      	bne.n	8001948 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b57      	ldr	r3, [pc, #348]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a56      	ldr	r2, [pc, #344]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <HAL_RCC_OscConfig+0x938>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d11a      	bne.n	800198a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <HAL_RCC_OscConfig+0x938>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <HAL_RCC_OscConfig+0x938>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001960:	f7ff f8ac 	bl	8000abc <HAL_GetTick>
 8001964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	e009      	b.n	800197e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196a:	f7ff f8a7 	bl	8000abc <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e2e9      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <HAL_RCC_OscConfig+0x938>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ef      	beq.n	800196a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x852>
 8001994:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e02f      	b.n	8001a02 <HAL_RCC_OscConfig+0x8b2>
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x876>
 80019ac:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a33      	ldr	r2, [pc, #204]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019be:	f023 0304 	bic.w	r3, r3, #4
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	e01d      	b.n	8001a02 <HAL_RCC_OscConfig+0x8b2>
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x89a>
 80019d0:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a2a      	ldr	r2, [pc, #168]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e00b      	b.n	8001a02 <HAL_RCC_OscConfig+0x8b2>
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d06b      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f856 	bl	8000abc <HAL_GetTick>
 8001a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff f851 	bl	8000abc <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e291      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
 8001a2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a5c:	601a      	str	r2, [r3, #0]
  return result;
 8001a5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d109      	bne.n	8001a8c <HAL_RCC_OscConfig+0x93c>
 8001a78:	4b01      	ldr	r3, [pc, #4]	; (8001a80 <HAL_RCC_OscConfig+0x930>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x958>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	10908120 	.word	0x10908120
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a90:	2202      	movs	r2, #2
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	4bbb      	ldr	r3, [pc, #748]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001aac:	2102      	movs	r1, #2
 8001aae:	6011      	str	r1, [r2, #0]
 8001ab0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	fa92 f1a2 	rbit	r1, r2
 8001aba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001abe:	6011      	str	r1, [r2, #0]
  return result;
 8001ac0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	fab2 f282 	clz	r2, r2
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f002 021f 	and.w	r2, r2, #31
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d099      	beq.n	8001a16 <HAL_RCC_OscConfig+0x8c6>
 8001ae2:	e063      	b.n	8001bac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7fe ffea 	bl	8000abc <HAL_GetTick>
 8001ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7fe ffe5 	bl	8000abc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e225      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
 8001b06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b22:	2202      	movs	r2, #2
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b34:	601a      	str	r2, [r3, #0]
  return result;
 8001b36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f043 0302 	orr.w	r3, r3, #2
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_OscConfig+0xa06>
 8001b50:	4b90      	ldr	r3, [pc, #576]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	e00d      	b.n	8001b72 <HAL_RCC_OscConfig+0xa22>
 8001b56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	4b89      	ldr	r3, [pc, #548]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b76:	2102      	movs	r1, #2
 8001b78:	6011      	str	r1, [r2, #0]
 8001b7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	fa92 f1a2 	rbit	r1, r2
 8001b84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b88:	6011      	str	r1, [r2, #0]
  return result;
 8001b8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	fab2 f282 	clz	r2, r2
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f002 021f 	and.w	r2, r2, #31
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1a0      	bne.n	8001aee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b77      	ldr	r3, [pc, #476]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	4a76      	ldr	r2, [pc, #472]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 81c2 	beq.w	8001f50 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bcc:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	f000 819c 	beq.w	8001f12 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	f040 8114 	bne.w	8001e0e <HAL_RCC_OscConfig+0xcbe>
 8001be6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	461a      	mov	r2, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe ff4e 	bl	8000abc <HAL_GetTick>
 8001c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c24:	e009      	b.n	8001c3a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7fe ff49 	bl	8000abc <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e18b      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
 8001c3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c52:	601a      	str	r2, [r3, #0]
  return result;
 8001c54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <HAL_RCC_OscConfig+0xb24>
 8001c6e:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e01b      	b.n	8001cac <HAL_RCC_OscConfig+0xb5c>
 8001c74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cb4:	6011      	str	r1, [r2, #0]
 8001cb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	fa92 f1a2 	rbit	r1, r2
 8001cc0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cc4:	6011      	str	r1, [r2, #0]
  return result;
 8001cc6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d19e      	bne.n	8001c26 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	4925      	ldr	r1, [pc, #148]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	fa93 f2a3 	rbit	r2, r3
 8001d18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d1c:	601a      	str	r2, [r3, #0]
  return result;
 8001d1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d22:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	461a      	mov	r2, r3
 8001d36:	2301      	movs	r3, #1
 8001d38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7fe febf 	bl	8000abc <HAL_GetTick>
 8001d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d42:	e009      	b.n	8001d58 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d44:	f7fe feba 	bl	8000abc <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0fc      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
 8001d58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d70:	601a      	str	r2, [r3, #0]
  return result;
 8001d72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0xc48>
 8001d8c:	4b01      	ldr	r3, [pc, #4]	; (8001d94 <HAL_RCC_OscConfig+0xc44>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	e01e      	b.n	8001dd0 <HAL_RCC_OscConfig+0xc80>
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_OscConfig+0xe0c>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dd8:	6011      	str	r1, [r2, #0]
 8001dda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	fa92 f1a2 	rbit	r1, r2
 8001de4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001de8:	6011      	str	r1, [r2, #0]
  return result;
 8001dea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	fab2 f282 	clz	r2, r2
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f042 0220 	orr.w	r2, r2, #32
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f002 021f 	and.w	r2, r2, #31
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f202 	lsl.w	r2, r1, r2
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d09b      	beq.n	8001d44 <HAL_RCC_OscConfig+0xbf4>
 8001e0c:	e0a0      	b.n	8001f50 <HAL_RCC_OscConfig+0xe00>
 8001e0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e26:	601a      	str	r2, [r3, #0]
  return result;
 8001e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe fe3a 	bl	8000abc <HAL_GetTick>
 8001e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe fe35 	bl	8000abc <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e077      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
 8001e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	601a      	str	r2, [r3, #0]
  return result;
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_OscConfig+0xd4c>
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_OscConfig+0xe0c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	e01b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd84>
 8001e9c:	f107 0320 	add.w	r3, r7, #32
 8001ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	fa93 f2a3 	rbit	r2, r3
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f107 0318 	add.w	r3, r7, #24
 8001eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f107 0318 	add.w	r3, r7, #24
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f2a3 	rbit	r2, r3
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_RCC_OscConfig+0xe0c>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f107 0210 	add.w	r2, r7, #16
 8001ed8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001edc:	6011      	str	r1, [r2, #0]
 8001ede:	f107 0210 	add.w	r2, r7, #16
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	fa92 f1a2 	rbit	r1, r2
 8001ee8:	f107 020c 	add.w	r2, r7, #12
 8001eec:	6011      	str	r1, [r2, #0]
  return result;
 8001eee:	f107 020c 	add.w	r2, r7, #12
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d19e      	bne.n	8001e4e <HAL_RCC_OscConfig+0xcfe>
 8001f10:	e01e      	b.n	8001f50 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e018      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_RCC_OscConfig+0xe0c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f28:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000

08001f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b09e      	sub	sp, #120	; 0x78
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e162      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b90      	ldr	r3, [pc, #576]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b8d      	ldr	r3, [pc, #564]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	498b      	ldr	r1, [pc, #556]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e14a      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	497f      	ldr	r1, [pc, #508]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80dc 	beq.w	800218c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d13c      	bne.n	8002056 <HAL_RCC_ClockConfig+0xf6>
 8001fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d102      	bne.n	8002006 <HAL_RCC_ClockConfig+0xa6>
 8002000:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	e00f      	b.n	8002026 <HAL_RCC_ClockConfig+0xc6>
 8002006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	663b      	str	r3, [r7, #96]	; 0x60
 800201a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800202a:	65ba      	str	r2, [r7, #88]	; 0x58
 800202c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800202e:	fa92 f2a2 	rbit	r2, r2
 8002032:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d17b      	bne.n	800214a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0f3      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d13c      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x178>
 800205e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002062:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_RCC_ClockConfig+0x128>
 8002082:	4b4f      	ldr	r3, [pc, #316]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e00f      	b.n	80020a8 <HAL_RCC_ClockConfig+0x148>
 8002088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	647b      	str	r3, [r7, #68]	; 0x44
 8002096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209a:	643b      	str	r3, [r7, #64]	; 0x40
 800209c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a4:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80020ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020b0:	fa92 f2a2 	rbit	r2, r2
 80020b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f002 021f 	and.w	r2, r2, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d13a      	bne.n	800214a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b2      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
 80020d8:	2302      	movs	r3, #2
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_ClockConfig+0x1a0>
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e00d      	b.n	800211c <HAL_RCC_ClockConfig+0x1bc>
 8002100:	2302      	movs	r3, #2
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	2302      	movs	r3, #2
 800210e:	623b      	str	r3, [r7, #32]
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	2202      	movs	r2, #2
 800211e:	61ba      	str	r2, [r7, #24]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	fa92 f2a2 	rbit	r2, r2
 8002126:	617a      	str	r2, [r7, #20]
  return result;
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	fab2 f282 	clz	r2, r2
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f042 0220 	orr.w	r2, r2, #32
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f002 021f 	and.w	r2, r2, #31
 800213a:	2101      	movs	r1, #1
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e079      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	491a      	ldr	r1, [pc, #104]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7fe fcae 	bl	8000abc <HAL_GetTick>
 8002160:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7fe fcaa 	bl	8000abc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e061      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 020c 	and.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	429a      	cmp	r2, r3
 800218a:	d1eb      	bne.n	8002164 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d214      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4906      	ldr	r1, [pc, #24]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e040      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
 80021bc:	40022000 	.word	0x40022000
 80021c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	491a      	ldr	r1, [pc, #104]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4912      	ldr	r1, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002202:	f000 f829 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002206:	4601      	mov	r1, r0
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002210:	22f0      	movs	r2, #240	; 0xf0
 8002212:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	fa92 f2a2 	rbit	r2, r2
 800221a:	60fa      	str	r2, [r7, #12]
  return result;
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	fab2 f282 	clz	r2, r2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	40d3      	lsrs	r3, r2
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x2ec>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	fa21 f303 	lsr.w	r3, r1, r3
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_RCC_ClockConfig+0x2f0>)
 8002230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_RCC_ClockConfig+0x2f4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f9ca 	bl	80005d0 <HAL_InitTick>
  
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3778      	adds	r7, #120	; 0x78
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	08005fb0 	.word	0x08005fb0
 8002250:	20000000 	.word	0x20000000
 8002254:	20000004 	.word	0x20000004

08002258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b08b      	sub	sp, #44	; 0x2c
 800225c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x30>
 8002282:	2b08      	cmp	r3, #8
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x36>
 8002286:	e03c      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_GetSysClockFreq+0xc4>)
 800228a:	623b      	str	r3, [r7, #32]
      break;
 800228c:	e03c      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002294:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002298:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	fa92 f2a2 	rbit	r2, r2
 80022a0:	607a      	str	r2, [r7, #4]
  return result;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	fab2 f282 	clz	r2, r2
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	40d3      	lsrs	r3, r2
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	220f      	movs	r2, #15
 80022bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	fa92 f2a2 	rbit	r2, r2
 80022c4:	60fa      	str	r2, [r7, #12]
  return result;
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	40d3      	lsrs	r3, r2
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e004      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	623b      	str	r3, [r7, #32]
      break;
 8002300:	e002      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002304:	623b      	str	r3, [r7, #32]
      break;
 8002306:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002308:	6a3b      	ldr	r3, [r7, #32]
}
 800230a:	4618      	mov	r0, r3
 800230c:	372c      	adds	r7, #44	; 0x2c
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	007a1200 	.word	0x007a1200
 8002320:	08005fc8 	.word	0x08005fc8
 8002324:	08005fd8 	.word	0x08005fd8
 8002328:	003d0900 	.word	0x003d0900

0800232c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_GetHCLKFreq+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000000 	.word	0x20000000

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800234a:	f7ff ffef 	bl	800232c <HAL_RCC_GetHCLKFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002358:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800235c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	fa92 f2a2 	rbit	r2, r2
 8002364:	603a      	str	r2, [r7, #0]
  return result;
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	fab2 f282 	clz	r2, r2
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	40d3      	lsrs	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	08005fc0 	.word	0x08005fc0

08002388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800238e:	f7ff ffcd 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002392:	4601      	mov	r1, r0
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800239c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	fa92 f2a2 	rbit	r2, r2
 80023a8:	603a      	str	r2, [r7, #0]
  return result;
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	fab2 f282 	clz	r2, r2
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	40d3      	lsrs	r3, r2
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08005fc0 	.word	0x08005fc0

080023cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	220f      	movs	r2, #15
 80023da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_RCC_GetClockConfig+0x60>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	601a      	str	r2, [r3, #0]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	40022000 	.word	0x40022000

08002430 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e09d      	b.n	800257e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002452:	d009      	beq.n	8002468 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
 800245a:	e005      	b.n	8002468 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe f800 	bl	8000488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024a8:	d902      	bls.n	80024b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	e002      	b.n	80024b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80024be:	d007      	beq.n	80024d0 <HAL_SPI_Init+0xa0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024c8:	d002      	beq.n	80024d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	ea42 0103 	orr.w	r1, r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	f003 0204 	and.w	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800254c:	ea42 0103 	orr.w	r1, r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e01a      	b.n	80025ce <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7fd ffad 	bl	8000510 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b088      	sub	sp, #32
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_SPI_Transmit+0x22>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e158      	b.n	80028aa <HAL_SPI_Transmit+0x2d4>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002600:	f7fe fa5c 	bl	8000abc <HAL_GetTick>
 8002604:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d002      	beq.n	800261c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002616:	2302      	movs	r3, #2
 8002618:	77fb      	strb	r3, [r7, #31]
    goto error;
 800261a:	e13d      	b.n	8002898 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_SPI_Transmit+0x52>
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800262c:	e134      	b.n	8002898 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2203      	movs	r2, #3
 8002632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002678:	d10f      	bne.n	800269a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d007      	beq.n	80026b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026c0:	d94b      	bls.n	800275a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_SPI_Transmit+0xfa>
 80026ca:	8afb      	ldrh	r3, [r7, #22]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d13e      	bne.n	800274e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026f4:	e02b      	b.n	800274e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d112      	bne.n	800272a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	1c9a      	adds	r2, r3, #2
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002728:	e011      	b.n	800274e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800272a:	f7fe f9c7 	bl	8000abc <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d803      	bhi.n	8002742 <HAL_SPI_Transmit+0x16c>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002740:	d102      	bne.n	8002748 <HAL_SPI_Transmit+0x172>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800274c:	e0a4      	b.n	8002898 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ce      	bne.n	80026f6 <HAL_SPI_Transmit+0x120>
 8002758:	e07c      	b.n	8002854 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_SPI_Transmit+0x192>
 8002762:	8afb      	ldrh	r3, [r7, #22]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d170      	bne.n	800284a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d912      	bls.n	8002798 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	881a      	ldrh	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	1c9a      	adds	r2, r3, #2
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b02      	subs	r3, #2
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002796:	e058      	b.n	800284a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	7812      	ldrb	r2, [r2, #0]
 80027a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80027be:	e044      	b.n	800284a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d12b      	bne.n	8002826 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d912      	bls.n	80027fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	1c9a      	adds	r2, r3, #2
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b02      	subs	r3, #2
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027fc:	e025      	b.n	800284a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002824:	e011      	b.n	800284a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002826:	f7fe f949 	bl	8000abc <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d803      	bhi.n	800283e <HAL_SPI_Transmit+0x268>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800283c:	d102      	bne.n	8002844 <HAL_SPI_Transmit+0x26e>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002848:	e026      	b.n	8002898 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1b5      	bne.n	80027c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	6839      	ldr	r1, [r7, #0]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f941 	bl	8002ae0 <SPI_EndRxTxTransaction>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]
 8002894:	e000      	b.n	8002898 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002896:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80028a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028c4:	f7fe f8fa 	bl	8000abc <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028d4:	f7fe f8f2 	bl	8000abc <HAL_GetTick>
 80028d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	0d1b      	lsrs	r3, r3, #20
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	fb02 f303 	mul.w	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ea:	e054      	b.n	8002996 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f2:	d050      	beq.n	8002996 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028f4:	f7fe f8e2 	bl	8000abc <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	429a      	cmp	r2, r3
 8002902:	d902      	bls.n	800290a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d13d      	bne.n	8002986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002922:	d111      	bne.n	8002948 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292c:	d004      	beq.n	8002938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002936:	d107      	bne.n	8002948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002950:	d10f      	bne.n	8002972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e017      	b.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3b01      	subs	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d19b      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000

080029c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80029d2:	f7fe f873 	bl	8000abc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029e2:	f7fe f86b 	bl	8000abc <HAL_GetTick>
 80029e6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80029e8:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <SPI_WaitFifoStateUntilTimeout+0x118>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00da      	lsls	r2, r3, #3
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	0d1b      	lsrs	r3, r3, #20
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a00:	e05f      	b.n	8002ac2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a08:	d106      	bne.n	8002a18 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a1e:	d050      	beq.n	8002ac2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a20:	f7fe f84c 	bl	8000abc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d902      	bls.n	8002a36 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d13d      	bne.n	8002ab2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4e:	d111      	bne.n	8002a74 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a58:	d004      	beq.n	8002a64 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d107      	bne.n	8002a74 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7c:	d10f      	bne.n	8002a9e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e010      	b.n	8002ad4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d197      	bne.n	8002a02 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3720      	adds	r7, #32
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000000 	.word	0x20000000

08002ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff ff63 	bl	80029c4 <SPI_WaitFifoStateUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e027      	b.n	8002b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff fec8 	bl	80028b4 <SPI_WaitFlagStateUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e014      	b.n	8002b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff ff3c 	bl	80029c4 <SPI_WaitFifoStateUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	f043 0220 	orr.w	r2, r3, #32
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e000      	b.n	8002b64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e049      	b.n	8002c12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f841 	bl	8002c1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f000 f9dc 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d001      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e03b      	b.n	8002cc0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <HAL_TIM_Base_Start_IT+0x9c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_TIM_Base_Start_IT+0x4e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c72:	d004      	beq.n	8002c7e <HAL_TIM_Base_Start_IT+0x4e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d115      	bne.n	8002caa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b06      	cmp	r3, #6
 8002c8e:	d015      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x8c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c96:	d011      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	e008      	b.n	8002cbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e000      	b.n	8002cbe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	40014000 	.word	0x40014000
 8002cd4:	00010007 	.word	0x00010007

08002cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0202 	mvn.w	r2, #2
 8002d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f905 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f8f7 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f908 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0204 	mvn.w	r2, #4
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8db 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8cd 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f8de 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d122      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d11b      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0208 	mvn.w	r2, #8
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2204      	movs	r2, #4
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8b1 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8a3 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f8b4 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d122      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d11b      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0210 	mvn.w	r2, #16
 8002e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2208      	movs	r2, #8
 8002e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f887 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f879 	bl	8002f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f88a 	bl	8002f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10e      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0201 	mvn.w	r2, #1
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fad8 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e66:	2b80      	cmp	r3, #128	; 0x80
 8002e68:	d10e      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	2b80      	cmp	r3, #128	; 0x80
 8002e76:	d107      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8e8 	bl	8003058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e96:	d10e      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d107      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f8db 	bl	800306c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d10e      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d107      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f838 	bl	8002f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d10e      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d107      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f06f 0220 	mvn.w	r2, #32
 8002f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f89b 	bl	8003044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <TIM_Base_SetConfig+0xcc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <TIM_Base_SetConfig+0x20>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d108      	bne.n	8002f9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a25      	ldr	r2, [pc, #148]	; (8003034 <TIM_Base_SetConfig+0xcc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00f      	beq.n	8002fc2 <TIM_Base_SetConfig+0x5a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d00b      	beq.n	8002fc2 <TIM_Base_SetConfig+0x5a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a22      	ldr	r2, [pc, #136]	; (8003038 <TIM_Base_SetConfig+0xd0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <TIM_Base_SetConfig+0x5a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a21      	ldr	r2, [pc, #132]	; (800303c <TIM_Base_SetConfig+0xd4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_Base_SetConfig+0x5a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <TIM_Base_SetConfig+0xd8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <TIM_Base_SetConfig+0xcc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <TIM_Base_SetConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a0d      	ldr	r2, [pc, #52]	; (8003038 <TIM_Base_SetConfig+0xd0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0xb0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <TIM_Base_SetConfig+0xd4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0xb0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <TIM_Base_SetConfig+0xd8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d103      	bne.n	8003020 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	615a      	str	r2, [r3, #20]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40014000 	.word	0x40014000
 800303c:	40014400 	.word	0x40014400
 8003040:	40014800 	.word	0x40014800

08003044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e040      	b.n	8003114 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fa52 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	; 0x24
 80030ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f82c 	bl	800311c <UART_SetConfig>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e022      	b.n	8003114 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f958 	bl	800338c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f9df 	bl	80034d0 <UART_CheckIdleState>
 8003112:	4603      	mov	r3, r0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <UART_SetConfig+0x258>)
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	6979      	ldr	r1, [r7, #20]
 8003150:	430b      	orrs	r3, r1
 8003152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a79      	ldr	r2, [pc, #484]	; (8003378 <UART_SetConfig+0x25c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d121      	bne.n	80031dc <UART_SetConfig+0xc0>
 8003198:	4b78      	ldr	r3, [pc, #480]	; (800337c <UART_SetConfig+0x260>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d817      	bhi.n	80031d4 <UART_SetConfig+0xb8>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <UART_SetConfig+0x90>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031bd 	.word	0x080031bd
 80031b0:	080031c9 	.word	0x080031c9
 80031b4:	080031cf 	.word	0x080031cf
 80031b8:	080031c3 	.word	0x080031c3
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e01e      	b.n	8003200 <UART_SetConfig+0xe4>
 80031c2:	2302      	movs	r3, #2
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e01b      	b.n	8003200 <UART_SetConfig+0xe4>
 80031c8:	2304      	movs	r3, #4
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e018      	b.n	8003200 <UART_SetConfig+0xe4>
 80031ce:	2308      	movs	r3, #8
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e015      	b.n	8003200 <UART_SetConfig+0xe4>
 80031d4:	2310      	movs	r3, #16
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	bf00      	nop
 80031da:	e011      	b.n	8003200 <UART_SetConfig+0xe4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a67      	ldr	r2, [pc, #412]	; (8003380 <UART_SetConfig+0x264>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d102      	bne.n	80031ec <UART_SetConfig+0xd0>
 80031e6:	2300      	movs	r3, #0
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e009      	b.n	8003200 <UART_SetConfig+0xe4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a64      	ldr	r2, [pc, #400]	; (8003384 <UART_SetConfig+0x268>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d102      	bne.n	80031fc <UART_SetConfig+0xe0>
 80031f6:	2300      	movs	r3, #0
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e001      	b.n	8003200 <UART_SetConfig+0xe4>
 80031fc:	2310      	movs	r3, #16
 80031fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003208:	d15c      	bne.n	80032c4 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800320a:	7ffb      	ldrb	r3, [r7, #31]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d828      	bhi.n	8003262 <UART_SetConfig+0x146>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <UART_SetConfig+0xfc>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800323d 	.word	0x0800323d
 800321c:	08003245 	.word	0x08003245
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003263 	.word	0x08003263
 8003228:	08003253 	.word	0x08003253
 800322c:	08003263 	.word	0x08003263
 8003230:	08003263 	.word	0x08003263
 8003234:	08003263 	.word	0x08003263
 8003238:	0800325b 	.word	0x0800325b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800323c:	f7ff f882 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003240:	61b8      	str	r0, [r7, #24]
        break;
 8003242:	e013      	b.n	800326c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003244:	f7ff f8a0 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 8003248:	61b8      	str	r0, [r7, #24]
        break;
 800324a:	e00f      	b.n	800326c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800324c:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <UART_SetConfig+0x26c>)
 800324e:	61bb      	str	r3, [r7, #24]
        break;
 8003250:	e00c      	b.n	800326c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003252:	f7ff f801 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8003256:	61b8      	str	r0, [r7, #24]
        break;
 8003258:	e008      	b.n	800326c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325e:	61bb      	str	r3, [r7, #24]
        break;
 8003260:	e004      	b.n	800326c <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	77bb      	strb	r3, [r7, #30]
        break;
 800326a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d074      	beq.n	800335c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	005a      	lsls	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	b29b      	uxth	r3, r3
 8003288:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d916      	bls.n	80032be <UART_SetConfig+0x1a2>
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003296:	d212      	bcs.n	80032be <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f023 030f 	bic.w	r3, r3, #15
 80032a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	89fb      	ldrh	r3, [r7, #14]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	89fa      	ldrh	r2, [r7, #14]
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	e04e      	b.n	800335c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	77bb      	strb	r3, [r7, #30]
 80032c2:	e04b      	b.n	800335c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d827      	bhi.n	800331a <UART_SetConfig+0x1fe>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x1b4>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7ff f826 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 80032f8:	61b8      	str	r0, [r7, #24]
        break;
 80032fa:	e013      	b.n	8003324 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7ff f844 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 8003300:	61b8      	str	r0, [r7, #24]
        break;
 8003302:	e00f      	b.n	8003324 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <UART_SetConfig+0x26c>)
 8003306:	61bb      	str	r3, [r7, #24]
        break;
 8003308:	e00c      	b.n	8003324 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7fe ffa5 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 800330e:	61b8      	str	r0, [r7, #24]
        break;
 8003310:	e008      	b.n	8003324 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	61bb      	str	r3, [r7, #24]
        break;
 8003318:	e004      	b.n	8003324 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	77bb      	strb	r3, [r7, #30]
        break;
 8003322:	bf00      	nop
    }

    if (pclk != 0U)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d018      	beq.n	800335c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	085a      	lsrs	r2, r3, #1
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	441a      	add	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	b29b      	uxth	r3, r3
 800333e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b0f      	cmp	r3, #15
 8003344:	d908      	bls.n	8003358 <UART_SetConfig+0x23c>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d204      	bcs.n	8003358 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e001      	b.n	800335c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003368:	7fbb      	ldrb	r3, [r7, #30]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	efff69f3 	.word	0xefff69f3
 8003378:	40013800 	.word	0x40013800
 800337c:	40021000 	.word	0x40021000
 8003380:	40004400 	.word	0x40004400
 8003384:	40004800 	.word	0x40004800
 8003388:	007a1200 	.word	0x007a1200

0800338c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01a      	beq.n	80034a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348a:	d10a      	bne.n	80034a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034e0:	f7fd faec 	bl	8000abc <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d10e      	bne.n	8003512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f82d 	bl	8003562 <UART_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e023      	b.n	800355a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d10e      	bne.n	800353e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f817 	bl	8003562 <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e00d      	b.n	800355a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	e05e      	b.n	8003632 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357a:	d05a      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357c:	f7fd fa9e 	bl	8000abc <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	429a      	cmp	r2, r3
 800358a:	d302      	bcc.n	8003592 <UART_WaitOnFlagUntilTimeout+0x30>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11b      	bne.n	80035ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e043      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02c      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e6:	d124      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003600:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e00f      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4013      	ands	r3, r2
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	429a      	cmp	r2, r3
 800364e:	d091      	beq.n	8003574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a07      	ldr	r2, [pc, #28]	; (8003688 <vApplicationGetIdleTaskMemory+0x2c>)
 800366c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4a06      	ldr	r2, [pc, #24]	; (800368c <vApplicationGetIdleTaskMemory+0x30>)
 8003672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000034 	.word	0x20000034
 800368c:	20000090 	.word	0x20000090

08003690 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a07      	ldr	r2, [pc, #28]	; (80036bc <vApplicationGetTimerTaskMemory+0x2c>)
 80036a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <vApplicationGetTimerTaskMemory+0x30>)
 80036a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	20000290 	.word	0x20000290
 80036c0:	200002ec 	.word	0x200002ec

080036c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f103 0208 	add.w	r2, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f103 0208 	add.w	r2, r3, #8
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f103 0208 	add.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	601a      	str	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377c:	d103      	bne.n	8003786 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e00c      	b.n	80037a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3308      	adds	r3, #8
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e002      	b.n	8003794 <vListInsert+0x2e>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	429a      	cmp	r2, r3
 800379e:	d2f6      	bcs.n	800378e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6852      	ldr	r2, [r2, #4]
 80037f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d103      	bne.n	800380c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1e5a      	subs	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	e7fe      	b.n	8003852 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003854:	f002 f862 	bl	800591c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	441a      	add	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	3b01      	subs	r3, #1
 8003886:	68f9      	ldr	r1, [r7, #12]
 8003888:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	441a      	add	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	22ff      	movs	r2, #255	; 0xff
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d114      	bne.n	80038d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01a      	beq.n	80038e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3310      	adds	r3, #16
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 f962 	bl	8004b80 <xTaskRemoveFromEventList>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d012      	beq.n	80038e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <xQueueGenericReset+0xcc>)
 80038c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	e009      	b.n	80038e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3310      	adds	r3, #16
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fef3 	bl	80036c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3324      	adds	r3, #36	; 0x24
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff feee 	bl	80036c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038e8:	f002 f846 	bl	8005978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038ec:	2301      	movs	r3, #1
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08e      	sub	sp, #56	; 0x38
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <xQueueGenericCreateStatic+0x28>
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
 8003922:	e7fe      	b.n	8003922 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <xQueueGenericCreateStatic+0x42>
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
 800393c:	e7fe      	b.n	800393c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <xQueueGenericCreateStatic+0x4e>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <xQueueGenericCreateStatic+0x52>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <xQueueGenericCreateStatic+0x54>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <xQueueGenericCreateStatic+0x6c>
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	e7fe      	b.n	8003966 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <xQueueGenericCreateStatic+0x78>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <xQueueGenericCreateStatic+0x7c>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <xQueueGenericCreateStatic+0x7e>
 8003978:	2300      	movs	r3, #0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <xQueueGenericCreateStatic+0x96>
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	e7fe      	b.n	8003990 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003992:	2350      	movs	r3, #80	; 0x50
 8003994:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b50      	cmp	r3, #80	; 0x50
 800399a:	d009      	beq.n	80039b0 <xQueueGenericCreateStatic+0xb4>
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	e7fe      	b.n	80039ae <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f842 	bl	8003a5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039d8:	4618      	mov	r0, r3
 80039da:	3730      	adds	r7, #48	; 0x30
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <xQueueGenericCreate+0x28>
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e7fe      	b.n	8003a06 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	e004      	b.n	8003a1e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3350      	adds	r3, #80	; 0x50
 8003a22:	4618      	mov	r0, r3
 8003a24:	f002 f894 	bl	8005b50 <pvPortMalloc>
 8003a28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00f      	beq.n	8003a50 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	3350      	adds	r3, #80	; 0x50
 8003a34:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a3e:	79fa      	ldrb	r2, [r7, #7]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f805 	bl	8003a5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a50:	69bb      	ldr	r3, [r7, #24]
	}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e002      	b.n	8003a7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a88:	2101      	movs	r1, #1
 8003a8a:	69b8      	ldr	r0, [r7, #24]
 8003a8c:	f7ff fece 	bl	800382c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08e      	sub	sp, #56	; 0x38
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <xQueueGenericSend+0x30>
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ace:	e7fe      	b.n	8003ace <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <xQueueGenericSend+0x3e>
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <xQueueGenericSend+0x42>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <xQueueGenericSend+0x44>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <xQueueGenericSend+0x5c>
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	e7fe      	b.n	8003afa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d103      	bne.n	8003b0a <xQueueGenericSend+0x6a>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <xQueueGenericSend+0x6e>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <xQueueGenericSend+0x70>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <xQueueGenericSend+0x88>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	e7fe      	b.n	8003b26 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b28:	f001 f9e6 	bl	8004ef8 <xTaskGetSchedulerState>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <xQueueGenericSend+0x98>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <xQueueGenericSend+0x9c>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <xQueueGenericSend+0x9e>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <xQueueGenericSend+0xb6>
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e7fe      	b.n	8003b54 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b56:	f001 fee1 	bl	800591c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <xQueueGenericSend+0xcc>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d129      	bne.n	8003bc0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b72:	f000 fa21 	bl	8003fb8 <prvCopyDataToQueue>
 8003b76:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	3324      	adds	r3, #36	; 0x24
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fffb 	bl	8004b80 <xTaskRemoveFromEventList>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b90:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <xQueueGenericSend+0x1f0>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	e00a      	b.n	8003bb8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <xQueueGenericSend+0x1f0>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bb8:	f001 fede 	bl	8005978 <vPortExitCritical>
				return pdPASS;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e063      	b.n	8003c88 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bc6:	f001 fed7 	bl	8005978 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e05c      	b.n	8003c88 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 f833 	bl	8004c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bde:	2301      	movs	r3, #1
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003be2:	f001 fec9 	bl	8005978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003be6:	f000 fda9 	bl	800473c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bea:	f001 fe97 	bl	800591c <vPortEnterCritical>
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf4:	b25b      	sxtb	r3, r3
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfa:	d103      	bne.n	8003c04 <xQueueGenericSend+0x164>
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c10:	d103      	bne.n	8003c1a <xQueueGenericSend+0x17a>
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1a:	f001 fead 	bl	8005978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c1e:	1d3a      	adds	r2, r7, #4
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f822 	bl	8004c70 <xTaskCheckForTimeOut>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d124      	bne.n	8003c7c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c34:	f000 fab8 	bl	80041a8 <prvIsQueueFull>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d018      	beq.n	8003c70 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	3310      	adds	r3, #16
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 ff4c 	bl	8004ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4e:	f000 fa43 	bl	80040d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c52:	f000 fd81 	bl	8004758 <xTaskResumeAll>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f47f af7c 	bne.w	8003b56 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <xQueueGenericSend+0x1f0>)
 8003c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	e772      	b.n	8003b56 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c72:	f000 fa31 	bl	80040d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c76:	f000 fd6f 	bl	8004758 <xTaskResumeAll>
 8003c7a:	e76c      	b.n	8003b56 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c7e:	f000 fa2b 	bl	80040d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c82:	f000 fd69 	bl	8004758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c86:	2300      	movs	r3, #0
		}
	}
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3738      	adds	r7, #56	; 0x38
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	e000ed04 	.word	0xe000ed04

08003c94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08e      	sub	sp, #56	; 0x38
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <xQueueGenericSendFromISR+0x2c>
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	e7fe      	b.n	8003cbe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <xQueueGenericSendFromISR+0x3a>
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <xQueueGenericSendFromISR+0x3e>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <xQueueGenericSendFromISR+0x40>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <xQueueGenericSendFromISR+0x58>
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	e7fe      	b.n	8003cea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <xQueueGenericSendFromISR+0x66>
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <xQueueGenericSendFromISR+0x6a>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <xQueueGenericSendFromISR+0x6c>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <xQueueGenericSendFromISR+0x84>
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e7fe      	b.n	8003d16 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d18:	f001 fedc 	bl	8005ad4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d1c:	f3ef 8211 	mrs	r2, BASEPRI
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	61ba      	str	r2, [r7, #24]
 8003d32:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d34:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <xQueueGenericSendFromISR+0xb6>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d12c      	bne.n	8003da4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d5a:	f000 f92d 	bl	8003fb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d5e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d66:	d112      	bne.n	8003d8e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d016      	beq.n	8003d9e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	3324      	adds	r3, #36	; 0x24
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 ff03 	bl	8004b80 <xTaskRemoveFromEventList>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e007      	b.n	8003d9e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d92:	3301      	adds	r3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	b25a      	sxtb	r2, r3
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003da2:	e001      	b.n	8003da8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3738      	adds	r7, #56	; 0x38
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08c      	sub	sp, #48	; 0x30
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <xQueueReceive+0x2e>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	e7fe      	b.n	8003de8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <xQueueReceive+0x3c>
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <xQueueReceive+0x40>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <xQueueReceive+0x42>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <xQueueReceive+0x5a>
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	e7fe      	b.n	8003e14 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e16:	f001 f86f 	bl	8004ef8 <xTaskGetSchedulerState>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <xQueueReceive+0x6a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <xQueueReceive+0x6e>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <xQueueReceive+0x70>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <xQueueReceive+0x88>
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	e7fe      	b.n	8003e42 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e44:	f001 fd6a 	bl	800591c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01f      	beq.n	8003e94 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e58:	f000 f918 	bl	800408c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	1e5a      	subs	r2, r3, #1
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00f      	beq.n	8003e8c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	3310      	adds	r3, #16
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fe85 	bl	8004b80 <xTaskRemoveFromEventList>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e7c:	4b3c      	ldr	r3, [pc, #240]	; (8003f70 <xQueueReceive+0x1b4>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e8c:	f001 fd74 	bl	8005978 <vPortExitCritical>
				return pdPASS;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e069      	b.n	8003f68 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e9a:	f001 fd6d 	bl	8005978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e062      	b.n	8003f68 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ea8:	f107 0310 	add.w	r3, r7, #16
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fec9 	bl	8004c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eb6:	f001 fd5f 	bl	8005978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eba:	f000 fc3f 	bl	800473c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ebe:	f001 fd2d 	bl	800591c <vPortEnterCritical>
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ec8:	b25b      	sxtb	r3, r3
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ece:	d103      	bne.n	8003ed8 <xQueueReceive+0x11c>
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ede:	b25b      	sxtb	r3, r3
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee4:	d103      	bne.n	8003eee <xQueueReceive+0x132>
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eee:	f001 fd43 	bl	8005978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ef2:	1d3a      	adds	r2, r7, #4
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 feb8 	bl	8004c70 <xTaskCheckForTimeOut>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d123      	bne.n	8003f4e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f08:	f000 f938 	bl	800417c <prvIsQueueEmpty>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d017      	beq.n	8003f42 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	3324      	adds	r3, #36	; 0x24
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fde2 	bl	8004ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f22:	f000 f8d9 	bl	80040d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f26:	f000 fc17 	bl	8004758 <xTaskResumeAll>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d189      	bne.n	8003e44 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <xQueueReceive+0x1b4>)
 8003f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	e780      	b.n	8003e44 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f44:	f000 f8c8 	bl	80040d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f48:	f000 fc06 	bl	8004758 <xTaskResumeAll>
 8003f4c:	e77a      	b.n	8003e44 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f000 f8c2 	bl	80040d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f54:	f000 fc00 	bl	8004758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f5a:	f000 f90f 	bl	800417c <prvIsQueueEmpty>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f43f af6f 	beq.w	8003e44 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3730      	adds	r7, #48	; 0x30
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <vQueueDelete+0x26>
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	e7fe      	b.n	8003f98 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f944 	bl	8004228 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f001 fe92 	bl	8005cd4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d14d      	bne.n	800407a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 ffa6 	bl	8004f34 <xTaskPriorityDisinherit>
 8003fe8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	e043      	b.n	800407a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d119      	bne.n	800402c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6898      	ldr	r0, [r3, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	461a      	mov	r2, r3
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	f001 ff9e 	bl	8005f44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	441a      	add	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d32b      	bcc.n	800407a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	e026      	b.n	800407a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68d8      	ldr	r0, [r3, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	461a      	mov	r2, r3
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	f001 ff84 	bl	8005f44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	425b      	negs	r3, r3
 8004046:	441a      	add	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d207      	bcs.n	8004068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	425b      	negs	r3, r3
 8004062:	441a      	add	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d105      	bne.n	800407a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	3b01      	subs	r3, #1
 8004078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004082:	697b      	ldr	r3, [r7, #20]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d018      	beq.n	80040d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	441a      	add	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d303      	bcc.n	80040c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68d9      	ldr	r1, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	461a      	mov	r2, r3
 80040ca:	6838      	ldr	r0, [r7, #0]
 80040cc:	f001 ff3a 	bl	8005f44 <memcpy>
	}
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040e0:	f001 fc1c 	bl	800591c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040ec:	e011      	b.n	8004112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d012      	beq.n	800411c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3324      	adds	r3, #36	; 0x24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fd40 	bl	8004b80 <xTaskRemoveFromEventList>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004106:	f000 fe13 	bl	8004d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	3b01      	subs	r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004116:	2b00      	cmp	r3, #0
 8004118:	dce9      	bgt.n	80040ee <prvUnlockQueue+0x16>
 800411a:	e000      	b.n	800411e <prvUnlockQueue+0x46>
					break;
 800411c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	22ff      	movs	r2, #255	; 0xff
 8004122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004126:	f001 fc27 	bl	8005978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800412a:	f001 fbf7 	bl	800591c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004136:	e011      	b.n	800415c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d012      	beq.n	8004166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3310      	adds	r3, #16
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fd1b 	bl	8004b80 <xTaskRemoveFromEventList>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004150:	f000 fdee 	bl	8004d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004154:	7bbb      	ldrb	r3, [r7, #14]
 8004156:	3b01      	subs	r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800415c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004160:	2b00      	cmp	r3, #0
 8004162:	dce9      	bgt.n	8004138 <prvUnlockQueue+0x60>
 8004164:	e000      	b.n	8004168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	22ff      	movs	r2, #255	; 0xff
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004170:	f001 fc02 	bl	8005978 <vPortExitCritical>
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004184:	f001 fbca 	bl	800591c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e001      	b.n	800419a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800419a:	f001 fbed 	bl	8005978 <vPortExitCritical>

	return xReturn;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041b0:	f001 fbb4 	bl	800591c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d102      	bne.n	80041c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e001      	b.n	80041ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ca:	f001 fbd5 	bl	8005978 <vPortExitCritical>

	return xReturn;
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e014      	b.n	8004212 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041e8:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <vQueueAddToRegistry+0x4c>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041f4:	490b      	ldr	r1, [pc, #44]	; (8004224 <vQueueAddToRegistry+0x4c>)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041fe:	4a09      	ldr	r2, [pc, #36]	; (8004224 <vQueueAddToRegistry+0x4c>)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800420a:	e005      	b.n	8004218 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b07      	cmp	r3, #7
 8004216:	d9e7      	bls.n	80041e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	20001a74 	.word	0x20001a74

08004228 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e016      	b.n	8004264 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <vQueueUnregisterQueue+0x50>)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	429a      	cmp	r2, r3
 8004244:	d10b      	bne.n	800425e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004246:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <vQueueUnregisterQueue+0x50>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2100      	movs	r1, #0
 800424c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004250:	4a09      	ldr	r2, [pc, #36]	; (8004278 <vQueueUnregisterQueue+0x50>)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
				break;
 800425c:	e005      	b.n	800426a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3301      	adds	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b07      	cmp	r3, #7
 8004268:	d9e5      	bls.n	8004236 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20001a74 	.word	0x20001a74

0800427c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800428c:	f001 fb46 	bl	800591c <vPortEnterCritical>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004296:	b25b      	sxtb	r3, r3
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800429c:	d103      	bne.n	80042a6 <vQueueWaitForMessageRestricted+0x2a>
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ac:	b25b      	sxtb	r3, r3
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b2:	d103      	bne.n	80042bc <vQueueWaitForMessageRestricted+0x40>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042bc:	f001 fb5c 	bl	8005978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d106      	bne.n	80042d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	3324      	adds	r3, #36	; 0x24
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fc2b 	bl	8004b2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7ff fefe 	bl	80040d8 <prvUnlockQueue>
	}
 80042dc:	bf00      	nop
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af04      	add	r7, sp, #16
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <xTaskCreateStatic+0x28>
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	623b      	str	r3, [r7, #32]
 800430a:	e7fe      	b.n	800430a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <xTaskCreateStatic+0x42>
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	e7fe      	b.n	8004324 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004326:	235c      	movs	r3, #92	; 0x5c
 8004328:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b5c      	cmp	r3, #92	; 0x5c
 800432e:	d009      	beq.n	8004344 <xTaskCreateStatic+0x60>
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	e7fe      	b.n	8004342 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01e      	beq.n	8004388 <xTaskCreateStatic+0xa4>
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004358:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	2202      	movs	r2, #2
 800435e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004362:	2300      	movs	r3, #0
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	9302      	str	r3, [sp, #8]
 800436a:	f107 0314 	add.w	r3, r7, #20
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f850 	bl	8004420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004382:	f000 f8d3 	bl	800452c <prvAddNewTaskToReadyList>
 8004386:	e001      	b.n	800438c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800438c:	697b      	ldr	r3, [r7, #20]
	}
 800438e:	4618      	mov	r0, r3
 8004390:	3728      	adds	r7, #40	; 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004396:	b580      	push	{r7, lr}
 8004398:	b08c      	sub	sp, #48	; 0x30
 800439a:	af04      	add	r7, sp, #16
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 fbd0 	bl	8005b50 <pvPortMalloc>
 80043b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80043b8:	205c      	movs	r0, #92	; 0x5c
 80043ba:	f001 fbc9 	bl	8005b50 <pvPortMalloc>
 80043be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
 80043cc:	e005      	b.n	80043da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043ce:	6978      	ldr	r0, [r7, #20]
 80043d0:	f001 fc80 	bl	8005cd4 <vPortFree>
 80043d4:	e001      	b.n	80043da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d017      	beq.n	8004410 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9303      	str	r3, [sp, #12]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	9302      	str	r3, [sp, #8]
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f80e 	bl	8004420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004404:	69f8      	ldr	r0, [r7, #28]
 8004406:	f000 f891 	bl	800452c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800440a:	2301      	movs	r3, #1
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e002      	b.n	8004416 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004414:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004416:	69bb      	ldr	r3, [r7, #24]
	}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	461a      	mov	r2, r3
 8004438:	21a5      	movs	r1, #165	; 0xa5
 800443a:	f001 fd8e 	bl	8005f5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004448:	3b01      	subs	r3, #1
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f023 0307 	bic.w	r3, r3, #7
 8004456:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <prvInitialiseNewTask+0x56>
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e7fe      	b.n	8004474 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e012      	b.n	80044a2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	7819      	ldrb	r1, [r3, #0]
 8004484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	3334      	adds	r3, #52	; 0x34
 800448c:	460a      	mov	r2, r1
 800448e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d006      	beq.n	80044aa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	3301      	adds	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b0f      	cmp	r3, #15
 80044a6:	d9e9      	bls.n	800447c <prvInitialiseNewTask+0x5c>
 80044a8:	e000      	b.n	80044ac <prvInitialiseNewTask+0x8c>
		{
			break;
 80044aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b37      	cmp	r3, #55	; 0x37
 80044b8:	d901      	bls.n	80044be <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044ba:	2337      	movs	r3, #55	; 0x37
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f915 	bl	8003704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	3318      	adds	r3, #24
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff f910 	bl	8003704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	2200      	movs	r2, #0
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	69b8      	ldr	r0, [r7, #24]
 800450e:	f001 f8db 	bl	80056c8 <pxPortInitialiseStack>
 8004512:	4602      	mov	r2, r0
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004524:	bf00      	nop
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004534:	f001 f9f2 	bl	800591c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <prvAddNewTaskToReadyList+0xc4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	4a2c      	ldr	r2, [pc, #176]	; (80045f0 <prvAddNewTaskToReadyList+0xc4>)
 8004540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004542:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800454a:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004550:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <prvAddNewTaskToReadyList+0xc4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d110      	bne.n	800457a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004558:	f000 fc0e 	bl	8004d78 <prvInitialiseTaskLists>
 800455c:	e00d      	b.n	800457a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <prvAddNewTaskToReadyList+0xcc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004566:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	429a      	cmp	r2, r3
 8004572:	d802      	bhi.n	800457a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004574:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <prvAddNewTaskToReadyList+0xd0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <prvAddNewTaskToReadyList+0xd0>)
 8004582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <prvAddNewTaskToReadyList+0xd0>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <prvAddNewTaskToReadyList+0xd4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d903      	bls.n	80045a0 <prvAddNewTaskToReadyList+0x74>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4a18      	ldr	r2, [pc, #96]	; (8004600 <prvAddNewTaskToReadyList+0xd4>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <prvAddNewTaskToReadyList+0xd8>)
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7ff f8b1 	bl	800371e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045bc:	f001 f9dc 	bl	8005978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <prvAddNewTaskToReadyList+0xcc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvAddNewTaskToReadyList+0xc8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d207      	bcs.n	80045e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <prvAddNewTaskToReadyList+0xdc>)
 80045d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000bc0 	.word	0x20000bc0
 80045f4:	200006ec 	.word	0x200006ec
 80045f8:	20000bcc 	.word	0x20000bcc
 80045fc:	20000bdc 	.word	0x20000bdc
 8004600:	20000bc8 	.word	0x20000bc8
 8004604:	200006f0 	.word	0x200006f0
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <vTaskDelay+0x60>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <vTaskDelay+0x2e>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	e7fe      	b.n	8004638 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800463a:	f000 f87f 	bl	800473c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800463e:	2100      	movs	r1, #0
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fce3 	bl	800500c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004646:	f000 f887 	bl	8004758 <xTaskResumeAll>
 800464a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <vTaskDelay+0x64>)
 8004654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000be8 	.word	0x20000be8
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004682:	463a      	mov	r2, r7
 8004684:	1d39      	adds	r1, r7, #4
 8004686:	f107 0308 	add.w	r3, r7, #8
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe ffe6 	bl	800365c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004690:	6839      	ldr	r1, [r7, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	9202      	str	r2, [sp, #8]
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	2300      	movs	r3, #0
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2300      	movs	r3, #0
 80046a0:	460a      	mov	r2, r1
 80046a2:	4920      	ldr	r1, [pc, #128]	; (8004724 <vTaskStartScheduler+0xb0>)
 80046a4:	4820      	ldr	r0, [pc, #128]	; (8004728 <vTaskStartScheduler+0xb4>)
 80046a6:	f7ff fe1d 	bl	80042e4 <xTaskCreateStatic>
 80046aa:	4602      	mov	r2, r0
 80046ac:	4b1f      	ldr	r3, [pc, #124]	; (800472c <vTaskStartScheduler+0xb8>)
 80046ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046b0:	4b1e      	ldr	r3, [pc, #120]	; (800472c <vTaskStartScheduler+0xb8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e001      	b.n	80046c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d102      	bne.n	80046ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046c8:	f000 fcf4 	bl	80050b4 <xTimerCreateTimerTask>
 80046cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d115      	bne.n	8004700 <vTaskStartScheduler+0x8c>
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <vTaskStartScheduler+0xbc>)
 80046e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <vTaskStartScheduler+0xc0>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80046f4:	4b10      	ldr	r3, [pc, #64]	; (8004738 <vTaskStartScheduler+0xc4>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046fa:	f001 f871 	bl	80057e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046fe:	e00d      	b.n	800471c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004706:	d109      	bne.n	800471c <vTaskStartScheduler+0xa8>
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e7fe      	b.n	800471a <vTaskStartScheduler+0xa6>
}
 800471c:	bf00      	nop
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	08005f98 	.word	0x08005f98
 8004728:	08004d49 	.word	0x08004d49
 800472c:	20000be4 	.word	0x20000be4
 8004730:	20000be0 	.word	0x20000be0
 8004734:	20000bcc 	.word	0x20000bcc
 8004738:	20000bc4 	.word	0x20000bc4

0800473c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <vTaskSuspendAll+0x18>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	4a03      	ldr	r2, [pc, #12]	; (8004754 <vTaskSuspendAll+0x18>)
 8004748:	6013      	str	r3, [r2, #0]
}
 800474a:	bf00      	nop
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	20000be8 	.word	0x20000be8

08004758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004766:	4b41      	ldr	r3, [pc, #260]	; (800486c <xTaskResumeAll+0x114>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <xTaskResumeAll+0x2a>
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	e7fe      	b.n	8004780 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004782:	f001 f8cb 	bl	800591c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004786:	4b39      	ldr	r3, [pc, #228]	; (800486c <xTaskResumeAll+0x114>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3b01      	subs	r3, #1
 800478c:	4a37      	ldr	r2, [pc, #220]	; (800486c <xTaskResumeAll+0x114>)
 800478e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004790:	4b36      	ldr	r3, [pc, #216]	; (800486c <xTaskResumeAll+0x114>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d162      	bne.n	800485e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <xTaskResumeAll+0x118>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05e      	beq.n	800485e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a0:	e02f      	b.n	8004802 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80047a2:	4b34      	ldr	r3, [pc, #208]	; (8004874 <xTaskResumeAll+0x11c>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3318      	adds	r3, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff f812 	bl	80037d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f80d 	bl	80037d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <xTaskResumeAll+0x120>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d903      	bls.n	80047d2 <xTaskResumeAll+0x7a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	4a2a      	ldr	r2, [pc, #168]	; (8004878 <xTaskResumeAll+0x120>)
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4a27      	ldr	r2, [pc, #156]	; (800487c <xTaskResumeAll+0x124>)
 80047e0:	441a      	add	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f7fe ff98 	bl	800371e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <xTaskResumeAll+0x128>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d302      	bcc.n	8004802 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80047fc:	4b21      	ldr	r3, [pc, #132]	; (8004884 <xTaskResumeAll+0x12c>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <xTaskResumeAll+0x11c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1cb      	bne.n	80047a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004810:	f000 fb4c 	bl	8004eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <xTaskResumeAll+0x130>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d010      	beq.n	8004842 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004820:	f000 f846 	bl	80048b0 <xTaskIncrementTick>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800482a:	4b16      	ldr	r3, [pc, #88]	; (8004884 <xTaskResumeAll+0x12c>)
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3b01      	subs	r3, #1
 8004834:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f1      	bne.n	8004820 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800483c:	4b12      	ldr	r3, [pc, #72]	; (8004888 <xTaskResumeAll+0x130>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <xTaskResumeAll+0x12c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800484a:	2301      	movs	r3, #1
 800484c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <xTaskResumeAll+0x134>)
 8004850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800485e:	f001 f88b 	bl	8005978 <vPortExitCritical>

	return xAlreadyYielded;
 8004862:	68bb      	ldr	r3, [r7, #8]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000be8 	.word	0x20000be8
 8004870:	20000bc0 	.word	0x20000bc0
 8004874:	20000b80 	.word	0x20000b80
 8004878:	20000bc8 	.word	0x20000bc8
 800487c:	200006f0 	.word	0x200006f0
 8004880:	200006ec 	.word	0x200006ec
 8004884:	20000bd4 	.word	0x20000bd4
 8004888:	20000bd0 	.word	0x20000bd0
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <xTaskGetTickCount+0x1c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800489c:	687b      	ldr	r3, [r7, #4]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000bc4 	.word	0x20000bc4

080048b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ba:	4b51      	ldr	r3, [pc, #324]	; (8004a00 <xTaskIncrementTick+0x150>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 808d 	bne.w	80049de <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048c4:	4b4f      	ldr	r3, [pc, #316]	; (8004a04 <xTaskIncrementTick+0x154>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048cc:	4a4d      	ldr	r2, [pc, #308]	; (8004a04 <xTaskIncrementTick+0x154>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11f      	bne.n	8004918 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80048d8:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <xTaskIncrementTick+0x158>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <xTaskIncrementTick+0x46>
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	e7fe      	b.n	80048f4 <xTaskIncrementTick+0x44>
 80048f6:	4b44      	ldr	r3, [pc, #272]	; (8004a08 <xTaskIncrementTick+0x158>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	4b43      	ldr	r3, [pc, #268]	; (8004a0c <xTaskIncrementTick+0x15c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a41      	ldr	r2, [pc, #260]	; (8004a08 <xTaskIncrementTick+0x158>)
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4a41      	ldr	r2, [pc, #260]	; (8004a0c <xTaskIncrementTick+0x15c>)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <xTaskIncrementTick+0x160>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3301      	adds	r3, #1
 8004910:	4a3f      	ldr	r2, [pc, #252]	; (8004a10 <xTaskIncrementTick+0x160>)
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	f000 faca 	bl	8004eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004918:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <xTaskIncrementTick+0x164>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	429a      	cmp	r2, r3
 8004920:	d34e      	bcc.n	80049c0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004922:	4b39      	ldr	r3, [pc, #228]	; (8004a08 <xTaskIncrementTick+0x158>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <xTaskIncrementTick+0x80>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xTaskIncrementTick+0x82>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004936:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <xTaskIncrementTick+0x164>)
 8004938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800493c:	601a      	str	r2, [r3, #0]
					break;
 800493e:	e03f      	b.n	80049c0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004940:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <xTaskIncrementTick+0x158>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d203      	bcs.n	8004960 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004958:	4a2e      	ldr	r2, [pc, #184]	; (8004a14 <xTaskIncrementTick+0x164>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
						break;
 800495e:	e02f      	b.n	80049c0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	3304      	adds	r3, #4
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe ff37 	bl	80037d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3318      	adds	r3, #24
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe ff2e 	bl	80037d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <xTaskIncrementTick+0x168>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d903      	bls.n	8004990 <xTaskIncrementTick+0xe0>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <xTaskIncrementTick+0x168>)
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <xTaskIncrementTick+0x16c>)
 800499e:	441a      	add	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fe feb9 	bl	800371e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <xTaskIncrementTick+0x170>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3b3      	bcc.n	8004922 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80049ba:	2301      	movs	r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049be:	e7b0      	b.n	8004922 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <xTaskIncrementTick+0x170>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c6:	4915      	ldr	r1, [pc, #84]	; (8004a1c <xTaskIncrementTick+0x16c>)
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d907      	bls.n	80049e8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e004      	b.n	80049e8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <xTaskIncrementTick+0x174>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4a0f      	ldr	r2, [pc, #60]	; (8004a24 <xTaskIncrementTick+0x174>)
 80049e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <xTaskIncrementTick+0x178>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80049f0:	2301      	movs	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049f4:	697b      	ldr	r3, [r7, #20]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000be8 	.word	0x20000be8
 8004a04:	20000bc4 	.word	0x20000bc4
 8004a08:	20000b78 	.word	0x20000b78
 8004a0c:	20000b7c 	.word	0x20000b7c
 8004a10:	20000bd8 	.word	0x20000bd8
 8004a14:	20000be0 	.word	0x20000be0
 8004a18:	20000bc8 	.word	0x20000bc8
 8004a1c:	200006f0 	.word	0x200006f0
 8004a20:	200006ec 	.word	0x200006ec
 8004a24:	20000bd0 	.word	0x20000bd0
 8004a28:	20000bd4 	.word	0x20000bd4

08004a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a32:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <vTaskSwitchContext+0xa4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <vTaskSwitchContext+0xa8>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a40:	e040      	b.n	8004ac4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <vTaskSwitchContext+0xa8>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a48:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <vTaskSwitchContext+0xac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e00f      	b.n	8004a70 <vTaskSwitchContext+0x44>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <vTaskSwitchContext+0x3e>
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	e7fe      	b.n	8004a68 <vTaskSwitchContext+0x3c>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	491a      	ldr	r1, [pc, #104]	; (8004adc <vTaskSwitchContext+0xb0>)
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0e5      	beq.n	8004a50 <vTaskSwitchContext+0x24>
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <vTaskSwitchContext+0xb0>)
 8004a90:	4413      	add	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d104      	bne.n	8004ab4 <vTaskSwitchContext+0x88>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	605a      	str	r2, [r3, #4]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <vTaskSwitchContext+0xb4>)
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	4a06      	ldr	r2, [pc, #24]	; (8004ad8 <vTaskSwitchContext+0xac>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000be8 	.word	0x20000be8
 8004ad4:	20000bd4 	.word	0x20000bd4
 8004ad8:	20000bc8 	.word	0x20000bc8
 8004adc:	200006f0 	.word	0x200006f0
 8004ae0:	200006ec 	.word	0x200006ec

08004ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <vTaskPlaceOnEventList+0x24>
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e7fe      	b.n	8004b06 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <vTaskPlaceOnEventList+0x44>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3318      	adds	r3, #24
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7fe fe28 	bl	8003766 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b16:	2101      	movs	r1, #1
 8004b18:	6838      	ldr	r0, [r7, #0]
 8004b1a:	f000 fa77 	bl	800500c <prvAddCurrentTaskToDelayedList>
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	200006ec 	.word	0x200006ec

08004b2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <vTaskPlaceOnEventListRestricted+0x26>
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	e7fe      	b.n	8004b50 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <vTaskPlaceOnEventListRestricted+0x50>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3318      	adds	r3, #24
 8004b58:	4619      	mov	r1, r3
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7fe fddf 	bl	800371e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	68b8      	ldr	r0, [r7, #8]
 8004b70:	f000 fa4c 	bl	800500c <prvAddCurrentTaskToDelayedList>
	}
 8004b74:	bf00      	nop
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	200006ec 	.word	0x200006ec

08004b80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <xTaskRemoveFromEventList+0x2a>
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e7fe      	b.n	8004ba8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3318      	adds	r3, #24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fe12 	bl	80037d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <xTaskRemoveFromEventList+0xac>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d11d      	bne.n	8004bf8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fe09 	bl	80037d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <xTaskRemoveFromEventList+0xb0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d903      	bls.n	8004bda <xTaskRemoveFromEventList+0x5a>
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	4a16      	ldr	r2, [pc, #88]	; (8004c30 <xTaskRemoveFromEventList+0xb0>)
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <xTaskRemoveFromEventList+0xb4>)
 8004be8:	441a      	add	r2, r3
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f7fe fd94 	bl	800371e <vListInsertEnd>
 8004bf6:	e005      	b.n	8004c04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	3318      	adds	r3, #24
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	480e      	ldr	r0, [pc, #56]	; (8004c38 <xTaskRemoveFromEventList+0xb8>)
 8004c00:	f7fe fd8d 	bl	800371e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <xTaskRemoveFromEventList+0xbc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d905      	bls.n	8004c1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c12:	2301      	movs	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <xTaskRemoveFromEventList+0xc0>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e001      	b.n	8004c22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c22:	697b      	ldr	r3, [r7, #20]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000be8 	.word	0x20000be8
 8004c30:	20000bc8 	.word	0x20000bc8
 8004c34:	200006f0 	.word	0x200006f0
 8004c38:	20000b80 	.word	0x20000b80
 8004c3c:	200006ec 	.word	0x200006ec
 8004c40:	20000bd4 	.word	0x20000bd4

08004c44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c4c:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <vTaskInternalSetTimeOutState+0x24>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <vTaskInternalSetTimeOutState+0x28>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	605a      	str	r2, [r3, #4]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	20000bd8 	.word	0x20000bd8
 8004c6c:	20000bc4 	.word	0x20000bc4

08004c70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <xTaskCheckForTimeOut+0x24>
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e7fe      	b.n	8004c92 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <xTaskCheckForTimeOut+0x3e>
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e7fe      	b.n	8004cac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004cae:	f000 fe35 	bl	800591c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <xTaskCheckForTimeOut+0xb8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cca:	d102      	bne.n	8004cd2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e023      	b.n	8004d1a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <xTaskCheckForTimeOut+0xbc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d007      	beq.n	8004cee <xTaskCheckForTimeOut+0x7e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	e015      	b.n	8004d1a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d20b      	bcs.n	8004d10 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff9d 	bl	8004c44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e004      	b.n	8004d1a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d16:	2301      	movs	r3, #1
 8004d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d1a:	f000 fe2d 	bl	8005978 <vPortExitCritical>

	return xReturn;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000bc4 	.word	0x20000bc4
 8004d2c:	20000bd8 	.word	0x20000bd8

08004d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <vTaskMissedYield+0x14>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20000bd4 	.word	0x20000bd4

08004d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d50:	f000 f852 	bl	8004df8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <prvIdleTask+0x28>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d9f9      	bls.n	8004d50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <prvIdleTask+0x2c>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d6c:	e7f0      	b.n	8004d50 <prvIdleTask+0x8>
 8004d6e:	bf00      	nop
 8004d70:	200006f0 	.word	0x200006f0
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	e00c      	b.n	8004d9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a12      	ldr	r2, [pc, #72]	; (8004dd8 <prvInitialiseTaskLists+0x60>)
 8004d90:	4413      	add	r3, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fc96 	bl	80036c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b37      	cmp	r3, #55	; 0x37
 8004da2:	d9ef      	bls.n	8004d84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004da4:	480d      	ldr	r0, [pc, #52]	; (8004ddc <prvInitialiseTaskLists+0x64>)
 8004da6:	f7fe fc8d 	bl	80036c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004daa:	480d      	ldr	r0, [pc, #52]	; (8004de0 <prvInitialiseTaskLists+0x68>)
 8004dac:	f7fe fc8a 	bl	80036c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004db0:	480c      	ldr	r0, [pc, #48]	; (8004de4 <prvInitialiseTaskLists+0x6c>)
 8004db2:	f7fe fc87 	bl	80036c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004db6:	480c      	ldr	r0, [pc, #48]	; (8004de8 <prvInitialiseTaskLists+0x70>)
 8004db8:	f7fe fc84 	bl	80036c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dbc:	480b      	ldr	r0, [pc, #44]	; (8004dec <prvInitialiseTaskLists+0x74>)
 8004dbe:	f7fe fc81 	bl	80036c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <prvInitialiseTaskLists+0x78>)
 8004dc4:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <prvInitialiseTaskLists+0x64>)
 8004dc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <prvInitialiseTaskLists+0x7c>)
 8004dca:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <prvInitialiseTaskLists+0x68>)
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	200006f0 	.word	0x200006f0
 8004ddc:	20000b50 	.word	0x20000b50
 8004de0:	20000b64 	.word	0x20000b64
 8004de4:	20000b80 	.word	0x20000b80
 8004de8:	20000b94 	.word	0x20000b94
 8004dec:	20000bac 	.word	0x20000bac
 8004df0:	20000b78 	.word	0x20000b78
 8004df4:	20000b7c 	.word	0x20000b7c

08004df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dfe:	e019      	b.n	8004e34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e00:	f000 fd8c 	bl	800591c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <prvCheckTasksWaitingTermination+0x4c>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fce1 	bl	80037d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <prvCheckTasksWaitingTermination+0x50>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <prvCheckTasksWaitingTermination+0x50>)
 8004e1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <prvCheckTasksWaitingTermination+0x54>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	4a09      	ldr	r2, [pc, #36]	; (8004e4c <prvCheckTasksWaitingTermination+0x54>)
 8004e28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e2a:	f000 fda5 	bl	8005978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f80e 	bl	8004e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <prvCheckTasksWaitingTermination+0x54>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e1      	bne.n	8004e00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000b94 	.word	0x20000b94
 8004e48:	20000bc0 	.word	0x20000bc0
 8004e4c:	20000ba8 	.word	0x20000ba8

08004e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d108      	bne.n	8004e74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 ff34 	bl	8005cd4 <vPortFree>
				vPortFree( pxTCB );
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 ff31 	bl	8005cd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e72:	e017      	b.n	8004ea4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d103      	bne.n	8004e86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 ff28 	bl	8005cd4 <vPortFree>
	}
 8004e84:	e00e      	b.n	8004ea4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d009      	beq.n	8004ea4 <prvDeleteTCB+0x54>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e7fe      	b.n	8004ea2 <prvDeleteTCB+0x52>
	}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <prvResetNextTaskUnblockTime+0x44>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <prvResetNextTaskUnblockTime+0x14>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <prvResetNextTaskUnblockTime+0x16>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <prvResetNextTaskUnblockTime+0x48>)
 8004ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ecc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ece:	e008      	b.n	8004ee2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <prvResetNextTaskUnblockTime+0x44>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4a05      	ldr	r2, [pc, #20]	; (8004ef4 <prvResetNextTaskUnblockTime+0x48>)
 8004ee0:	6013      	str	r3, [r2, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20000b78 	.word	0x20000b78
 8004ef4:	20000be0 	.word	0x20000be0

08004ef8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <xTaskGetSchedulerState+0x34>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f06:	2301      	movs	r3, #1
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	e008      	b.n	8004f1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <xTaskGetSchedulerState+0x38>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f14:	2302      	movs	r3, #2
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	e001      	b.n	8004f1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f1e:	687b      	ldr	r3, [r7, #4]
	}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000bcc 	.word	0x20000bcc
 8004f30:	20000be8 	.word	0x20000be8

08004f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d054      	beq.n	8004ff4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <xTaskPriorityDisinherit+0xcc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d009      	beq.n	8004f68 <xTaskPriorityDisinherit+0x34>
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e7fe      	b.n	8004f66 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <xTaskPriorityDisinherit+0x50>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	e7fe      	b.n	8004f82 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f88:	1e5a      	subs	r2, r3, #1
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d02c      	beq.n	8004ff4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d128      	bne.n	8004ff4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe fc16 	bl	80037d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <xTaskPriorityDisinherit+0xd0>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d903      	bls.n	8004fd4 <xTaskPriorityDisinherit+0xa0>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <xTaskPriorityDisinherit+0xd0>)
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4a09      	ldr	r2, [pc, #36]	; (8005008 <xTaskPriorityDisinherit+0xd4>)
 8004fe2:	441a      	add	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7fe fb97 	bl	800371e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ff4:	697b      	ldr	r3, [r7, #20]
	}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200006ec 	.word	0x200006ec
 8005004:	20000bc8 	.word	0x20000bc8
 8005008:	200006f0 	.word	0x200006f0

0800500c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <prvAddCurrentTaskToDelayedList+0x90>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800501c:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3304      	adds	r3, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fbd8 	bl	80037d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800502e:	d10a      	bne.n	8005046 <prvAddCurrentTaskToDelayedList+0x3a>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005036:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4819      	ldr	r0, [pc, #100]	; (80050a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005040:	f7fe fb6d 	bl	800371e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005044:	e026      	b.n	8005094 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4413      	add	r3, r2
 800504c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800504e:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	429a      	cmp	r2, r3
 800505c:	d209      	bcs.n	8005072 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f7fe fb7b 	bl	8003766 <vListInsert>
}
 8005070:	e010      	b.n	8005094 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005072:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7fe fb71 	bl	8003766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	d202      	bcs.n	8005094 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800508e:	4a08      	ldr	r2, [pc, #32]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6013      	str	r3, [r2, #0]
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000bc4 	.word	0x20000bc4
 80050a0:	200006ec 	.word	0x200006ec
 80050a4:	20000bac 	.word	0x20000bac
 80050a8:	20000b7c 	.word	0x20000b7c
 80050ac:	20000b78 	.word	0x20000b78
 80050b0:	20000be0 	.word	0x20000be0

080050b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050be:	f000 fac3 	bl	8005648 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <xTimerCreateTimerTask+0x80>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d021      	beq.n	800510e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050d2:	1d3a      	adds	r2, r7, #4
 80050d4:	f107 0108 	add.w	r1, r7, #8
 80050d8:	f107 030c 	add.w	r3, r7, #12
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe fad7 	bl	8003690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	9202      	str	r2, [sp, #8]
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	2302      	movs	r3, #2
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	460a      	mov	r2, r1
 80050f4:	4910      	ldr	r1, [pc, #64]	; (8005138 <xTimerCreateTimerTask+0x84>)
 80050f6:	4811      	ldr	r0, [pc, #68]	; (800513c <xTimerCreateTimerTask+0x88>)
 80050f8:	f7ff f8f4 	bl	80042e4 <xTaskCreateStatic>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <xTimerCreateTimerTask+0x8c>)
 8005100:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <xTimerCreateTimerTask+0x8c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800510a:	2301      	movs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <xTimerCreateTimerTask+0x74>
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	e7fe      	b.n	8005126 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005128:	697b      	ldr	r3, [r7, #20]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000c1c 	.word	0x20000c1c
 8005138:	08005fa0 	.word	0x08005fa0
 800513c:	0800525d 	.word	0x0800525d
 8005140:	20000c20 	.word	0x20000c20

08005144 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <xTimerGenericCommand+0x2c>
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	623b      	str	r3, [r7, #32]
 800516e:	e7fe      	b.n	800516e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <xTimerGenericCommand+0x94>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02a      	beq.n	80051ce <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b05      	cmp	r3, #5
 8005188:	dc18      	bgt.n	80051bc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800518a:	f7ff feb5 	bl	8004ef8 <xTaskGetSchedulerState>
 800518e:	4603      	mov	r3, r0
 8005190:	2b02      	cmp	r3, #2
 8005192:	d109      	bne.n	80051a8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <xTimerGenericCommand+0x94>)
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	f107 0110 	add.w	r1, r7, #16
 800519c:	2300      	movs	r3, #0
 800519e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a0:	f7fe fc7e 	bl	8003aa0 <xQueueGenericSend>
 80051a4:	6278      	str	r0, [r7, #36]	; 0x24
 80051a6:	e012      	b.n	80051ce <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <xTimerGenericCommand+0x94>)
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	f107 0110 	add.w	r1, r7, #16
 80051b0:	2300      	movs	r3, #0
 80051b2:	2200      	movs	r2, #0
 80051b4:	f7fe fc74 	bl	8003aa0 <xQueueGenericSend>
 80051b8:	6278      	str	r0, [r7, #36]	; 0x24
 80051ba:	e008      	b.n	80051ce <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <xTimerGenericCommand+0x94>)
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	f107 0110 	add.w	r1, r7, #16
 80051c4:	2300      	movs	r3, #0
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	f7fe fd64 	bl	8003c94 <xQueueGenericSendFromISR>
 80051cc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	; 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000c1c 	.word	0x20000c1c

080051dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <prvProcessExpiredTimer+0x7c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fe faef 	bl	80037d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d121      	bne.n	8005246 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	18d1      	adds	r1, r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f000 f8c8 	bl	80053a4 <prvInsertTimerInActiveList>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d015      	beq.n	8005246 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800521a:	2300      	movs	r3, #0
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	2300      	movs	r3, #0
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	2100      	movs	r1, #0
 8005224:	6978      	ldr	r0, [r7, #20]
 8005226:	f7ff ff8d 	bl	8005144 <xTimerGenericCommand>
 800522a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <prvProcessExpiredTimer+0x6a>
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e7fe      	b.n	8005244 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	4798      	blx	r3
}
 800524e:	bf00      	nop
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000c14 	.word	0x20000c14

0800525c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f857 	bl	800531c <prvGetNextExpireTime>
 800526e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4619      	mov	r1, r3
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f803 	bl	8005280 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800527a:	f000 f8d5 	bl	8005428 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800527e:	e7f1      	b.n	8005264 <prvTimerTask+0x8>

08005280 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800528a:	f7ff fa57 	bl	800473c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f866 	bl	8005364 <prvSampleTimeNow>
 8005298:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d130      	bne.n	8005302 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <prvProcessTimerOrBlockTask+0x3c>
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d806      	bhi.n	80052bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052ae:	f7ff fa53 	bl	8004758 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ff91 	bl	80051dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052ba:	e024      	b.n	8005306 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052c2:	4b13      	ldr	r3, [pc, #76]	; (8005310 <prvProcessTimerOrBlockTask+0x90>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052d4:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <prvProcessTimerOrBlockTask+0x94>)
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	4619      	mov	r1, r3
 80052e2:	f7fe ffcb 	bl	800427c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052e6:	f7ff fa37 	bl	8004758 <xTaskResumeAll>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <prvProcessTimerOrBlockTask+0x98>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
}
 8005300:	e001      	b.n	8005306 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005302:	f7ff fa29 	bl	8004758 <xTaskResumeAll>
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000c18 	.word	0x20000c18
 8005314:	20000c1c 	.word	0x20000c1c
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <prvGetNextExpireTime+0x44>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005342:	4b07      	ldr	r3, [pc, #28]	; (8005360 <prvGetNextExpireTime+0x44>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e001      	b.n	8005352 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005352:	68fb      	ldr	r3, [r7, #12]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	20000c14 	.word	0x20000c14

08005364 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800536c:	f7ff fa90 	bl	8004890 <xTaskGetTickCount>
 8005370:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <prvSampleTimeNow+0x3c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	429a      	cmp	r2, r3
 800537a:	d205      	bcs.n	8005388 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800537c:	f000 f904 	bl	8005588 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e002      	b.n	800538e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800538e:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <prvSampleTimeNow+0x3c>)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005394:	68fb      	ldr	r3, [r7, #12]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000c24 	.word	0x20000c24

080053a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d812      	bhi.n	80053f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e01b      	b.n	8005416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <prvInsertTimerInActiveList+0x7c>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4619      	mov	r1, r3
 80053e8:	4610      	mov	r0, r2
 80053ea:	f7fe f9bc 	bl	8003766 <vListInsert>
 80053ee:	e012      	b.n	8005416 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d206      	bcs.n	8005406 <prvInsertTimerInActiveList+0x62>
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d302      	bcc.n	8005406 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e007      	b.n	8005416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <prvInsertTimerInActiveList+0x80>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f7fe f9a8 	bl	8003766 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005416:	697b      	ldr	r3, [r7, #20]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20000c18 	.word	0x20000c18
 8005424:	20000c14 	.word	0x20000c14

08005428 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08e      	sub	sp, #56	; 0x38
 800542c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800542e:	e099      	b.n	8005564 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	da17      	bge.n	8005466 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	3304      	adds	r3, #4
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <prvProcessReceivedCommands+0x2e>
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	e7fe      	b.n	8005454 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545c:	6850      	ldr	r0, [r2, #4]
 800545e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005460:	6892      	ldr	r2, [r2, #8]
 8005462:	4611      	mov	r1, r2
 8005464:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	db7a      	blt.n	8005562 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	3304      	adds	r3, #4
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe f9ab 	bl	80037d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005482:	463b      	mov	r3, r7
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff ff6d 	bl	8005364 <prvSampleTimeNow>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b09      	cmp	r3, #9
 8005490:	d868      	bhi.n	8005564 <prvProcessReceivedCommands+0x13c>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <prvProcessReceivedCommands+0x70>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c1 	.word	0x080054c1
 80054a4:	08005565 	.word	0x08005565
 80054a8:	0800551b 	.word	0x0800551b
 80054ac:	08005551 	.word	0x08005551
 80054b0:	080054c1 	.word	0x080054c1
 80054b4:	080054c1 	.word	0x080054c1
 80054b8:	08005565 	.word	0x08005565
 80054bc:	0800551b 	.word	0x0800551b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	18d1      	adds	r1, r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ce:	f7ff ff69 	bl	80053a4 <prvInsertTimerInActiveList>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d045      	beq.n	8005564 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d13d      	bne.n	8005564 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	441a      	add	r2, r3
 80054f0:	2300      	movs	r3, #0
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	2100      	movs	r1, #0
 80054f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fa:	f7ff fe23 	bl	8005144 <xTimerGenericCommand>
 80054fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d12e      	bne.n	8005564 <prvProcessReceivedCommands+0x13c>
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e7fe      	b.n	8005518 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <prvProcessReceivedCommands+0x114>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e7fe      	b.n	800553a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	18d1      	adds	r1, r2, r3
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800554a:	f7ff ff2b 	bl	80053a4 <prvInsertTimerInActiveList>
					break;
 800554e:	e009      	b.n	8005564 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d104      	bne.n	8005564 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800555a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555c:	f000 fbba 	bl	8005cd4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005560:	e000      	b.n	8005564 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005562:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005564:	4b07      	ldr	r3, [pc, #28]	; (8005584 <prvProcessReceivedCommands+0x15c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	1d39      	adds	r1, r7, #4
 800556a:	2200      	movs	r2, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fc25 	bl	8003dbc <xQueueReceive>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f af5b 	bne.w	8005430 <prvProcessReceivedCommands+0x8>
	}
}
 800557a:	bf00      	nop
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000c1c 	.word	0x20000c1c

08005588 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800558e:	e044      	b.n	800561a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <prvSwitchTimerLists+0xb8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800559a:	4b29      	ldr	r3, [pc, #164]	; (8005640 <prvSwitchTimerLists+0xb8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3304      	adds	r3, #4
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fe f915 	bl	80037d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d12d      	bne.n	800561a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d90e      	bls.n	80055ee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055dc:	4b18      	ldr	r3, [pc, #96]	; (8005640 <prvSwitchTimerLists+0xb8>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f7fe f8bd 	bl	8003766 <vListInsert>
 80055ec:	e015      	b.n	800561a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055ee:	2300      	movs	r3, #0
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	2300      	movs	r3, #0
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	2100      	movs	r1, #0
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff fda3 	bl	8005144 <xTimerGenericCommand>
 80055fe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvSwitchTimerLists+0x92>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	e7fe      	b.n	8005618 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800561a:	4b09      	ldr	r3, [pc, #36]	; (8005640 <prvSwitchTimerLists+0xb8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1b5      	bne.n	8005590 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <prvSwitchTimerLists+0xb8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <prvSwitchTimerLists+0xbc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a04      	ldr	r2, [pc, #16]	; (8005640 <prvSwitchTimerLists+0xb8>)
 8005630:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005632:	4a04      	ldr	r2, [pc, #16]	; (8005644 <prvSwitchTimerLists+0xbc>)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	6013      	str	r3, [r2, #0]
}
 8005638:	bf00      	nop
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000c14 	.word	0x20000c14
 8005644:	20000c18 	.word	0x20000c18

08005648 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800564e:	f000 f965 	bl	800591c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005652:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <prvCheckForValidListAndQueue+0x60>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d120      	bne.n	800569c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800565a:	4814      	ldr	r0, [pc, #80]	; (80056ac <prvCheckForValidListAndQueue+0x64>)
 800565c:	f7fe f832 	bl	80036c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005660:	4813      	ldr	r0, [pc, #76]	; (80056b0 <prvCheckForValidListAndQueue+0x68>)
 8005662:	f7fe f82f 	bl	80036c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <prvCheckForValidListAndQueue+0x6c>)
 8005668:	4a10      	ldr	r2, [pc, #64]	; (80056ac <prvCheckForValidListAndQueue+0x64>)
 800566a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <prvCheckForValidListAndQueue+0x70>)
 800566e:	4a10      	ldr	r2, [pc, #64]	; (80056b0 <prvCheckForValidListAndQueue+0x68>)
 8005670:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005672:	2300      	movs	r3, #0
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	4b11      	ldr	r3, [pc, #68]	; (80056bc <prvCheckForValidListAndQueue+0x74>)
 8005678:	4a11      	ldr	r2, [pc, #68]	; (80056c0 <prvCheckForValidListAndQueue+0x78>)
 800567a:	2110      	movs	r1, #16
 800567c:	200a      	movs	r0, #10
 800567e:	f7fe f93d 	bl	80038fc <xQueueGenericCreateStatic>
 8005682:	4602      	mov	r2, r0
 8005684:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <prvCheckForValidListAndQueue+0x60>)
 8005686:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <prvCheckForValidListAndQueue+0x60>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <prvCheckForValidListAndQueue+0x60>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	490b      	ldr	r1, [pc, #44]	; (80056c4 <prvCheckForValidListAndQueue+0x7c>)
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fd9e 	bl	80041d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800569c:	f000 f96c 	bl	8005978 <vPortExitCritical>
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000c1c 	.word	0x20000c1c
 80056ac:	20000bec 	.word	0x20000bec
 80056b0:	20000c00 	.word	0x20000c00
 80056b4:	20000c14 	.word	0x20000c14
 80056b8:	20000c18 	.word	0x20000c18
 80056bc:	20000cc8 	.word	0x20000cc8
 80056c0:	20000c28 	.word	0x20000c28
 80056c4:	08005fa8 	.word	0x08005fa8

080056c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3b04      	subs	r3, #4
 80056d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3b04      	subs	r3, #4
 80056e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f023 0201 	bic.w	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3b04      	subs	r3, #4
 80056f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056f8:	4a0c      	ldr	r2, [pc, #48]	; (800572c <pxPortInitialiseStack+0x64>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3b14      	subs	r3, #20
 8005702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3b04      	subs	r3, #4
 800570e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f06f 0202 	mvn.w	r2, #2
 8005716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3b20      	subs	r3, #32
 800571c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800571e:	68fb      	ldr	r3, [r7, #12]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	08005731 	.word	0x08005731

08005730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <prvTaskExitError+0x50>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005742:	d009      	beq.n	8005758 <prvTaskExitError+0x28>
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e7fe      	b.n	8005756 <prvTaskExitError+0x26>
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800576a:	bf00      	nop
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0fc      	beq.n	800576c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	2000000c 	.word	0x2000000c
	...

08005790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <pxCurrentTCBConst2>)
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	6808      	ldr	r0, [r1, #0]
 8005796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	f380 8809 	msr	PSP, r0
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8811 	msr	BASEPRI, r0
 80057aa:	4770      	bx	lr
 80057ac:	f3af 8000 	nop.w

080057b0 <pxCurrentTCBConst2>:
 80057b0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop

080057b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057b8:	4808      	ldr	r0, [pc, #32]	; (80057dc <prvPortStartFirstTask+0x24>)
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f380 8808 	msr	MSP, r0
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f380 8814 	msr	CONTROL, r0
 80057ca:	b662      	cpsie	i
 80057cc:	b661      	cpsie	f
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	df00      	svc	0
 80057d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057da:	bf00      	nop
 80057dc:	e000ed08 	.word	0xe000ed08

080057e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057e6:	4b44      	ldr	r3, [pc, #272]	; (80058f8 <xPortStartScheduler+0x118>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a44      	ldr	r2, [pc, #272]	; (80058fc <xPortStartScheduler+0x11c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d109      	bne.n	8005804 <xPortStartScheduler+0x24>
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	e7fe      	b.n	8005802 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005804:	4b3c      	ldr	r3, [pc, #240]	; (80058f8 <xPortStartScheduler+0x118>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a3d      	ldr	r2, [pc, #244]	; (8005900 <xPortStartScheduler+0x120>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d109      	bne.n	8005822 <xPortStartScheduler+0x42>
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	e7fe      	b.n	8005820 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005822:	4b38      	ldr	r3, [pc, #224]	; (8005904 <xPortStartScheduler+0x124>)
 8005824:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	22ff      	movs	r2, #255	; 0xff
 8005832:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4b30      	ldr	r3, [pc, #192]	; (8005908 <xPortStartScheduler+0x128>)
 8005848:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800584a:	4b30      	ldr	r3, [pc, #192]	; (800590c <xPortStartScheduler+0x12c>)
 800584c:	2207      	movs	r2, #7
 800584e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005850:	e009      	b.n	8005866 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005852:	4b2e      	ldr	r3, [pc, #184]	; (800590c <xPortStartScheduler+0x12c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3b01      	subs	r3, #1
 8005858:	4a2c      	ldr	r2, [pc, #176]	; (800590c <xPortStartScheduler+0x12c>)
 800585a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	b2db      	uxtb	r3, r3
 8005864:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586e:	2b80      	cmp	r3, #128	; 0x80
 8005870:	d0ef      	beq.n	8005852 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005872:	4b26      	ldr	r3, [pc, #152]	; (800590c <xPortStartScheduler+0x12c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f1c3 0307 	rsb	r3, r3, #7
 800587a:	2b04      	cmp	r3, #4
 800587c:	d009      	beq.n	8005892 <xPortStartScheduler+0xb2>
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	60bb      	str	r3, [r7, #8]
 8005890:	e7fe      	b.n	8005890 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005892:	4b1e      	ldr	r3, [pc, #120]	; (800590c <xPortStartScheduler+0x12c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	4a1c      	ldr	r2, [pc, #112]	; (800590c <xPortStartScheduler+0x12c>)
 800589a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800589c:	4b1b      	ldr	r3, [pc, #108]	; (800590c <xPortStartScheduler+0x12c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <xPortStartScheduler+0x12c>)
 80058a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058b0:	4b17      	ldr	r3, [pc, #92]	; (8005910 <xPortStartScheduler+0x130>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a16      	ldr	r2, [pc, #88]	; (8005910 <xPortStartScheduler+0x130>)
 80058b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <xPortStartScheduler+0x130>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a13      	ldr	r2, [pc, #76]	; (8005910 <xPortStartScheduler+0x130>)
 80058c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058c8:	f000 f8d6 	bl	8005a78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <xPortStartScheduler+0x134>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058d2:	f000 f8f5 	bl	8005ac0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058d6:	4b10      	ldr	r3, [pc, #64]	; (8005918 <xPortStartScheduler+0x138>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a0f      	ldr	r2, [pc, #60]	; (8005918 <xPortStartScheduler+0x138>)
 80058dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058e2:	f7ff ff69 	bl	80057b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058e6:	f7ff f8a1 	bl	8004a2c <vTaskSwitchContext>
	prvTaskExitError();
 80058ea:	f7ff ff21 	bl	8005730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	e000ed00 	.word	0xe000ed00
 80058fc:	410fc271 	.word	0x410fc271
 8005900:	410fc270 	.word	0x410fc270
 8005904:	e000e400 	.word	0xe000e400
 8005908:	20000d18 	.word	0x20000d18
 800590c:	20000d1c 	.word	0x20000d1c
 8005910:	e000ed20 	.word	0xe000ed20
 8005914:	2000000c 	.word	0x2000000c
 8005918:	e000ef34 	.word	0xe000ef34

0800591c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <vPortEnterCritical+0x54>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3301      	adds	r3, #1
 800593a:	4a0d      	ldr	r2, [pc, #52]	; (8005970 <vPortEnterCritical+0x54>)
 800593c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <vPortEnterCritical+0x54>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10e      	bne.n	8005964 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <vPortEnterCritical+0x58>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d009      	beq.n	8005964 <vPortEnterCritical+0x48>
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	e7fe      	b.n	8005962 <vPortEnterCritical+0x46>
	}
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	2000000c 	.word	0x2000000c
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800597e:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <vPortExitCritical+0x4c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <vPortExitCritical+0x22>
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	e7fe      	b.n	8005998 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <vPortExitCritical+0x4c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3b01      	subs	r3, #1
 80059a0:	4a08      	ldr	r2, [pc, #32]	; (80059c4 <vPortExitCritical+0x4c>)
 80059a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <vPortExitCritical+0x4c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <vPortExitCritical+0x3e>
 80059ac:	2300      	movs	r3, #0
 80059ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	2000000c 	.word	0x2000000c
	...

080059d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059d0:	f3ef 8009 	mrs	r0, PSP
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <pxCurrentTCBConst>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f01e 0f10 	tst.w	lr, #16
 80059e0:	bf08      	it	eq
 80059e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	6010      	str	r0, [r2, #0]
 80059ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059f4:	f380 8811 	msr	BASEPRI, r0
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f7ff f814 	bl	8004a2c <vTaskSwitchContext>
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f380 8811 	msr	BASEPRI, r0
 8005a0c:	bc09      	pop	{r0, r3}
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	6808      	ldr	r0, [r1, #0]
 8005a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a16:	f01e 0f10 	tst.w	lr, #16
 8005a1a:	bf08      	it	eq
 8005a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a20:	f380 8809 	msr	PSP, r0
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst>:
 8005a30:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a50:	f7fe ff2e 	bl	80048b0 <xTaskIncrementTick>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <SysTick_Handler+0x3c>)
 8005a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <vPortSetupTimerInterrupt+0x34>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <vPortSetupTimerInterrupt+0x38>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <vPortSetupTimerInterrupt+0x3c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a0a      	ldr	r2, [pc, #40]	; (8005ab8 <vPortSetupTimerInterrupt+0x40>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	4a09      	ldr	r2, [pc, #36]	; (8005abc <vPortSetupTimerInterrupt+0x44>)
 8005a96:	3b01      	subs	r3, #1
 8005a98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a9a:	4b04      	ldr	r3, [pc, #16]	; (8005aac <vPortSetupTimerInterrupt+0x34>)
 8005a9c:	2207      	movs	r2, #7
 8005a9e:	601a      	str	r2, [r3, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000e010 	.word	0xe000e010
 8005ab0:	e000e018 	.word	0xe000e018
 8005ab4:	20000000 	.word	0x20000000
 8005ab8:	10624dd3 	.word	0x10624dd3
 8005abc:	e000e014 	.word	0xe000e014

08005ac0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ac0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ad0 <vPortEnableVFP+0x10>
 8005ac4:	6801      	ldr	r1, [r0, #0]
 8005ac6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005aca:	6001      	str	r1, [r0, #0]
 8005acc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ace:	bf00      	nop
 8005ad0:	e000ed88 	.word	0xe000ed88

08005ad4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ada:	f3ef 8305 	mrs	r3, IPSR
 8005ade:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b0f      	cmp	r3, #15
 8005ae4:	d913      	bls.n	8005b0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ae6:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <vPortValidateInterruptPriority+0x6c>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005af0:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <vPortValidateInterruptPriority+0x70>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	7afa      	ldrb	r2, [r7, #11]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d209      	bcs.n	8005b0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	607b      	str	r3, [r7, #4]
 8005b0c:	e7fe      	b.n	8005b0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <vPortValidateInterruptPriority+0x74>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <vPortValidateInterruptPriority+0x78>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d909      	bls.n	8005b32 <vPortValidateInterruptPriority+0x5e>
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	e7fe      	b.n	8005b30 <vPortValidateInterruptPriority+0x5c>
	}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000e3f0 	.word	0xe000e3f0
 8005b44:	20000d18 	.word	0x20000d18
 8005b48:	e000ed0c 	.word	0xe000ed0c
 8005b4c:	20000d1c 	.word	0x20000d1c

08005b50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b5c:	f7fe fdee 	bl	800473c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b60:	4b57      	ldr	r3, [pc, #348]	; (8005cc0 <pvPortMalloc+0x170>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b68:	f000 f90c 	bl	8005d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b6c:	4b55      	ldr	r3, [pc, #340]	; (8005cc4 <pvPortMalloc+0x174>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f040 808c 	bne.w	8005c92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01c      	beq.n	8005bba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005b80:	2208      	movs	r2, #8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4413      	add	r3, r2
 8005b86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d013      	beq.n	8005bba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f023 0307 	bic.w	r3, r3, #7
 8005b98:	3308      	adds	r3, #8
 8005b9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <pvPortMalloc+0x6a>
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	e7fe      	b.n	8005bb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d068      	beq.n	8005c92 <pvPortMalloc+0x142>
 8005bc0:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <pvPortMalloc+0x178>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d863      	bhi.n	8005c92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bca:	4b40      	ldr	r3, [pc, #256]	; (8005ccc <pvPortMalloc+0x17c>)
 8005bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bce:	4b3f      	ldr	r3, [pc, #252]	; (8005ccc <pvPortMalloc+0x17c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bd4:	e004      	b.n	8005be0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d903      	bls.n	8005bf2 <pvPortMalloc+0xa2>
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f1      	bne.n	8005bd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bf2:	4b33      	ldr	r3, [pc, #204]	; (8005cc0 <pvPortMalloc+0x170>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d04a      	beq.n	8005c92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	4413      	add	r3, r2
 8005c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	2308      	movs	r3, #8
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d91e      	bls.n	8005c5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <pvPortMalloc+0xf4>
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	e7fe      	b.n	8005c42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c56:	69b8      	ldr	r0, [r7, #24]
 8005c58:	f000 f8f6 	bl	8005e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <pvPortMalloc+0x178>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <pvPortMalloc+0x178>)
 8005c68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c6a:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <pvPortMalloc+0x178>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <pvPortMalloc+0x180>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d203      	bcs.n	8005c7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <pvPortMalloc+0x178>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <pvPortMalloc+0x180>)
 8005c7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <pvPortMalloc+0x174>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c92:	f7fe fd61 	bl	8004758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <pvPortMalloc+0x164>
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e7fe      	b.n	8005cb2 <pvPortMalloc+0x162>
	return pvReturn;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3728      	adds	r7, #40	; 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20001928 	.word	0x20001928
 8005cc4:	20001934 	.word	0x20001934
 8005cc8:	2000192c 	.word	0x2000192c
 8005ccc:	20001920 	.word	0x20001920
 8005cd0:	20001930 	.word	0x20001930

08005cd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d046      	beq.n	8005d74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	425b      	negs	r3, r3
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <vPortFree+0xa8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <vPortFree+0x42>
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e7fe      	b.n	8005d14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <vPortFree+0x5e>
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	e7fe      	b.n	8005d30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <vPortFree+0xa8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d019      	beq.n	8005d74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d115      	bne.n	8005d74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <vPortFree+0xa8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	401a      	ands	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d58:	f7fe fcf0 	bl	800473c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <vPortFree+0xac>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4413      	add	r3, r2
 8005d66:	4a06      	ldr	r2, [pc, #24]	; (8005d80 <vPortFree+0xac>)
 8005d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d6a:	6938      	ldr	r0, [r7, #16]
 8005d6c:	f000 f86c 	bl	8005e48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d70:	f7fe fcf2 	bl	8004758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d74:	bf00      	nop
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20001934 	.word	0x20001934
 8005d80:	2000192c 	.word	0x2000192c

08005d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <prvHeapInit+0xac>)
 8005d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00c      	beq.n	8005db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <prvHeapInit+0xac>)
 8005db4:	4413      	add	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <prvHeapInit+0xb0>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <prvHeapInit+0xb0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <prvHeapInit+0xb4>)
 8005de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <prvHeapInit+0xb4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <prvHeapInit+0xb4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvHeapInit+0xb4>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <prvHeapInit+0xb8>)
 8005e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <prvHeapInit+0xbc>)
 8005e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <prvHeapInit+0xc0>)
 8005e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000d20 	.word	0x20000d20
 8005e34:	20001920 	.word	0x20001920
 8005e38:	20001928 	.word	0x20001928
 8005e3c:	20001930 	.word	0x20001930
 8005e40:	2000192c 	.word	0x2000192c
 8005e44:	20001934 	.word	0x20001934

08005e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e50:	4b28      	ldr	r3, [pc, #160]	; (8005ef4 <prvInsertBlockIntoFreeList+0xac>)
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e002      	b.n	8005e5c <prvInsertBlockIntoFreeList+0x14>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d8f7      	bhi.n	8005e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d108      	bne.n	8005e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	441a      	add	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d118      	bne.n	8005ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d00d      	beq.n	8005ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e008      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e003      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d002      	beq.n	8005ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20001920 	.word	0x20001920
 8005ef8:	20001928 	.word	0x20001928

08005efc <__libc_init_array>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4e0d      	ldr	r6, [pc, #52]	; (8005f34 <__libc_init_array+0x38>)
 8005f00:	4c0d      	ldr	r4, [pc, #52]	; (8005f38 <__libc_init_array+0x3c>)
 8005f02:	1ba4      	subs	r4, r4, r6
 8005f04:	10a4      	asrs	r4, r4, #2
 8005f06:	2500      	movs	r5, #0
 8005f08:	42a5      	cmp	r5, r4
 8005f0a:	d109      	bne.n	8005f20 <__libc_init_array+0x24>
 8005f0c:	4e0b      	ldr	r6, [pc, #44]	; (8005f3c <__libc_init_array+0x40>)
 8005f0e:	4c0c      	ldr	r4, [pc, #48]	; (8005f40 <__libc_init_array+0x44>)
 8005f10:	f000 f82c 	bl	8005f6c <_init>
 8005f14:	1ba4      	subs	r4, r4, r6
 8005f16:	10a4      	asrs	r4, r4, #2
 8005f18:	2500      	movs	r5, #0
 8005f1a:	42a5      	cmp	r5, r4
 8005f1c:	d105      	bne.n	8005f2a <__libc_init_array+0x2e>
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f24:	4798      	blx	r3
 8005f26:	3501      	adds	r5, #1
 8005f28:	e7ee      	b.n	8005f08 <__libc_init_array+0xc>
 8005f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f2e:	4798      	blx	r3
 8005f30:	3501      	adds	r5, #1
 8005f32:	e7f2      	b.n	8005f1a <__libc_init_array+0x1e>
 8005f34:	08005fe8 	.word	0x08005fe8
 8005f38:	08005fe8 	.word	0x08005fe8
 8005f3c:	08005fe8 	.word	0x08005fe8
 8005f40:	08005fec 	.word	0x08005fec

08005f44 <memcpy>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	1e43      	subs	r3, r0, #1
 8005f48:	440a      	add	r2, r1
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	d100      	bne.n	8005f50 <memcpy+0xc>
 8005f4e:	bd10      	pop	{r4, pc}
 8005f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f58:	e7f7      	b.n	8005f4a <memcpy+0x6>

08005f5a <memset>:
 8005f5a:	4402      	add	r2, r0
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d100      	bne.n	8005f64 <memset+0xa>
 8005f62:	4770      	bx	lr
 8005f64:	f803 1b01 	strb.w	r1, [r3], #1
 8005f68:	e7f9      	b.n	8005f5e <memset+0x4>
	...

08005f6c <_init>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr

08005f78 <_fini>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr
