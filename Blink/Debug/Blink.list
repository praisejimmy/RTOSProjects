
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005700  08005700  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005700  08005700  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005700  08005700  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa0  20000010  08005718  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab0  08005718  00021ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195f7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3d  00000000  00000000  00039637  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e8  00000000  00000000  0003c378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003d860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c55  00000000  00000000  0003ec30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010de3  00000000  00000000  00041885  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0a8f  00000000  00000000  00052668  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001030f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c0  00000000  00000000  00103174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800566c 	.word	0x0800566c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800566c 	.word	0x0800566c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fabe 	bl	8000754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f81a 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8c8 	bl	8000370 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f896 	bl	8000310 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80001e4:	f000 f856 	bl	8000294 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e8:	f002 fd02 	bl	8002bf0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink */
  blinkHandle = osThreadNew(StartBlink, NULL, &blink_attributes);
 80001ec:	4a05      	ldr	r2, [pc, #20]	; (8000204 <main+0x34>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4805      	ldr	r0, [pc, #20]	; (8000208 <main+0x38>)
 80001f2:	f002 fd65 	bl	8002cc0 <osThreadNew>
 80001f6:	4602      	mov	r2, r0
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <main+0x3c>)
 80001fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001fc:	f002 fd2c 	bl	8002c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x30>
 8000202:	bf00      	nop
 8000204:	080056a4 	.word	0x080056a4
 8000208:	08000445 	.word	0x08000445
 800020c:	20001a1c 	.word	0x20001a1c

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f005 fa1b 	bl	800565a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2302      	movs	r3, #2
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000242:	2300      	movs	r3, #0
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000246:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fd3b 	bl	8000ccc <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800025c:	f000 f914 	bl	8000488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fc2e 	bl	8001adc <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000286:	f000 f8ff 	bl	8000488 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <MX_SPI3_Init+0x74>)
 800029a:	4a1c      	ldr	r2, [pc, #112]	; (800030c <MX_SPI3_Init+0x78>)
 800029c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <MX_SPI3_Init+0x74>)
 80002a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_SPI3_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_SPI3_Init+0x74>)
 80002ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_SPI3_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <MX_SPI3_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_SPI3_Init+0x74>)
 80002c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_SPI3_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_SPI3_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_SPI3_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_SPI3_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_SPI3_Init+0x74>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_SPI3_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_SPI3_Init+0x74>)
 80002ee:	2208      	movs	r2, #8
 80002f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_SPI3_Init+0x74>)
 80002f4:	f001 fe5a 	bl	8001fac <HAL_SPI_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80002fe:	f000 f8c3 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20001934 	.word	0x20001934
 800030c:	40003c00 	.word	0x40003c00

08000310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000316:	4a15      	ldr	r2, [pc, #84]	; (800036c <MX_USART2_UART_Init+0x5c>)
 8000318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_USART2_UART_Init+0x58>)
 800031c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_USART2_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_USART2_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_USART2_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_USART2_UART_Init+0x58>)
 8000354:	f002 f95e 	bl	8002614 <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800035e:	f000 f893 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20001998 	.word	0x20001998
 800036c:	40004400 	.word	0x40004400

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000386:	4b2b      	ldr	r3, [pc, #172]	; (8000434 <MX_GPIO_Init+0xc4>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a2a      	ldr	r2, [pc, #168]	; (8000434 <MX_GPIO_Init+0xc4>)
 800038c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <MX_GPIO_Init+0xc4>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a24      	ldr	r2, [pc, #144]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a1e      	ldr	r2, [pc, #120]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a18      	ldr	r2, [pc, #96]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_GPIO_Init+0xc4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|LD2_Pin, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f242 0104 	movw	r1, #8196	; 0x2004
 80003ec:	4812      	ldr	r0, [pc, #72]	; (8000438 <MX_GPIO_Init+0xc8>)
 80003ee:	f000 fc3b 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_GPIO_Init+0xcc>)
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	480e      	ldr	r0, [pc, #56]	; (8000440 <MX_GPIO_Init+0xd0>)
 8000408:	f000 fabc 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LD2_Pin;
 800040c:	f242 0304 	movw	r3, #8196	; 0x2004
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2300      	movs	r3, #0
 800041c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	4619      	mov	r1, r3
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <MX_GPIO_Init+0xc8>)
 8000426:	f000 faad 	bl	8000984 <HAL_GPIO_Init>

}
 800042a:	bf00      	nop
 800042c:	3728      	adds	r7, #40	; 0x28
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000
 8000438:	48000400 	.word	0x48000400
 800043c:	10110000 	.word	0x10110000
 8000440:	48000800 	.word	0x48000800

08000444 <StartBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800044c:	2104      	movs	r1, #4
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <StartBlink+0x1c>)
 8000450:	f000 fc22 	bl	8000c98 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000454:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000458:	f002 fcdc 	bl	8002e14 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800045c:	e7f6      	b.n	800044c <StartBlink+0x8>
 800045e:	bf00      	nop
 8000460:	48000400 	.word	0x48000400

08000464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d101      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000476:	f000 f983 	bl	8000780 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40001000 	.word	0x40001000

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048e:	e7fe      	b.n	800048e <Error_Handler+0x6>

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <HAL_MspInit+0x4c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a10      	ldr	r2, [pc, #64]	; (80004dc <HAL_MspInit+0x4c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <HAL_MspInit+0x4c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <HAL_MspInit+0x4c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <HAL_MspInit+0x4c>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_MspInit+0x4c>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	210f      	movs	r1, #15
 80004ca:	f06f 0001 	mvn.w	r0, #1
 80004ce:	f000 fa2f 	bl	8000930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <HAL_SPI_MspInit+0x7c>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d128      	bne.n	8000554 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <HAL_SPI_MspInit+0x80>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a16      	ldr	r2, [pc, #88]	; (8000560 <HAL_SPI_MspInit+0x80>)
 8000508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_SPI_MspInit+0x80>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <HAL_SPI_MspInit+0x80>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a10      	ldr	r2, [pc, #64]	; (8000560 <HAL_SPI_MspInit+0x80>)
 8000520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_SPI_MspInit+0x80>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000532:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000540:	2303      	movs	r3, #3
 8000542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000544:	2306      	movs	r3, #6
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4619      	mov	r1, r3
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <HAL_SPI_MspInit+0x84>)
 8000550:	f000 fa18 	bl	8000984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000554:	bf00      	nop
 8000556:	3728      	adds	r7, #40	; 0x28
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40003c00 	.word	0x40003c00
 8000560:	40021000 	.word	0x40021000
 8000564:	48000800 	.word	0x48000800

08000568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <HAL_UART_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d128      	bne.n	80005dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <HAL_UART_MspInit+0x80>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <HAL_UART_MspInit+0x80>)
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_UART_MspInit+0x80>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_UART_MspInit+0x80>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <HAL_UART_MspInit+0x80>)
 80005a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <HAL_UART_MspInit+0x80>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005ba:	230c      	movs	r3, #12
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ca:	2307      	movs	r3, #7
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 f9d4 	bl	8000984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40004400 	.word	0x40004400
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	2036      	movs	r0, #54	; 0x36
 8000602:	f000 f995 	bl	8000930 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000606:	2036      	movs	r0, #54	; 0x36
 8000608:	f000 f9ae 	bl	8000968 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <HAL_InitTick+0xa0>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	4a1e      	ldr	r2, [pc, #120]	; (800068c <HAL_InitTick+0xa0>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	61d3      	str	r3, [r2, #28]
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_InitTick+0xa0>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	f003 0310 	and.w	r3, r3, #16
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000624:	f107 0210 	add.w	r2, r7, #16
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4611      	mov	r1, r2
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fc8a 	bl	8001f48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000634:	f001 fc44 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8000638:	4603      	mov	r3, r0
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000640:	4a13      	ldr	r2, [pc, #76]	; (8000690 <HAL_InitTick+0xa4>)
 8000642:	fba2 2303 	umull	r2, r3, r2, r3
 8000646:	0c9b      	lsrs	r3, r3, #18
 8000648:	3b01      	subs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_InitTick+0xa8>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <HAL_InitTick+0xac>)
 8000650:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_InitTick+0xa8>)
 8000654:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000658:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_InitTick+0xa8>)
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_InitTick+0xa8>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <HAL_InitTick+0xa8>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <HAL_InitTick+0xa8>)
 800066e:	f001 fd48 	bl	8002102 <HAL_TIM_Base_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <HAL_InitTick+0xa8>)
 800067a:	f001 fda3 	bl	80021c4 <HAL_TIM_Base_Start_IT>
 800067e:	4603      	mov	r3, r0
 8000680:	e000      	b.n	8000684 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3730      	adds	r7, #48	; 0x30
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	431bde83 	.word	0x431bde83
 8000694:	20001a20 	.word	0x20001a20
 8000698:	40001000 	.word	0x40001000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler+0x4>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <UsageFault_Handler+0x4>

080006ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <TIM6_DAC_IRQHandler+0x10>)
 80006ce:	f001 fdcd 	bl	800226c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20001a20 	.word	0x20001a20

080006dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <SystemInit+0x20>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <SystemInit+0x20>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000738 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 8000706:	490e      	ldr	r1, [pc, #56]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000708:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 800071c:	4c0b      	ldr	r4, [pc, #44]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072a:	f7ff ffd7 	bl	80006dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800072e:	f004 ff65 	bl	80055fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000732:	f7ff fd4d 	bl	80001d0 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000738:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000744:	08005708 	.word	0x08005708
  ldr r2, =_sbss
 8000748:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800074c:	20001ab0 	.word	0x20001ab0

08000750 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_IRQHandler>
	...

08000754 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_Init+0x28>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_Init+0x28>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f8d8 	bl	800091a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff ff3e 	bl	80005ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000770:	f7ff fe8e 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40022000 	.word	0x40022000

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_IncTick+0x20>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_IncTick+0x24>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_IncTick+0x24>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20001a6c 	.word	0x20001a6c

080007a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <HAL_GetTick+0x14>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20001a6c 	.word	0x20001a6c

080007c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__NVIC_GetPriorityGrouping+0x18>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	f003 0307 	and.w	r3, r3, #7
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	db0b      	blt.n	800084e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f003 021f 	and.w	r2, r3, #31
 800083c:	4907      	ldr	r1, [pc, #28]	; (800085c <__NVIC_EnableIRQ+0x38>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	095b      	lsrs	r3, r3, #5
 8000844:	2001      	movs	r0, #1
 8000846:	fa00 f202 	lsl.w	r2, r0, r2
 800084a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	; (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	; (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	; 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ff4c 	bl	80007c0 <__NVIC_SetPriorityGrouping>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000942:	f7ff ff61 	bl	8000808 <__NVIC_GetPriorityGrouping>
 8000946:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	68b9      	ldr	r1, [r7, #8]
 800094c:	6978      	ldr	r0, [r7, #20]
 800094e:	f7ff ffb1 	bl	80008b4 <NVIC_EncodePriority>
 8000952:	4602      	mov	r2, r0
 8000954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff80 	bl	8000860 <__NVIC_SetPriority>
}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff54 	bl	8000824 <__NVIC_EnableIRQ>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000992:	e14e      	b.n	8000c32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 8140 	beq.w	8000c2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d00b      	beq.n	80009cc <HAL_GPIO_Init+0x48>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d007      	beq.n	80009cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c0:	2b11      	cmp	r3, #17
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b12      	cmp	r3, #18
 80009ca:	d130      	bne.n	8000a2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a02:	2201      	movs	r2, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	2203      	movs	r2, #3
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0xea>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d123      	bne.n	8000ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	08da      	lsrs	r2, r3, #3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3208      	adds	r2, #8
 8000a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	220f      	movs	r2, #15
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	f003 0307 	and.w	r3, r3, #7
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	08da      	lsrs	r2, r3, #3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3208      	adds	r2, #8
 8000ab0:	6939      	ldr	r1, [r7, #16]
 8000ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0203 	and.w	r2, r3, #3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 809a 	beq.w	8000c2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af8:	4b55      	ldr	r3, [pc, #340]	; (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a54      	ldr	r2, [pc, #336]	; (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b10:	4a50      	ldr	r2, [pc, #320]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3302      	adds	r3, #2
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	220f      	movs	r2, #15
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b3a:	d013      	beq.n	8000b64 <HAL_GPIO_Init+0x1e0>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a46      	ldr	r2, [pc, #280]	; (8000c58 <HAL_GPIO_Init+0x2d4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d00d      	beq.n	8000b60 <HAL_GPIO_Init+0x1dc>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a45      	ldr	r2, [pc, #276]	; (8000c5c <HAL_GPIO_Init+0x2d8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d007      	beq.n	8000b5c <HAL_GPIO_Init+0x1d8>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a44      	ldr	r2, [pc, #272]	; (8000c60 <HAL_GPIO_Init+0x2dc>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d101      	bne.n	8000b58 <HAL_GPIO_Init+0x1d4>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x1e2>
 8000b58:	2305      	movs	r3, #5
 8000b5a:	e004      	b.n	8000b66 <HAL_GPIO_Init+0x1e2>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x1e2>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_GPIO_Init+0x1e2>
 8000b64:	2300      	movs	r3, #0
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	f002 0203 	and.w	r2, r2, #3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b76:	4937      	ldr	r1, [pc, #220]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <HAL_GPIO_Init+0x2e0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ba8:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <HAL_GPIO_Init+0x2e0>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_GPIO_Init+0x2e0>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bd2:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <HAL_GPIO_Init+0x2e0>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_GPIO_Init+0x2e0>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_GPIO_Init+0x2e0>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_GPIO_Init+0x2e0>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_GPIO_Init+0x2e0>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f47f aea9 	bne.w	8000994 <HAL_GPIO_Init+0x10>
  }
}
 8000c42:	bf00      	nop
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	48000c00 	.word	0x48000c00
 8000c64:	40010400 	.word	0x40010400

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c84:	e002      	b.n	8000c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43d9      	mvns	r1, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	400b      	ands	r3, r1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	619a      	str	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f000 bef4 	b.w	8001ace <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 816a 	beq.w	8000fca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cf6:	4bb3      	ldr	r3, [pc, #716]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 030c 	and.w	r3, r3, #12
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d00c      	beq.n	8000d1c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d02:	4bb0      	ldr	r3, [pc, #704]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d159      	bne.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
 8000d0e:	4bad      	ldr	r3, [pc, #692]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1a:	d152      	bne.n	8000dc2 <HAL_RCC_OscConfig+0xf6>
 8000d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d28:	fa93 f3a3 	rbit	r3, r3
 8000d2c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d34:	fab3 f383 	clz	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d102      	bne.n	8000d4e <HAL_RCC_OscConfig+0x82>
 8000d48:	4b9e      	ldr	r3, [pc, #632]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	e015      	b.n	8000d7a <HAL_RCC_OscConfig+0xae>
 8000d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d5a:	fa93 f3a3 	rbit	r3, r3
 8000d5e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d6a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d76:	4b93      	ldr	r3, [pc, #588]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d86:	fa92 f2a2 	rbit	r2, r2
 8000d8a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d8e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d92:	fab2 f282 	clz	r2, r2
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	f042 0220 	orr.w	r2, r2, #32
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	f002 021f 	and.w	r2, r2, #31
 8000da2:	2101      	movs	r1, #1
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	4013      	ands	r3, r2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 810c 	beq.w	8000fc8 <HAL_RCC_OscConfig+0x2fc>
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8106 	bne.w	8000fc8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f000 be86 	b.w	8001ace <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dcc:	d106      	bne.n	8000ddc <HAL_RCC_OscConfig+0x110>
 8000dce:	4b7d      	ldr	r3, [pc, #500]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7c      	ldr	r2, [pc, #496]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e030      	b.n	8000e3e <HAL_RCC_OscConfig+0x172>
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x134>
 8000de6:	4b77      	ldr	r3, [pc, #476]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a76      	ldr	r2, [pc, #472]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b74      	ldr	r3, [pc, #464]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a73      	ldr	r2, [pc, #460]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e01e      	b.n	8000e3e <HAL_RCC_OscConfig+0x172>
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e0a:	d10c      	bne.n	8000e26 <HAL_RCC_OscConfig+0x15a>
 8000e0c:	4b6d      	ldr	r3, [pc, #436]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6c      	ldr	r2, [pc, #432]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a69      	ldr	r2, [pc, #420]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e00b      	b.n	8000e3e <HAL_RCC_OscConfig+0x172>
 8000e26:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a66      	ldr	r2, [pc, #408]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b64      	ldr	r3, [pc, #400]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a63      	ldr	r2, [pc, #396]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e3e:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	f023 020f 	bic.w	r2, r3, #15
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	495d      	ldr	r1, [pc, #372]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d059      	beq.n	8000f10 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fca4 	bl	80007a8 <HAL_GetTick>
 8000e60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e64:	e00a      	b.n	8000e7c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e66:	f7ff fc9f 	bl	80007a8 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d902      	bls.n	8000e7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f000 be29 	b.w	8001ace <HAL_RCC_OscConfig+0xe02>
 8000e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e84:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e88:	fa93 f3a3 	rbit	r3, r3
 8000e8c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e90:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e94:	fab3 f383 	clz	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d102      	bne.n	8000eae <HAL_RCC_OscConfig+0x1e2>
 8000ea8:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	e015      	b.n	8000eda <HAL_RCC_OscConfig+0x20e>
 8000eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ede:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ee2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ee6:	fa92 f2a2 	rbit	r2, r2
 8000eea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000eee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ef2:	fab2 f282 	clz	r2, r2
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	f042 0220 	orr.w	r2, r2, #32
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	f002 021f 	and.w	r2, r2, #31
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0ab      	beq.n	8000e66 <HAL_RCC_OscConfig+0x19a>
 8000f0e:	e05c      	b.n	8000fca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc4a 	bl	80007a8 <HAL_GetTick>
 8000f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f18:	e00a      	b.n	8000f30 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1a:	f7ff fc45 	bl	80007a8 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d902      	bls.n	8000f30 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f000 bdcf 	b.w	8001ace <HAL_RCC_OscConfig+0xe02>
 8000f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f34:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f38:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f44:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d102      	bne.n	8000f62 <HAL_RCC_OscConfig+0x296>
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x2c2>
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f7e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_RCC_OscConfig+0x2f8>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f92:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f96:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f9a:	fa92 f2a2 	rbit	r2, r2
 8000f9e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fa2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fa6:	fab2 f282 	clz	r2, r2
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	f042 0220 	orr.w	r2, r2, #32
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	f002 021f 	and.w	r2, r2, #31
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1ab      	bne.n	8000f1a <HAL_RCC_OscConfig+0x24e>
 8000fc2:	e002      	b.n	8000fca <HAL_RCC_OscConfig+0x2fe>
 8000fc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 816f 	beq.w	80012b8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fda:	4bd0      	ldr	r3, [pc, #832]	; (800131c <HAL_RCC_OscConfig+0x650>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe6:	4bcd      	ldr	r3, [pc, #820]	; (800131c <HAL_RCC_OscConfig+0x650>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d16c      	bne.n	80010cc <HAL_RCC_OscConfig+0x400>
 8000ff2:	4bca      	ldr	r3, [pc, #808]	; (800131c <HAL_RCC_OscConfig+0x650>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d166      	bne.n	80010cc <HAL_RCC_OscConfig+0x400>
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001010:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <HAL_RCC_OscConfig+0x362>
 8001028:	4bbc      	ldr	r3, [pc, #752]	; (800131c <HAL_RCC_OscConfig+0x650>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e013      	b.n	8001056 <HAL_RCC_OscConfig+0x38a>
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001046:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001052:	4bb2      	ldr	r3, [pc, #712]	; (800131c <HAL_RCC_OscConfig+0x650>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	2202      	movs	r2, #2
 8001058:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800105c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001060:	fa92 f2a2 	rbit	r2, r2
 8001064:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001068:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800106c:	fab2 f282 	clz	r2, r2
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	f042 0220 	orr.w	r2, r2, #32
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f002 021f 	and.w	r2, r2, #31
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <HAL_RCC_OscConfig+0x3cc>
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d002      	beq.n	8001098 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	f000 bd1b 	b.w	8001ace <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001098:	4ba0      	ldr	r3, [pc, #640]	; (800131c <HAL_RCC_OscConfig+0x650>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	21f8      	movs	r1, #248	; 0xf8
 80010a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010b0:	fa91 f1a1 	rbit	r1, r1
 80010b4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010bc:	fab1 f181 	clz	r1, r1
 80010c0:	b2c9      	uxtb	r1, r1
 80010c2:	408b      	lsls	r3, r1
 80010c4:	4995      	ldr	r1, [pc, #596]	; (800131c <HAL_RCC_OscConfig+0x650>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	e0f5      	b.n	80012b8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8085 	beq.w	80011e2 <HAL_RCC_OscConfig+0x516>
 80010d8:	2301      	movs	r3, #1
 80010da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	461a      	mov	r2, r3
 8001100:	2301      	movs	r3, #1
 8001102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fb50 	bl	80007a8 <HAL_GetTick>
 8001108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fb4b 	bl	80007a8 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d902      	bls.n	8001124 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	f000 bcd5 	b.w	8001ace <HAL_RCC_OscConfig+0xe02>
 8001124:	2302      	movs	r3, #2
 8001126:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001136:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	095b      	lsrs	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d102      	bne.n	8001154 <HAL_RCC_OscConfig+0x488>
 800114e:	4b73      	ldr	r3, [pc, #460]	; (800131c <HAL_RCC_OscConfig+0x650>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	e013      	b.n	800117c <HAL_RCC_OscConfig+0x4b0>
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800116c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_OscConfig+0x650>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	2202      	movs	r2, #2
 800117e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001182:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001186:	fa92 f2a2 	rbit	r2, r2
 800118a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800118e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001192:	fab2 f282 	clz	r2, r2
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f042 0220 	orr.w	r2, r2, #32
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f002 021f 	and.w	r2, r2, #31
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0af      	beq.n	800110e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <HAL_RCC_OscConfig+0x650>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	21f8      	movs	r1, #248	; 0xf8
 80011be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011c6:	fa91 f1a1 	rbit	r1, r1
 80011ca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011ce:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011d2:	fab1 f181 	clz	r1, r1
 80011d6:	b2c9      	uxtb	r1, r1
 80011d8:	408b      	lsls	r3, r1
 80011da:	4950      	ldr	r1, [pc, #320]	; (800131c <HAL_RCC_OscConfig+0x650>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e06a      	b.n	80012b8 <HAL_RCC_OscConfig+0x5ec>
 80011e2:	2301      	movs	r3, #1
 80011e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001202:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	461a      	mov	r2, r3
 800120a:	2300      	movs	r3, #0
 800120c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff facb 	bl	80007a8 <HAL_GetTick>
 8001212:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff fac6 	bl	80007a8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d902      	bls.n	800122e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	f000 bc50 	b.w	8001ace <HAL_RCC_OscConfig+0xe02>
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d102      	bne.n	800125e <HAL_RCC_OscConfig+0x592>
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_RCC_OscConfig+0x650>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	e013      	b.n	8001286 <HAL_RCC_OscConfig+0x5ba>
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001276:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_RCC_OscConfig+0x650>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	2202      	movs	r2, #2
 8001288:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800128c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001290:	fa92 f2a2 	rbit	r2, r2
 8001294:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001298:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800129c:	fab2 f282 	clz	r2, r2
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	f042 0220 	orr.w	r2, r2, #32
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	f002 021f 	and.w	r2, r2, #31
 80012ac:	2101      	movs	r1, #1
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1af      	bne.n	8001218 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80da 	beq.w	800147c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d069      	beq.n	80013a6 <HAL_RCC_OscConfig+0x6da>
 80012d2:	2301      	movs	r3, #1
 80012d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_OscConfig+0x654>)
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	461a      	mov	r2, r3
 80012f8:	2301      	movs	r3, #1
 80012fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fa54 	bl	80007a8 <HAL_GetTick>
 8001300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001304:	e00e      	b.n	8001324 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fa4f 	bl	80007a8 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d906      	bls.n	8001324 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e3d9      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	10908120 	.word	0x10908120
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001336:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800133a:	2202      	movs	r2, #2
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fa93 f2a3 	rbit	r2, r3
 8001348:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001352:	2202      	movs	r2, #2
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	fa93 f2a3 	rbit	r2, r3
 8001360:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001364:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	4ba5      	ldr	r3, [pc, #660]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800136a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800136e:	2102      	movs	r1, #2
 8001370:	6019      	str	r1, [r3, #0]
 8001372:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f1a3 	rbit	r1, r3
 800137c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001380:	6019      	str	r1, [r3, #0]
  return result;
 8001382:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0b0      	beq.n	8001306 <HAL_RCC_OscConfig+0x63a>
 80013a4:	e06a      	b.n	800147c <HAL_RCC_OscConfig+0x7b0>
 80013a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	fa93 f2a3 	rbit	r2, r3
 80013b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013bc:	601a      	str	r2, [r3, #0]
  return result;
 80013be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b8c      	ldr	r3, [pc, #560]	; (8001600 <HAL_RCC_OscConfig+0x934>)
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	461a      	mov	r2, r3
 80013d4:	2300      	movs	r3, #0
 80013d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff f9e6 	bl	80007a8 <HAL_GetTick>
 80013dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	e009      	b.n	80013f6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff f9e1 	bl	80007a8 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e36b      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
 80013f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013fa:	2202      	movs	r2, #2
 80013fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001412:	2202      	movs	r2, #2
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f2a3 	rbit	r2, r3
 8001420:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800142a:	2202      	movs	r2, #2
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	fa93 f2a3 	rbit	r2, r3
 8001438:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800143c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143e:	4b6f      	ldr	r3, [pc, #444]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001442:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001446:	2102      	movs	r1, #2
 8001448:	6019      	str	r1, [r3, #0]
 800144a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	fa93 f1a3 	rbit	r1, r3
 8001454:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001458:	6019      	str	r1, [r3, #0]
  return result;
 800145a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2101      	movs	r1, #1
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1b2      	bne.n	80013e2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8158 	beq.w	800173c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d112      	bne.n	80014c4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a56      	ldr	r2, [pc, #344]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <HAL_RCC_OscConfig+0x938>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d11a      	bne.n	8001506 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_RCC_OscConfig+0x938>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a4b      	ldr	r2, [pc, #300]	; (8001604 <HAL_RCC_OscConfig+0x938>)
 80014d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014dc:	f7ff f964 	bl	80007a8 <HAL_GetTick>
 80014e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e009      	b.n	80014fa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff f95f 	bl	80007a8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e2e9      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b42      	ldr	r3, [pc, #264]	; (8001604 <HAL_RCC_OscConfig+0x938>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0ef      	beq.n	80014e6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x852>
 8001510:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a39      	ldr	r2, [pc, #228]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e02f      	b.n	800157e <HAL_RCC_OscConfig+0x8b2>
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10c      	bne.n	8001542 <HAL_RCC_OscConfig+0x876>
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a33      	ldr	r2, [pc, #204]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	4b31      	ldr	r3, [pc, #196]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a30      	ldr	r2, [pc, #192]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	e01d      	b.n	800157e <HAL_RCC_OscConfig+0x8b2>
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d10c      	bne.n	8001566 <HAL_RCC_OscConfig+0x89a>
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6213      	str	r3, [r2, #32]
 8001564:	e00b      	b.n	800157e <HAL_RCC_OscConfig+0x8b2>
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	6213      	str	r3, [r2, #32]
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4a21      	ldr	r2, [pc, #132]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 8001578:	f023 0304 	bic.w	r3, r3, #4
 800157c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d06b      	beq.n	8001660 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff f90e 	bl	80007a8 <HAL_GetTick>
 800158c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	e00b      	b.n	80015aa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff f909 	bl	80007a8 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e291      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
 80015aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fa93 f2a3 	rbit	r2, r3
 80015bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015c6:	2202      	movs	r2, #2
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f2a3 	rbit	r2, r3
 80015d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015d8:	601a      	str	r2, [r3, #0]
  return result;
 80015da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d109      	bne.n	8001608 <HAL_RCC_OscConfig+0x93c>
 80015f4:	4b01      	ldr	r3, [pc, #4]	; (80015fc <HAL_RCC_OscConfig+0x930>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	e014      	b.n	8001624 <HAL_RCC_OscConfig+0x958>
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	10908120 	.word	0x10908120
 8001604:	40007000 	.word	0x40007000
 8001608:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	4bbb      	ldr	r3, [pc, #748]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001628:	2102      	movs	r1, #2
 800162a:	6011      	str	r1, [r2, #0]
 800162c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	fa92 f1a2 	rbit	r1, r2
 8001636:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800163a:	6011      	str	r1, [r2, #0]
  return result;
 800163c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	fab2 f282 	clz	r2, r2
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f002 021f 	and.w	r2, r2, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d099      	beq.n	8001592 <HAL_RCC_OscConfig+0x8c6>
 800165e:	e063      	b.n	8001728 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff f8a2 	bl	80007a8 <HAL_GetTick>
 8001664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001668:	e00b      	b.n	8001682 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff f89d 	bl	80007a8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	; 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e225      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
 8001682:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001686:	2202      	movs	r2, #2
 8001688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016b0:	601a      	str	r2, [r3, #0]
  return result;
 80016b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_OscConfig+0xa06>
 80016cc:	4b90      	ldr	r3, [pc, #576]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	e00d      	b.n	80016ee <HAL_RCC_OscConfig+0xa22>
 80016d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fa93 f2a3 	rbit	r2, r3
 80016e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	4b89      	ldr	r3, [pc, #548]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016f2:	2102      	movs	r1, #2
 80016f4:	6011      	str	r1, [r2, #0]
 80016f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	fa92 f1a2 	rbit	r1, r2
 8001700:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001704:	6011      	str	r1, [r2, #0]
  return result;
 8001706:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	fab2 f282 	clz	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f002 021f 	and.w	r2, r2, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1a0      	bne.n	800166a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001728:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b77      	ldr	r3, [pc, #476]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a76      	ldr	r2, [pc, #472]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 81c2 	beq.w	8001acc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001748:	4b71      	ldr	r3, [pc, #452]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	f000 819c 	beq.w	8001a8e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b02      	cmp	r3, #2
 800175e:	f040 8114 	bne.w	800198a <HAL_RCC_OscConfig+0xcbe>
 8001762:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001766:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800176a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800177a:	601a      	str	r2, [r3, #0]
  return result;
 800177c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001780:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800178c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	461a      	mov	r2, r3
 8001794:	2300      	movs	r3, #0
 8001796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff f806 	bl	80007a8 <HAL_GetTick>
 800179c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a0:	e009      	b.n	80017b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff f801 	bl	80007a8 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e18b      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
 80017b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ce:	601a      	str	r2, [r3, #0]
  return result;
 80017d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	095b      	lsrs	r3, r3, #5
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_OscConfig+0xb24>
 80017ea:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	e01b      	b.n	8001828 <HAL_RCC_OscConfig+0xb5c>
 80017f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800180e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800182c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001830:	6011      	str	r1, [r2, #0]
 8001832:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	fa92 f1a2 	rbit	r1, r2
 800183c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001840:	6011      	str	r1, [r2, #0]
  return result;
 8001842:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	fab2 f282 	clz	r2, r2
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f042 0220 	orr.w	r2, r2, #32
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f002 021f 	and.w	r2, r2, #31
 8001858:	2101      	movs	r1, #1
 800185a:	fa01 f202 	lsl.w	r2, r1, r2
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d19e      	bne.n	80017a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	430b      	orrs	r3, r1
 800187a:	4925      	ldr	r1, [pc, #148]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001884:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001898:	601a      	str	r2, [r3, #0]
  return result;
 800189a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800189e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	461a      	mov	r2, r3
 80018b2:	2301      	movs	r3, #1
 80018b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7fe ff77 	bl	80007a8 <HAL_GetTick>
 80018ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018be:	e009      	b.n	80018d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7fe ff72 	bl	80007a8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0fc      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
 80018d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ec:	601a      	str	r2, [r3, #0]
  return result;
 80018ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0xc48>
 8001908:	4b01      	ldr	r3, [pc, #4]	; (8001910 <HAL_RCC_OscConfig+0xc44>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e01e      	b.n	800194c <HAL_RCC_OscConfig+0xc80>
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	fa93 f2a3 	rbit	r2, r3
 8001942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_OscConfig+0xe0c>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001950:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001954:	6011      	str	r1, [r2, #0]
 8001956:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	fa92 f1a2 	rbit	r1, r2
 8001960:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001964:	6011      	str	r1, [r2, #0]
  return result;
 8001966:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	fab2 f282 	clz	r2, r2
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f042 0220 	orr.w	r2, r2, #32
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	f002 021f 	and.w	r2, r2, #31
 800197c:	2101      	movs	r1, #1
 800197e:	fa01 f202 	lsl.w	r2, r1, r2
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d09b      	beq.n	80018c0 <HAL_RCC_OscConfig+0xbf4>
 8001988:	e0a0      	b.n	8001acc <HAL_RCC_OscConfig+0xe00>
 800198a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	601a      	str	r2, [r3, #0]
  return result;
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	461a      	mov	r2, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7fe fef2 	bl	80007a8 <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	e009      	b.n	80019de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ca:	f7fe feed 	bl	80007a8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e077      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
 80019de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fa93 f2a3 	rbit	r2, r3
 80019f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f6:	601a      	str	r2, [r3, #0]
  return result;
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_OscConfig+0xd4c>
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_RCC_OscConfig+0xe0c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e01b      	b.n	8001a50 <HAL_RCC_OscConfig+0xd84>
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f107 0318 	add.w	r3, r7, #24
 8001a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_RCC_OscConfig+0xe0c>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f107 0210 	add.w	r2, r7, #16
 8001a54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a58:	6011      	str	r1, [r2, #0]
 8001a5a:	f107 0210 	add.w	r2, r7, #16
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	fa92 f1a2 	rbit	r1, r2
 8001a64:	f107 020c 	add.w	r2, r7, #12
 8001a68:	6011      	str	r1, [r2, #0]
  return result;
 8001a6a:	f107 020c 	add.w	r2, r7, #12
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	fab2 f282 	clz	r2, r2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f002 021f 	and.w	r2, r2, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d19e      	bne.n	80019ca <HAL_RCC_OscConfig+0xcfe>
 8001a8c:	e01e      	b.n	8001acc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e018      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_RCC_OscConfig+0xe0c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aa4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09e      	sub	sp, #120	; 0x78
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e162      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b90      	ldr	r3, [pc, #576]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b8d      	ldr	r3, [pc, #564]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	498b      	ldr	r1, [pc, #556]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b89      	ldr	r3, [pc, #548]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e14a      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	497f      	ldr	r1, [pc, #508]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80dc 	beq.w	8001d08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d13c      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xf6>
 8001b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xa6>
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e00f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0xc6>
 8001b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b94:	663b      	str	r3, [r7, #96]	; 0x60
 8001b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ba6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001baa:	fa92 f2a2 	rbit	r2, r2
 8001bae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bb2:	fab2 f282 	clz	r2, r2
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f042 0220 	orr.w	r2, r2, #32
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f002 021f 	and.w	r2, r2, #31
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d17b      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0f3      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d13c      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x178>
 8001bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x128>
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e00f      	b.n	8001c24 <HAL_RCC_ClockConfig+0x148>
 8001c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
 8001c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
 8001c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c20:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c2c:	fa92 f2a2 	rbit	r2, r2
 8001c30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c34:	fab2 f282 	clz	r2, r2
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f002 021f 	and.w	r2, r2, #31
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d13a      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b2      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
 8001c54:	2302      	movs	r3, #2
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x1a0>
 8001c76:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	e00d      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1bc>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2202      	movs	r2, #2
 8001c9a:	61ba      	str	r2, [r7, #24]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	fa92 f2a2 	rbit	r2, r2
 8001ca2:	617a      	str	r2, [r7, #20]
  return result;
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	fab2 f282 	clz	r2, r2
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f042 0220 	orr.w	r2, r2, #32
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f002 021f 	and.w	r2, r2, #31
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e079      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	491a      	ldr	r1, [pc, #104]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd8:	f7fe fd66 	bl	80007a8 <HAL_GetTick>
 8001cdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce0:	f7fe fd62 	bl	80007a8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e061      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 020c 	and.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1eb      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d214      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4906      	ldr	r1, [pc, #24]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e040      	b.n	8001dba <HAL_RCC_ClockConfig+0x2de>
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4912      	ldr	r1, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d7e:	f000 f829 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4601      	mov	r1, r0
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8c:	22f0      	movs	r2, #240	; 0xf0
 8001d8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	fa92 f2a2 	rbit	r2, r2
 8001d96:	60fa      	str	r2, [r7, #12]
  return result;
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	fab2 f282 	clz	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	40d3      	lsrs	r3, r2
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x2ec>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	fa21 f303 	lsr.w	r3, r1, r3
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_RCC_ClockConfig+0x2f0>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_ClockConfig+0x2f4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fc1a 	bl	80005ec <HAL_InitTick>
  
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3778      	adds	r7, #120	; 0x78
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	080056c8 	.word	0x080056c8
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x30>
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x36>
 8001e02:	e03c      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e06:	623b      	str	r3, [r7, #32]
      break;
 8001e08:	e03c      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	fa92 f2a2 	rbit	r2, r2
 8001e1c:	607a      	str	r2, [r7, #4]
  return result;
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	fab2 f282 	clz	r2, r2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	40d3      	lsrs	r3, r2
 8001e28:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	220f      	movs	r2, #15
 8001e38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	60fa      	str	r2, [r7, #12]
  return result;
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	40d3      	lsrs	r3, r2
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	e004      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	623b      	str	r3, [r7, #32]
      break;
 8001e7c:	e002      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e80:	623b      	str	r3, [r7, #32]
      break;
 8001e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e84:	6a3b      	ldr	r3, [r7, #32]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	372c      	adds	r7, #44	; 0x2c
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	007a1200 	.word	0x007a1200
 8001e9c:	080056e0 	.word	0x080056e0
 8001ea0:	080056f0 	.word	0x080056f0
 8001ea4:	003d0900 	.word	0x003d0900

08001ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001ec6:	f7ff ffef 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001eca:	4601      	mov	r1, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ed4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ed8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	fa92 f2a2 	rbit	r2, r2
 8001ee0:	603a      	str	r2, [r7, #0]
  return result;
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	40d3      	lsrs	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	080056d8 	.word	0x080056d8

08001f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f0a:	f7ff ffcd 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001f0e:	4601      	mov	r1, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	fa92 f2a2 	rbit	r2, r2
 8001f24:	603a      	str	r2, [r7, #0]
  return result;
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	fab2 f282 	clz	r2, r2
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	40d3      	lsrs	r3, r2
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	080056d8 	.word	0x080056d8

08001f48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	220f      	movs	r2, #15
 8001f56:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_RCC_GetClockConfig+0x60>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0207 	and.w	r2, r3, #7
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e09d      	b.n	80020fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fce:	d009      	beq.n	8001fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
 8001fd6:	e005      	b.n	8001fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fa6e 	bl	80004e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002024:	d902      	bls.n	800202c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e002      	b.n	8002032 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800203a:	d007      	beq.n	800204c <HAL_SPI_Init+0xa0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002044:	d002      	beq.n	800204c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	ea42 0103 	orr.w	r1, r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	f003 0204 	and.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020c8:	ea42 0103 	orr.w	r1, r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e049      	b.n	80021a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f841 	bl	80021b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	4619      	mov	r1, r3
 8002140:	4610      	mov	r0, r2
 8002142:	f000 f9db 	bl	80024fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d001      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e03b      	b.n	8002254 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_TIM_Base_Start_IT+0x9c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_TIM_Base_Start_IT+0x4e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002206:	d004      	beq.n	8002212 <HAL_TIM_Base_Start_IT+0x4e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <HAL_TIM_Base_Start_IT+0xa0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d115      	bne.n	800223e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_TIM_Base_Start_IT+0xa4>)
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d015      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x8c>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d011      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223c:	e008      	b.n	8002250 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e000      	b.n	8002252 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40014000 	.word	0x40014000
 8002268:	00010007 	.word	0x00010007

0800226c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0202 	mvn.w	r2, #2
 8002298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f905 	bl	80024be <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8f7 	bl	80024aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f908 	bl	80024d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0204 	mvn.w	r2, #4
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f8db 	bl	80024be <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8cd 	bl	80024aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f8de 	bl	80024d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b08      	cmp	r3, #8
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b08      	cmp	r3, #8
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0208 	mvn.w	r2, #8
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8b1 	bl	80024be <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f8a3 	bl	80024aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f8b4 	bl	80024d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d122      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d11b      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0210 	mvn.w	r2, #16
 8002394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2208      	movs	r2, #8
 800239a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f887 	bl	80024be <HAL_TIM_IC_CaptureCallback>
 80023b0:	e005      	b.n	80023be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f879 	bl	80024aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f88a 	bl	80024d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0201 	mvn.w	r2, #1
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe f83a 	bl	8000464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b80      	cmp	r3, #128	; 0x80
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8e8 	bl	80025ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242a:	d10e      	bne.n	800244a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b80      	cmp	r3, #128	; 0x80
 8002438:	d107      	bne.n	800244a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f8db 	bl	8002600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d10e      	bne.n	8002476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d107      	bne.n	8002476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800246e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f838 	bl	80024e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b20      	cmp	r3, #32
 8002482:	d10e      	bne.n	80024a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b20      	cmp	r3, #32
 8002490:	d107      	bne.n	80024a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f06f 0220 	mvn.w	r2, #32
 800249a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f89b 	bl	80025d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <TIM_Base_SetConfig+0xcc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_Base_SetConfig+0x20>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d108      	bne.n	800252e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a25      	ldr	r2, [pc, #148]	; (80025c8 <TIM_Base_SetConfig+0xcc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00f      	beq.n	8002556 <TIM_Base_SetConfig+0x5a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d00b      	beq.n	8002556 <TIM_Base_SetConfig+0x5a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a22      	ldr	r2, [pc, #136]	; (80025cc <TIM_Base_SetConfig+0xd0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0x5a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <TIM_Base_SetConfig+0xd4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0x5a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <TIM_Base_SetConfig+0xd8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <TIM_Base_SetConfig+0xcc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00b      	beq.n	80025ac <TIM_Base_SetConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <TIM_Base_SetConfig+0xd0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <TIM_Base_SetConfig+0xb0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <TIM_Base_SetConfig+0xd4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d003      	beq.n	80025ac <TIM_Base_SetConfig+0xb0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <TIM_Base_SetConfig+0xd8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d103      	bne.n	80025b4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	615a      	str	r2, [r3, #20]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40014000 	.word	0x40014000
 80025d0:	40014400 	.word	0x40014400
 80025d4:	40014800 	.word	0x40014800

080025d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e040      	b.n	80026a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fd ff96 	bl	8000568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2224      	movs	r2, #36	; 0x24
 8002640:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f82c 	bl	80026b0 <UART_SetConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e022      	b.n	80026a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f958 	bl	8002920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800267e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800268e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f9df 	bl	8002a64 <UART_CheckIdleState>
 80026a6:	4603      	mov	r3, r0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b8b      	ldr	r3, [pc, #556]	; (8002908 <UART_SetConfig+0x258>)
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6979      	ldr	r1, [r7, #20]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	430a      	orrs	r2, r1
 8002720:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a79      	ldr	r2, [pc, #484]	; (800290c <UART_SetConfig+0x25c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d121      	bne.n	8002770 <UART_SetConfig+0xc0>
 800272c:	4b78      	ldr	r3, [pc, #480]	; (8002910 <UART_SetConfig+0x260>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d817      	bhi.n	8002768 <UART_SetConfig+0xb8>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <UART_SetConfig+0x90>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002751 	.word	0x08002751
 8002744:	0800275d 	.word	0x0800275d
 8002748:	08002763 	.word	0x08002763
 800274c:	08002757 	.word	0x08002757
 8002750:	2300      	movs	r3, #0
 8002752:	77fb      	strb	r3, [r7, #31]
 8002754:	e01e      	b.n	8002794 <UART_SetConfig+0xe4>
 8002756:	2302      	movs	r3, #2
 8002758:	77fb      	strb	r3, [r7, #31]
 800275a:	e01b      	b.n	8002794 <UART_SetConfig+0xe4>
 800275c:	2304      	movs	r3, #4
 800275e:	77fb      	strb	r3, [r7, #31]
 8002760:	e018      	b.n	8002794 <UART_SetConfig+0xe4>
 8002762:	2308      	movs	r3, #8
 8002764:	77fb      	strb	r3, [r7, #31]
 8002766:	e015      	b.n	8002794 <UART_SetConfig+0xe4>
 8002768:	2310      	movs	r3, #16
 800276a:	77fb      	strb	r3, [r7, #31]
 800276c:	bf00      	nop
 800276e:	e011      	b.n	8002794 <UART_SetConfig+0xe4>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a67      	ldr	r2, [pc, #412]	; (8002914 <UART_SetConfig+0x264>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d102      	bne.n	8002780 <UART_SetConfig+0xd0>
 800277a:	2300      	movs	r3, #0
 800277c:	77fb      	strb	r3, [r7, #31]
 800277e:	e009      	b.n	8002794 <UART_SetConfig+0xe4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a64      	ldr	r2, [pc, #400]	; (8002918 <UART_SetConfig+0x268>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d102      	bne.n	8002790 <UART_SetConfig+0xe0>
 800278a:	2300      	movs	r3, #0
 800278c:	77fb      	strb	r3, [r7, #31]
 800278e:	e001      	b.n	8002794 <UART_SetConfig+0xe4>
 8002790:	2310      	movs	r3, #16
 8002792:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279c:	d15c      	bne.n	8002858 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800279e:	7ffb      	ldrb	r3, [r7, #31]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d828      	bhi.n	80027f6 <UART_SetConfig+0x146>
 80027a4:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <UART_SetConfig+0xfc>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027d1 	.word	0x080027d1
 80027b0:	080027d9 	.word	0x080027d9
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	080027f7 	.word	0x080027f7
 80027bc:	080027e7 	.word	0x080027e7
 80027c0:	080027f7 	.word	0x080027f7
 80027c4:	080027f7 	.word	0x080027f7
 80027c8:	080027f7 	.word	0x080027f7
 80027cc:	080027ef 	.word	0x080027ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d0:	f7ff fb76 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 80027d4:	61b8      	str	r0, [r7, #24]
        break;
 80027d6:	e013      	b.n	8002800 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027d8:	f7ff fb94 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 80027dc:	61b8      	str	r0, [r7, #24]
        break;
 80027de:	e00f      	b.n	8002800 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027e0:	4b4e      	ldr	r3, [pc, #312]	; (800291c <UART_SetConfig+0x26c>)
 80027e2:	61bb      	str	r3, [r7, #24]
        break;
 80027e4:	e00c      	b.n	8002800 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e6:	f7ff faf5 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 80027ea:	61b8      	str	r0, [r7, #24]
        break;
 80027ec:	e008      	b.n	8002800 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f2:	61bb      	str	r3, [r7, #24]
        break;
 80027f4:	e004      	b.n	8002800 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	77bb      	strb	r3, [r7, #30]
        break;
 80027fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d074      	beq.n	80028f0 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	005a      	lsls	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	441a      	add	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	b29b      	uxth	r3, r3
 800281c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d916      	bls.n	8002852 <UART_SetConfig+0x1a2>
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282a:	d212      	bcs.n	8002852 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	b29b      	uxth	r3, r3
 8002830:	f023 030f 	bic.w	r3, r3, #15
 8002834:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	b29a      	uxth	r2, r3
 8002842:	89fb      	ldrh	r3, [r7, #14]
 8002844:	4313      	orrs	r3, r2
 8002846:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	89fa      	ldrh	r2, [r7, #14]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e04e      	b.n	80028f0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	77bb      	strb	r3, [r7, #30]
 8002856:	e04b      	b.n	80028f0 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002858:	7ffb      	ldrb	r3, [r7, #31]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d827      	bhi.n	80028ae <UART_SetConfig+0x1fe>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <UART_SetConfig+0x1b4>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002889 	.word	0x08002889
 8002868:	08002891 	.word	0x08002891
 800286c:	08002899 	.word	0x08002899
 8002870:	080028af 	.word	0x080028af
 8002874:	0800289f 	.word	0x0800289f
 8002878:	080028af 	.word	0x080028af
 800287c:	080028af 	.word	0x080028af
 8002880:	080028af 	.word	0x080028af
 8002884:	080028a7 	.word	0x080028a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002888:	f7ff fb1a 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 800288c:	61b8      	str	r0, [r7, #24]
        break;
 800288e:	e013      	b.n	80028b8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002890:	f7ff fb38 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 8002894:	61b8      	str	r0, [r7, #24]
        break;
 8002896:	e00f      	b.n	80028b8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002898:	4b20      	ldr	r3, [pc, #128]	; (800291c <UART_SetConfig+0x26c>)
 800289a:	61bb      	str	r3, [r7, #24]
        break;
 800289c:	e00c      	b.n	80028b8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800289e:	f7ff fa99 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 80028a2:	61b8      	str	r0, [r7, #24]
        break;
 80028a4:	e008      	b.n	80028b8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028aa:	61bb      	str	r3, [r7, #24]
        break;
 80028ac:	e004      	b.n	80028b8 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	77bb      	strb	r3, [r7, #30]
        break;
 80028b6:	bf00      	nop
    }

    if (pclk != 0U)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d018      	beq.n	80028f0 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	085a      	lsrs	r2, r3, #1
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	441a      	add	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	d908      	bls.n	80028ec <UART_SetConfig+0x23c>
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d204      	bcs.n	80028ec <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	e001      	b.n	80028f0 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80028fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	efff69f3 	.word	0xefff69f3
 800290c:	40013800 	.word	0x40013800
 8002910:	40021000 	.word	0x40021000
 8002914:	40004400 	.word	0x40004400
 8002918:	40004800 	.word	0x40004800
 800291c:	007a1200 	.word	0x007a1200

08002920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01a      	beq.n	8002a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a1e:	d10a      	bne.n	8002a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]
  }
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a74:	f7fd fe98 	bl	80007a8 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d10e      	bne.n	8002aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f82d 	bl	8002af6 <UART_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e023      	b.n	8002aee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d10e      	bne.n	8002ad2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f817 	bl	8002af6 <UART_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e00d      	b.n	8002aee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b06:	e05e      	b.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0e:	d05a      	beq.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7fd fe4a 	bl	80007a8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11b      	bne.n	8002b5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e043      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d02c      	beq.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b7a:	d124      	bne.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e00f      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d091      	beq.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf6:	f3ef 8305 	mrs	r3, IPSR
 8002bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c02:	f3ef 8310 	mrs	r3, PRIMASK
 8002c06:	607b      	str	r3, [r7, #4]
  return(result);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <osKernelInitialize+0x32>
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <osKernelInitialize+0x64>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d109      	bne.n	8002c2a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c16:	f3ef 8311 	mrs	r3, BASEPRI
 8002c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002c22:	f06f 0305 	mvn.w	r3, #5
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e00c      	b.n	8002c44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <osKernelInitialize+0x64>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <osKernelInitialize+0x64>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e002      	b.n	8002c44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c44:	68fb      	ldr	r3, [r7, #12]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	2000002c 	.word	0x2000002c

08002c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c5e:	f3ef 8305 	mrs	r3, IPSR
 8002c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6e:	607b      	str	r3, [r7, #4]
  return(result);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <osKernelStart+0x32>
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <osKernelStart+0x64>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d109      	bne.n	8002c92 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c82:	603b      	str	r3, [r7, #0]
  return(result);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002c8a:	f06f 0305 	mvn.w	r3, #5
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e00e      	b.n	8002cb0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <osKernelStart+0x64>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d107      	bne.n	8002caa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <osKernelStart+0x64>)
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002ca0:	f001 f86a 	bl	8003d78 <vTaskStartScheduler>
      stat = osOK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e002      	b.n	8002cb0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000002c 	.word	0x2000002c

08002cc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b092      	sub	sp, #72	; 0x48
 8002cc4:	af04      	add	r7, sp, #16
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cd0:	f3ef 8305 	mrs	r3, IPSR
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 8094 	bne.w	8002e06 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cde:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce2:	623b      	str	r3, [r7, #32]
  return(result);
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 808d 	bne.w	8002e06 <osThreadNew+0x146>
 8002cec:	4b48      	ldr	r3, [pc, #288]	; (8002e10 <osThreadNew+0x150>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d106      	bne.n	8002d02 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8002cf8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 8082 	bne.w	8002e06 <osThreadNew+0x146>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d07e      	beq.n	8002e06 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002d0c:	2318      	movs	r3, #24
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002d10:	2300      	movs	r3, #0
 8002d12:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002d14:	f107 031b 	add.w	r3, r7, #27
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d045      	beq.n	8002db2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <osThreadNew+0x74>
        name = attr->name;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <osThreadNew+0x9a>
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	2b38      	cmp	r3, #56	; 0x38
 8002d4c:	d805      	bhi.n	8002d5a <osThreadNew+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <osThreadNew+0x9e>
        return (NULL);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e054      	b.n	8002e08 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00e      	beq.n	8002d94 <osThreadNew+0xd4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b5b      	cmp	r3, #91	; 0x5b
 8002d7c:	d90a      	bls.n	8002d94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <osThreadNew+0xd4>
        mem = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d92:	e010      	b.n	8002db6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10c      	bne.n	8002db6 <osThreadNew+0xf6>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d108      	bne.n	8002db6 <osThreadNew+0xf6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <osThreadNew+0xf6>
          mem = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db0:	e001      	b.n	8002db6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d110      	bne.n	8002dde <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dc4:	9202      	str	r2, [sp, #8]
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fe08 	bl	80039e8 <xTaskCreateStatic>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e013      	b.n	8002e06 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d110      	bne.n	8002e06 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fe4f 	bl	8003a9a <xTaskCreate>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d001      	beq.n	8002e06 <osThreadNew+0x146>
          hTask = NULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e06:	697b      	ldr	r3, [r7, #20]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3738      	adds	r7, #56	; 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000002c 	.word	0x2000002c

08002e14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e1c:	f3ef 8305 	mrs	r3, IPSR
 8002e20:	613b      	str	r3, [r7, #16]
  return(result);
 8002e22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10f      	bne.n	8002e48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <osDelay+0x34>
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <osDelay+0x58>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d109      	bne.n	8002e50 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <osDelay+0x3c>
    stat = osErrorISR;
 8002e48:	f06f 0305 	mvn.w	r3, #5
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e007      	b.n	8002e60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 ff58 	bl	8003d10 <vTaskDelay>
    }
  }

  return (stat);
 8002e60:	697b      	ldr	r3, [r7, #20]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000002c 	.word	0x2000002c

08002e70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <vApplicationGetIdleTaskMemory+0x2c>)
 8002e80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <vApplicationGetIdleTaskMemory+0x30>)
 8002e86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	601a      	str	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000030 	.word	0x20000030
 8002ea0:	2000008c 	.word	0x2000008c

08002ea4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002eb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4a06      	ldr	r2, [pc, #24]	; (8002ed4 <vApplicationGetTimerTaskMemory+0x30>)
 8002eba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec2:	601a      	str	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	2000028c 	.word	0x2000028c
 8002ed4:	200002e8 	.word	0x200002e8

08002ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f103 0208 	add.w	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f103 0208 	add.w	r2, r3, #8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f103 0208 	add.w	r2, r3, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f90:	d103      	bne.n	8002f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e00c      	b.n	8002fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e002      	b.n	8002fa8 <vListInsert+0x2e>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d2f6      	bcs.n	8002fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	601a      	str	r2, [r3, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6892      	ldr	r2, [r2, #8]
 8003002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6852      	ldr	r2, [r2, #4]
 800300c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d103      	bne.n	8003020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	1e5a      	subs	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	e7fe      	b.n	8003066 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003068:	f001 ffd8 	bl	800501c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	68f9      	ldr	r1, [r7, #12]
 8003076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	441a      	add	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	3b01      	subs	r3, #1
 800309a:	68f9      	ldr	r1, [r7, #12]
 800309c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	441a      	add	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	22ff      	movs	r2, #255	; 0xff
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	22ff      	movs	r2, #255	; 0xff
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d114      	bne.n	80030e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01a      	beq.n	80030fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3310      	adds	r3, #16
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 f8da 	bl	8004284 <xTaskRemoveFromEventList>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <xQueueGenericReset+0xcc>)
 80030d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	e009      	b.n	80030fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3310      	adds	r3, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fef3 	bl	8002ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3324      	adds	r3, #36	; 0x24
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff feee 	bl	8002ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030fc:	f001 ffbc 	bl	8005078 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003100:	2301      	movs	r3, #1
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	e000ed04 	.word	0xe000ed04

08003110 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08e      	sub	sp, #56	; 0x38
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <xQueueGenericCreateStatic+0x28>
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
 8003136:	e7fe      	b.n	8003136 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <xQueueGenericCreateStatic+0x42>
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	e7fe      	b.n	8003150 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <xQueueGenericCreateStatic+0x4e>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <xQueueGenericCreateStatic+0x52>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueGenericCreateStatic+0x54>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <xQueueGenericCreateStatic+0x6c>
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	623b      	str	r3, [r7, #32]
 800317a:	e7fe      	b.n	800317a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <xQueueGenericCreateStatic+0x78>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <xQueueGenericCreateStatic+0x7c>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <xQueueGenericCreateStatic+0x7e>
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <xQueueGenericCreateStatic+0x96>
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	e7fe      	b.n	80031a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031a6:	2350      	movs	r3, #80	; 0x50
 80031a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b50      	cmp	r3, #80	; 0x50
 80031ae:	d009      	beq.n	80031c4 <xQueueGenericCreateStatic+0xb4>
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e7fe      	b.n	80031c2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f805 	bl	80031f4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3730      	adds	r7, #48	; 0x30
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d103      	bne.n	8003210 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e002      	b.n	8003216 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003222:	2101      	movs	r1, #1
 8003224:	69b8      	ldr	r0, [r7, #24]
 8003226:	f7ff ff0b 	bl	8003040 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	; 0x38
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800324a:	2300      	movs	r3, #0
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <xQueueGenericSend+0x30>
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
 800326a:	e7fe      	b.n	800326a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <xQueueGenericSend+0x3e>
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <xQueueGenericSend+0x42>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <xQueueGenericSend+0x44>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <xQueueGenericSend+0x5c>
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e7fe      	b.n	8003296 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d103      	bne.n	80032a6 <xQueueGenericSend+0x6a>
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <xQueueGenericSend+0x6e>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <xQueueGenericSend+0x70>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <xQueueGenericSend+0x88>
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	623b      	str	r3, [r7, #32]
 80032c2:	e7fe      	b.n	80032c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032c4:	f001 f99a 	bl	80045fc <xTaskGetSchedulerState>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <xQueueGenericSend+0x98>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <xQueueGenericSend+0x9c>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <xQueueGenericSend+0x9e>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <xQueueGenericSend+0xb6>
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e7fe      	b.n	80032f0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032f2:	f001 fe93 	bl	800501c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <xQueueGenericSend+0xcc>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d129      	bne.n	800335c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800330e:	f000 f9ff 	bl	8003710 <prvCopyDataToQueue>
 8003312:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	3324      	adds	r3, #36	; 0x24
 8003320:	4618      	mov	r0, r3
 8003322:	f000 ffaf 	bl	8004284 <xTaskRemoveFromEventList>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800332c:	4b3f      	ldr	r3, [pc, #252]	; (800342c <xQueueGenericSend+0x1f0>)
 800332e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	e00a      	b.n	8003354 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003344:	4b39      	ldr	r3, [pc, #228]	; (800342c <xQueueGenericSend+0x1f0>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003354:	f001 fe90 	bl	8005078 <vPortExitCritical>
				return pdPASS;
 8003358:	2301      	movs	r3, #1
 800335a:	e063      	b.n	8003424 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003362:	f001 fe89 	bl	8005078 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003366:	2300      	movs	r3, #0
 8003368:	e05c      	b.n	8003424 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4618      	mov	r0, r3
 8003376:	f000 ffe7 	bl	8004348 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800337a:	2301      	movs	r3, #1
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800337e:	f001 fe7b 	bl	8005078 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003382:	f000 fd5d 	bl	8003e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003386:	f001 fe49 	bl	800501c <vPortEnterCritical>
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003390:	b25b      	sxtb	r3, r3
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003396:	d103      	bne.n	80033a0 <xQueueGenericSend+0x164>
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033a6:	b25b      	sxtb	r3, r3
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ac:	d103      	bne.n	80033b6 <xQueueGenericSend+0x17a>
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b6:	f001 fe5f 	bl	8005078 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033ba:	1d3a      	adds	r2, r7, #4
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 ffd6 	bl	8004374 <xTaskCheckForTimeOut>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d124      	bne.n	8003418 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033d0:	f000 fa96 	bl	8003900 <prvIsQueueFull>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d018      	beq.n	800340c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	3310      	adds	r3, #16
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 ff00 	bl	80041e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ea:	f000 fa21 	bl	8003830 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033ee:	f000 fd35 	bl	8003e5c <xTaskResumeAll>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f47f af7c 	bne.w	80032f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <xQueueGenericSend+0x1f0>)
 80033fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	e772      	b.n	80032f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800340c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800340e:	f000 fa0f 	bl	8003830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003412:	f000 fd23 	bl	8003e5c <xTaskResumeAll>
 8003416:	e76c      	b.n	80032f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800341a:	f000 fa09 	bl	8003830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800341e:	f000 fd1d 	bl	8003e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003422:	2300      	movs	r3, #0
		}
	}
}
 8003424:	4618      	mov	r0, r3
 8003426:	3738      	adds	r7, #56	; 0x38
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	e000ed04 	.word	0xe000ed04

08003430 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <xQueueGenericSendFromISR+0x2c>
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	e7fe      	b.n	800345a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <xQueueGenericSendFromISR+0x3a>
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <xQueueGenericSendFromISR+0x3e>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <xQueueGenericSendFromISR+0x40>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <xQueueGenericSendFromISR+0x58>
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	623b      	str	r3, [r7, #32]
 8003486:	e7fe      	b.n	8003486 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d103      	bne.n	8003496 <xQueueGenericSendFromISR+0x66>
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <xQueueGenericSendFromISR+0x6a>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <xQueueGenericSendFromISR+0x6c>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <xQueueGenericSendFromISR+0x84>
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	e7fe      	b.n	80034b2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034b4:	f001 fe8e 	bl	80051d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034b8:	f3ef 8211 	mrs	r2, BASEPRI
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	61ba      	str	r2, [r7, #24]
 80034ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d302      	bcc.n	80034e6 <xQueueGenericSendFromISR+0xb6>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d12c      	bne.n	8003540 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f6:	f000 f90b 	bl	8003710 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003502:	d112      	bne.n	800352a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d016      	beq.n	800353a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	3324      	adds	r3, #36	; 0x24
 8003510:	4618      	mov	r0, r3
 8003512:	f000 feb7 	bl	8004284 <xTaskRemoveFromEventList>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00e      	beq.n	800353a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e007      	b.n	800353a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800352a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800352e:	3301      	adds	r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	b25a      	sxtb	r2, r3
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800353a:	2301      	movs	r3, #1
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800353e:	e001      	b.n	8003544 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003540:	2300      	movs	r3, #0
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003550:	4618      	mov	r0, r3
 8003552:	3738      	adds	r7, #56	; 0x38
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <xQueueReceive+0x2e>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	623b      	str	r3, [r7, #32]
 8003584:	e7fe      	b.n	8003584 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <xQueueReceive+0x3c>
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <xQueueReceive+0x40>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <xQueueReceive+0x42>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <xQueueReceive+0x5a>
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e7fe      	b.n	80035b0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035b2:	f001 f823 	bl	80045fc <xTaskGetSchedulerState>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <xQueueReceive+0x6a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <xQueueReceive+0x6e>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <xQueueReceive+0x70>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <xQueueReceive+0x88>
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	e7fe      	b.n	80035de <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80035e0:	f001 fd1c 	bl	800501c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01f      	beq.n	8003630 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f4:	f000 f8f6 	bl	80037e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	1e5a      	subs	r2, r3, #1
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00f      	beq.n	8003628 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	3310      	adds	r3, #16
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fe39 	bl	8004284 <xTaskRemoveFromEventList>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003618:	4b3c      	ldr	r3, [pc, #240]	; (800370c <xQueueReceive+0x1b4>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003628:	f001 fd26 	bl	8005078 <vPortExitCritical>
				return pdPASS;
 800362c:	2301      	movs	r3, #1
 800362e:	e069      	b.n	8003704 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003636:	f001 fd1f 	bl	8005078 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800363a:	2300      	movs	r3, #0
 800363c:	e062      	b.n	8003704 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003644:	f107 0310 	add.w	r3, r7, #16
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fe7d 	bl	8004348 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800364e:	2301      	movs	r3, #1
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003652:	f001 fd11 	bl	8005078 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003656:	f000 fbf3 	bl	8003e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800365a:	f001 fcdf 	bl	800501c <vPortEnterCritical>
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003664:	b25b      	sxtb	r3, r3
 8003666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800366a:	d103      	bne.n	8003674 <xQueueReceive+0x11c>
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367a:	b25b      	sxtb	r3, r3
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003680:	d103      	bne.n	800368a <xQueueReceive+0x132>
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800368a:	f001 fcf5 	bl	8005078 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800368e:	1d3a      	adds	r2, r7, #4
 8003690:	f107 0310 	add.w	r3, r7, #16
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fe6c 	bl	8004374 <xTaskCheckForTimeOut>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d123      	bne.n	80036ea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036a4:	f000 f916 	bl	80038d4 <prvIsQueueEmpty>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	3324      	adds	r3, #36	; 0x24
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fd96 	bl	80041e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036be:	f000 f8b7 	bl	8003830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036c2:	f000 fbcb 	bl	8003e5c <xTaskResumeAll>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d189      	bne.n	80035e0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <xQueueReceive+0x1b4>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	e780      	b.n	80035e0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e0:	f000 f8a6 	bl	8003830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036e4:	f000 fbba 	bl	8003e5c <xTaskResumeAll>
 80036e8:	e77a      	b.n	80035e0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ec:	f000 f8a0 	bl	8003830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036f0:	f000 fbb4 	bl	8003e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036f6:	f000 f8ed 	bl	80038d4 <prvIsQueueEmpty>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f43f af6f 	beq.w	80035e0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003702:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003704:	4618      	mov	r0, r3
 8003706:	3730      	adds	r7, #48	; 0x30
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	e000ed04 	.word	0xe000ed04

08003710 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d14d      	bne.n	80037d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 ff7c 	bl	8004638 <xTaskPriorityDisinherit>
 8003740:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	e043      	b.n	80037d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d119      	bne.n	8003784 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6898      	ldr	r0, [r3, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	461a      	mov	r2, r3
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	f001 ff72 	bl	8005644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	441a      	add	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	d32b      	bcc.n	80037d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	e026      	b.n	80037d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68d8      	ldr	r0, [r3, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	461a      	mov	r2, r3
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	f001 ff58 	bl	8005644 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	425b      	negs	r3, r3
 800379e:	441a      	add	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d207      	bcs.n	80037c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	425b      	negs	r3, r3
 80037ba:	441a      	add	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d105      	bne.n	80037d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037da:	697b      	ldr	r3, [r7, #20]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	441a      	add	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d303      	bcc.n	8003818 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68d9      	ldr	r1, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	461a      	mov	r2, r3
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	f001 ff0e 	bl	8005644 <memcpy>
	}
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003838:	f001 fbf0 	bl	800501c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003842:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003844:	e011      	b.n	800386a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3324      	adds	r3, #36	; 0x24
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fd16 	bl	8004284 <xTaskRemoveFromEventList>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800385e:	f000 fde9 	bl	8004434 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	3b01      	subs	r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800386a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	dce9      	bgt.n	8003846 <prvUnlockQueue+0x16>
 8003872:	e000      	b.n	8003876 <prvUnlockQueue+0x46>
					break;
 8003874:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	22ff      	movs	r2, #255	; 0xff
 800387a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800387e:	f001 fbfb 	bl	8005078 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003882:	f001 fbcb 	bl	800501c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800388c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800388e:	e011      	b.n	80038b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d012      	beq.n	80038be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3310      	adds	r3, #16
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fcf1 	bl	8004284 <xTaskRemoveFromEventList>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038a8:	f000 fdc4 	bl	8004434 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038ac:	7bbb      	ldrb	r3, [r7, #14]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	dce9      	bgt.n	8003890 <prvUnlockQueue+0x60>
 80038bc:	e000      	b.n	80038c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038c8:	f001 fbd6 	bl	8005078 <vPortExitCritical>
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038dc:	f001 fb9e 	bl	800501c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e001      	b.n	80038f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038f2:	f001 fbc1 	bl	8005078 <vPortExitCritical>

	return xReturn;
 80038f6:	68fb      	ldr	r3, [r7, #12]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003908:	f001 fb88 	bl	800501c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	429a      	cmp	r2, r3
 8003916:	d102      	bne.n	800391e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003918:	2301      	movs	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e001      	b.n	8003922 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003922:	f001 fba9 	bl	8005078 <vPortExitCritical>

	return xReturn;
 8003926:	68fb      	ldr	r3, [r7, #12]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	e014      	b.n	800396a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <vQueueAddToRegistry+0x4c>)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800394c:	490b      	ldr	r1, [pc, #44]	; (800397c <vQueueAddToRegistry+0x4c>)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003956:	4a09      	ldr	r2, [pc, #36]	; (800397c <vQueueAddToRegistry+0x4c>)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003962:	e005      	b.n	8003970 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3301      	adds	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b07      	cmp	r3, #7
 800396e:	d9e7      	bls.n	8003940 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	20001a70 	.word	0x20001a70

08003980 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003990:	f001 fb44 	bl	800501c <vPortEnterCritical>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800399a:	b25b      	sxtb	r3, r3
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a0:	d103      	bne.n	80039aa <vQueueWaitForMessageRestricted+0x2a>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b0:	b25b      	sxtb	r3, r3
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039b6:	d103      	bne.n	80039c0 <vQueueWaitForMessageRestricted+0x40>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c0:	f001 fb5a 	bl	8005078 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3324      	adds	r3, #36	; 0x24
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fc2b 	bl	8004230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7ff ff28 	bl	8003830 <prvUnlockQueue>
	}
 80039e0:	bf00      	nop
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08e      	sub	sp, #56	; 0x38
 80039ec:	af04      	add	r7, sp, #16
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <xTaskCreateStatic+0x28>
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	e7fe      	b.n	8003a0e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <xTaskCreateStatic+0x42>
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	e7fe      	b.n	8003a28 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a2a:	235c      	movs	r3, #92	; 0x5c
 8003a2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b5c      	cmp	r3, #92	; 0x5c
 8003a32:	d009      	beq.n	8003a48 <xTaskCreateStatic+0x60>
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e7fe      	b.n	8003a46 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01e      	beq.n	8003a8c <xTaskCreateStatic+0xa4>
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01b      	beq.n	8003a8c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a66:	2300      	movs	r3, #0
 8003a68:	9303      	str	r3, [sp, #12]
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	9302      	str	r3, [sp, #8]
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f850 	bl	8003b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a86:	f000 f8d3 	bl	8003c30 <prvAddNewTaskToReadyList>
 8003a8a:	e001      	b.n	8003a90 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a90:	697b      	ldr	r3, [r7, #20]
	}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b08c      	sub	sp, #48	; 0x30
 8003a9e:	af04      	add	r7, sp, #16
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 fbce 	bl	8005250 <pvPortMalloc>
 8003ab4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003abc:	205c      	movs	r0, #92	; 0x5c
 8003abe:	f001 fbc7 	bl	8005250 <pvPortMalloc>
 8003ac2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
 8003ad0:	e005      	b.n	8003ade <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ad2:	6978      	ldr	r0, [r7, #20]
 8003ad4:	f001 fc7e 	bl	80053d4 <vPortFree>
 8003ad8:	e001      	b.n	8003ade <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aec:	88fa      	ldrh	r2, [r7, #6]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9303      	str	r3, [sp, #12]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	9302      	str	r3, [sp, #8]
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f80e 	bl	8003b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b08:	69f8      	ldr	r0, [r7, #28]
 8003b0a:	f000 f891 	bl	8003c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e002      	b.n	8003b1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	21a5      	movs	r1, #165	; 0xa5
 8003b3e:	f001 fd8c 	bl	800565a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f023 0307 	bic.w	r3, r3, #7
 8003b5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <prvInitialiseNewTask+0x56>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e7fe      	b.n	8003b78 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e012      	b.n	8003ba6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	7819      	ldrb	r1, [r3, #0]
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3334      	adds	r3, #52	; 0x34
 8003b90:	460a      	mov	r2, r1
 8003b92:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	2b0f      	cmp	r3, #15
 8003baa:	d9e9      	bls.n	8003b80 <prvInitialiseNewTask+0x5c>
 8003bac:	e000      	b.n	8003bb0 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003bae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	2b37      	cmp	r3, #55	; 0x37
 8003bbc:	d901      	bls.n	8003bc2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bbe:	2337      	movs	r3, #55	; 0x37
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bcc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff f99d 	bl	8002f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	3318      	adds	r3, #24
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff f998 	bl	8002f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2200      	movs	r2, #0
 8003c02:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	69b8      	ldr	r0, [r7, #24]
 8003c12:	f001 f8db 	bl	8004dcc <pxPortInitialiseStack>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c28:	bf00      	nop
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c38:	f001 f9f0 	bl	800501c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <prvAddNewTaskToReadyList+0xc4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	4a2c      	ldr	r2, [pc, #176]	; (8003cf4 <prvAddNewTaskToReadyList+0xc4>)
 8003c44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c46:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <prvAddNewTaskToReadyList+0xc8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c4e:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <prvAddNewTaskToReadyList+0xc8>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <prvAddNewTaskToReadyList+0xc4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d110      	bne.n	8003c7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c5c:	f000 fc0e 	bl	800447c <prvInitialiseTaskLists>
 8003c60:	e00d      	b.n	8003c7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <prvAddNewTaskToReadyList+0xcc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c6a:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <prvAddNewTaskToReadyList+0xc8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d802      	bhi.n	8003c7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c78:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <prvAddNewTaskToReadyList+0xc8>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <prvAddNewTaskToReadyList+0xd0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <prvAddNewTaskToReadyList+0xd0>)
 8003c86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <prvAddNewTaskToReadyList+0xd0>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <prvAddNewTaskToReadyList+0xd4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d903      	bls.n	8003ca4 <prvAddNewTaskToReadyList+0x74>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <prvAddNewTaskToReadyList+0xd4>)
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <prvAddNewTaskToReadyList+0xd8>)
 8003cb2:	441a      	add	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f7ff f939 	bl	8002f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cc0:	f001 f9da 	bl	8005078 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <prvAddNewTaskToReadyList+0xcc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <prvAddNewTaskToReadyList+0xc8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d207      	bcs.n	8003cea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <prvAddNewTaskToReadyList+0xdc>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000bbc 	.word	0x20000bbc
 8003cf8:	200006e8 	.word	0x200006e8
 8003cfc:	20000bc8 	.word	0x20000bc8
 8003d00:	20000bd8 	.word	0x20000bd8
 8003d04:	20000bc4 	.word	0x20000bc4
 8003d08:	200006ec 	.word	0x200006ec
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d22:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <vTaskDelay+0x60>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <vTaskDelay+0x2e>
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	e7fe      	b.n	8003d3c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d3e:	f000 f87f 	bl	8003e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d42:	2100      	movs	r1, #0
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fce3 	bl	8004710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d4a:	f000 f887 	bl	8003e5c <xTaskResumeAll>
 8003d4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <vTaskDelay+0x64>)
 8003d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000be4 	.word	0x20000be4
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d86:	463a      	mov	r2, r7
 8003d88:	1d39      	adds	r1, r7, #4
 8003d8a:	f107 0308 	add.w	r3, r7, #8
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff f86e 	bl	8002e70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	9202      	str	r2, [sp, #8]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	460a      	mov	r2, r1
 8003da6:	4920      	ldr	r1, [pc, #128]	; (8003e28 <vTaskStartScheduler+0xb0>)
 8003da8:	4820      	ldr	r0, [pc, #128]	; (8003e2c <vTaskStartScheduler+0xb4>)
 8003daa:	f7ff fe1d 	bl	80039e8 <xTaskCreateStatic>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <vTaskStartScheduler+0xb8>)
 8003db2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <vTaskStartScheduler+0xb8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e001      	b.n	8003dc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d102      	bne.n	8003dd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003dcc:	f000 fcf4 	bl	80047b8 <xTimerCreateTimerTask>
 8003dd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d115      	bne.n	8003e04 <vTaskStartScheduler+0x8c>
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <vTaskStartScheduler+0xbc>)
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <vTaskStartScheduler+0xc0>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <vTaskStartScheduler+0xc4>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dfe:	f001 f86f 	bl	8004ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e02:	e00d      	b.n	8003e20 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0a:	d109      	bne.n	8003e20 <vTaskStartScheduler+0xa8>
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e7fe      	b.n	8003e1e <vTaskStartScheduler+0xa6>
}
 8003e20:	bf00      	nop
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	0800568c 	.word	0x0800568c
 8003e2c:	0800444d 	.word	0x0800444d
 8003e30:	20000be0 	.word	0x20000be0
 8003e34:	20000bdc 	.word	0x20000bdc
 8003e38:	20000bc8 	.word	0x20000bc8
 8003e3c:	20000bc0 	.word	0x20000bc0

08003e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <vTaskSuspendAll+0x18>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4a03      	ldr	r2, [pc, #12]	; (8003e58 <vTaskSuspendAll+0x18>)
 8003e4c:	6013      	str	r3, [r2, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000be4 	.word	0x20000be4

08003e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <xTaskResumeAll+0x114>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <xTaskResumeAll+0x2a>
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	e7fe      	b.n	8003e84 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e86:	f001 f8c9 	bl	800501c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <xTaskResumeAll+0x114>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4a37      	ldr	r2, [pc, #220]	; (8003f70 <xTaskResumeAll+0x114>)
 8003e92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e94:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <xTaskResumeAll+0x114>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d162      	bne.n	8003f62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <xTaskResumeAll+0x118>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05e      	beq.n	8003f62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ea4:	e02f      	b.n	8003f06 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ea6:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <xTaskResumeAll+0x11c>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3318      	adds	r3, #24
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff f89a 	bl	8002fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff f895 	bl	8002fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <xTaskResumeAll+0x120>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d903      	bls.n	8003ed6 <xTaskResumeAll+0x7a>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <xTaskResumeAll+0x120>)
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <xTaskResumeAll+0x124>)
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7ff f820 	bl	8002f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef6:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <xTaskResumeAll+0x128>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <xTaskResumeAll+0x12c>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <xTaskResumeAll+0x11c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1cb      	bne.n	8003ea6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f14:	f000 fb4c 	bl	80045b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f18:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <xTaskResumeAll+0x130>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f24:	f000 f846 	bl	8003fb4 <xTaskIncrementTick>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <xTaskResumeAll+0x12c>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f1      	bne.n	8003f24 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <xTaskResumeAll+0x130>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <xTaskResumeAll+0x12c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <xTaskResumeAll+0x134>)
 8003f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f62:	f001 f889 	bl	8005078 <vPortExitCritical>

	return xAlreadyYielded;
 8003f66:	68bb      	ldr	r3, [r7, #8]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000be4 	.word	0x20000be4
 8003f74:	20000bbc 	.word	0x20000bbc
 8003f78:	20000b7c 	.word	0x20000b7c
 8003f7c:	20000bc4 	.word	0x20000bc4
 8003f80:	200006ec 	.word	0x200006ec
 8003f84:	200006e8 	.word	0x200006e8
 8003f88:	20000bd0 	.word	0x20000bd0
 8003f8c:	20000bcc 	.word	0x20000bcc
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <xTaskGetTickCount+0x1c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fa0:	687b      	ldr	r3, [r7, #4]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000bc0 	.word	0x20000bc0

08003fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fbe:	4b51      	ldr	r3, [pc, #324]	; (8004104 <xTaskIncrementTick+0x150>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 808d 	bne.w	80040e2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fc8:	4b4f      	ldr	r3, [pc, #316]	; (8004108 <xTaskIncrementTick+0x154>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fd0:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <xTaskIncrementTick+0x154>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11f      	bne.n	800401c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <xTaskIncrementTick+0x158>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <xTaskIncrementTick+0x46>
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	e7fe      	b.n	8003ff8 <xTaskIncrementTick+0x44>
 8003ffa:	4b44      	ldr	r3, [pc, #272]	; (800410c <xTaskIncrementTick+0x158>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	4b43      	ldr	r3, [pc, #268]	; (8004110 <xTaskIncrementTick+0x15c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a41      	ldr	r2, [pc, #260]	; (800410c <xTaskIncrementTick+0x158>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4a41      	ldr	r2, [pc, #260]	; (8004110 <xTaskIncrementTick+0x15c>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b41      	ldr	r3, [pc, #260]	; (8004114 <xTaskIncrementTick+0x160>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	4a3f      	ldr	r2, [pc, #252]	; (8004114 <xTaskIncrementTick+0x160>)
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	f000 faca 	bl	80045b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800401c:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <xTaskIncrementTick+0x164>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	429a      	cmp	r2, r3
 8004024:	d34e      	bcc.n	80040c4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <xTaskIncrementTick+0x158>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <xTaskIncrementTick+0x80>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <xTaskIncrementTick+0x82>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800403a:	4b37      	ldr	r3, [pc, #220]	; (8004118 <xTaskIncrementTick+0x164>)
 800403c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004040:	601a      	str	r2, [r3, #0]
					break;
 8004042:	e03f      	b.n	80040c4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004044:	4b31      	ldr	r3, [pc, #196]	; (800410c <xTaskIncrementTick+0x158>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	d203      	bcs.n	8004064 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800405c:	4a2e      	ldr	r2, [pc, #184]	; (8004118 <xTaskIncrementTick+0x164>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6013      	str	r3, [r2, #0]
						break;
 8004062:	e02f      	b.n	80040c4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3304      	adds	r3, #4
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe ffbf 	bl	8002fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	3318      	adds	r3, #24
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe ffb6 	bl	8002fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <xTaskIncrementTick+0x168>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d903      	bls.n	8004094 <xTaskIncrementTick+0xe0>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a22      	ldr	r2, [pc, #136]	; (800411c <xTaskIncrementTick+0x168>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <xTaskIncrementTick+0x16c>)
 80040a2:	441a      	add	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7fe ff41 	bl	8002f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <xTaskIncrementTick+0x170>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d3b3      	bcc.n	8004026 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040c2:	e7b0      	b.n	8004026 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <xTaskIncrementTick+0x170>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ca:	4915      	ldr	r1, [pc, #84]	; (8004120 <xTaskIncrementTick+0x16c>)
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d907      	bls.n	80040ec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80040dc:	2301      	movs	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	e004      	b.n	80040ec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <xTaskIncrementTick+0x174>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <xTaskIncrementTick+0x174>)
 80040ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <xTaskIncrementTick+0x178>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040f8:	697b      	ldr	r3, [r7, #20]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000be4 	.word	0x20000be4
 8004108:	20000bc0 	.word	0x20000bc0
 800410c:	20000b74 	.word	0x20000b74
 8004110:	20000b78 	.word	0x20000b78
 8004114:	20000bd4 	.word	0x20000bd4
 8004118:	20000bdc 	.word	0x20000bdc
 800411c:	20000bc4 	.word	0x20000bc4
 8004120:	200006ec 	.word	0x200006ec
 8004124:	200006e8 	.word	0x200006e8
 8004128:	20000bcc 	.word	0x20000bcc
 800412c:	20000bd0 	.word	0x20000bd0

08004130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <vTaskSwitchContext+0xa4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <vTaskSwitchContext+0xa8>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004144:	e040      	b.n	80041c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <vTaskSwitchContext+0xa8>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <vTaskSwitchContext+0xac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e00f      	b.n	8004174 <vTaskSwitchContext+0x44>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <vTaskSwitchContext+0x3e>
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e7fe      	b.n	800416c <vTaskSwitchContext+0x3c>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3b01      	subs	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	491a      	ldr	r1, [pc, #104]	; (80041e0 <vTaskSwitchContext+0xb0>)
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0e5      	beq.n	8004154 <vTaskSwitchContext+0x24>
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <vTaskSwitchContext+0xb0>)
 8004194:	4413      	add	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3308      	adds	r3, #8
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d104      	bne.n	80041b8 <vTaskSwitchContext+0x88>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <vTaskSwitchContext+0xb4>)
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	4a06      	ldr	r2, [pc, #24]	; (80041dc <vTaskSwitchContext+0xac>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6013      	str	r3, [r2, #0]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	20000be4 	.word	0x20000be4
 80041d8:	20000bd0 	.word	0x20000bd0
 80041dc:	20000bc4 	.word	0x20000bc4
 80041e0:	200006ec 	.word	0x200006ec
 80041e4:	200006e8 	.word	0x200006e8

080041e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <vTaskPlaceOnEventList+0x24>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e7fe      	b.n	800420a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <vTaskPlaceOnEventList+0x44>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3318      	adds	r3, #24
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe feb0 	bl	8002f7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800421a:	2101      	movs	r1, #1
 800421c:	6838      	ldr	r0, [r7, #0]
 800421e:	f000 fa77 	bl	8004710 <prvAddCurrentTaskToDelayedList>
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200006e8 	.word	0x200006e8

08004230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <vTaskPlaceOnEventListRestricted+0x26>
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e7fe      	b.n	8004254 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <vTaskPlaceOnEventListRestricted+0x50>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3318      	adds	r3, #24
 800425c:	4619      	mov	r1, r3
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7fe fe67 	bl	8002f32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800426a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800426e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	68b8      	ldr	r0, [r7, #8]
 8004274:	f000 fa4c 	bl	8004710 <prvAddCurrentTaskToDelayedList>
	}
 8004278:	bf00      	nop
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	200006e8 	.word	0x200006e8

08004284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <xTaskRemoveFromEventList+0x2a>
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e7fe      	b.n	80042ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3318      	adds	r3, #24
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fe9a 	bl	8002fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <xTaskRemoveFromEventList+0xac>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d11d      	bne.n	80042fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe fe91 	bl	8002fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <xTaskRemoveFromEventList+0xb0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d903      	bls.n	80042de <xTaskRemoveFromEventList+0x5a>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	4a16      	ldr	r2, [pc, #88]	; (8004334 <xTaskRemoveFromEventList+0xb0>)
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4a13      	ldr	r2, [pc, #76]	; (8004338 <xTaskRemoveFromEventList+0xb4>)
 80042ec:	441a      	add	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7fe fe1c 	bl	8002f32 <vListInsertEnd>
 80042fa:	e005      	b.n	8004308 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	3318      	adds	r3, #24
 8004300:	4619      	mov	r1, r3
 8004302:	480e      	ldr	r0, [pc, #56]	; (800433c <xTaskRemoveFromEventList+0xb8>)
 8004304:	f7fe fe15 	bl	8002f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <xTaskRemoveFromEventList+0xbc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	429a      	cmp	r2, r3
 8004314:	d905      	bls.n	8004322 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004316:	2301      	movs	r3, #1
 8004318:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <xTaskRemoveFromEventList+0xc0>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e001      	b.n	8004326 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004326:	697b      	ldr	r3, [r7, #20]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000be4 	.word	0x20000be4
 8004334:	20000bc4 	.word	0x20000bc4
 8004338:	200006ec 	.word	0x200006ec
 800433c:	20000b7c 	.word	0x20000b7c
 8004340:	200006e8 	.word	0x200006e8
 8004344:	20000bd0 	.word	0x20000bd0

08004348 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <vTaskInternalSetTimeOutState+0x24>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <vTaskInternalSetTimeOutState+0x28>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	605a      	str	r2, [r3, #4]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000bd4 	.word	0x20000bd4
 8004370:	20000bc0 	.word	0x20000bc0

08004374 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <xTaskCheckForTimeOut+0x24>
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	e7fe      	b.n	8004396 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <xTaskCheckForTimeOut+0x3e>
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e7fe      	b.n	80043b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80043b2:	f000 fe33 	bl	800501c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043b6:	4b1d      	ldr	r3, [pc, #116]	; (800442c <xTaskCheckForTimeOut+0xb8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ce:	d102      	bne.n	80043d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e023      	b.n	800441e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <xTaskCheckForTimeOut+0xbc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d007      	beq.n	80043f2 <xTaskCheckForTimeOut+0x7e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043ec:	2301      	movs	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	e015      	b.n	800441e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d20b      	bcs.n	8004414 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff9d 	bl	8004348 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e004      	b.n	800441e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800441a:	2301      	movs	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800441e:	f000 fe2b 	bl	8005078 <vPortExitCritical>

	return xReturn;
 8004422:	69fb      	ldr	r3, [r7, #28]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000bc0 	.word	0x20000bc0
 8004430:	20000bd4 	.word	0x20000bd4

08004434 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <vTaskMissedYield+0x14>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	20000bd0 	.word	0x20000bd0

0800444c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004454:	f000 f852 	bl	80044fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <prvIdleTask+0x28>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d9f9      	bls.n	8004454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <prvIdleTask+0x2c>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004470:	e7f0      	b.n	8004454 <prvIdleTask+0x8>
 8004472:	bf00      	nop
 8004474:	200006ec 	.word	0x200006ec
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	e00c      	b.n	80044a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a12      	ldr	r2, [pc, #72]	; (80044dc <prvInitialiseTaskLists+0x60>)
 8004494:	4413      	add	r3, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe fd1e 	bl	8002ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3301      	adds	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b37      	cmp	r3, #55	; 0x37
 80044a6:	d9ef      	bls.n	8004488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044a8:	480d      	ldr	r0, [pc, #52]	; (80044e0 <prvInitialiseTaskLists+0x64>)
 80044aa:	f7fe fd15 	bl	8002ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ae:	480d      	ldr	r0, [pc, #52]	; (80044e4 <prvInitialiseTaskLists+0x68>)
 80044b0:	f7fe fd12 	bl	8002ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044b4:	480c      	ldr	r0, [pc, #48]	; (80044e8 <prvInitialiseTaskLists+0x6c>)
 80044b6:	f7fe fd0f 	bl	8002ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ba:	480c      	ldr	r0, [pc, #48]	; (80044ec <prvInitialiseTaskLists+0x70>)
 80044bc:	f7fe fd0c 	bl	8002ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044c0:	480b      	ldr	r0, [pc, #44]	; (80044f0 <prvInitialiseTaskLists+0x74>)
 80044c2:	f7fe fd09 	bl	8002ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <prvInitialiseTaskLists+0x78>)
 80044c8:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <prvInitialiseTaskLists+0x64>)
 80044ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <prvInitialiseTaskLists+0x7c>)
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <prvInitialiseTaskLists+0x68>)
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200006ec 	.word	0x200006ec
 80044e0:	20000b4c 	.word	0x20000b4c
 80044e4:	20000b60 	.word	0x20000b60
 80044e8:	20000b7c 	.word	0x20000b7c
 80044ec:	20000b90 	.word	0x20000b90
 80044f0:	20000ba8 	.word	0x20000ba8
 80044f4:	20000b74 	.word	0x20000b74
 80044f8:	20000b78 	.word	0x20000b78

080044fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004502:	e019      	b.n	8004538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004504:	f000 fd8a 	bl	800501c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <prvCheckTasksWaitingTermination+0x4c>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fd69 	bl	8002fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <prvCheckTasksWaitingTermination+0x50>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a0a      	ldr	r2, [pc, #40]	; (800454c <prvCheckTasksWaitingTermination+0x50>)
 8004522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <prvCheckTasksWaitingTermination+0x54>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3b01      	subs	r3, #1
 800452a:	4a09      	ldr	r2, [pc, #36]	; (8004550 <prvCheckTasksWaitingTermination+0x54>)
 800452c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800452e:	f000 fda3 	bl	8005078 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f80e 	bl	8004554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <prvCheckTasksWaitingTermination+0x54>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e1      	bne.n	8004504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000b90 	.word	0x20000b90
 800454c:	20000bbc 	.word	0x20000bbc
 8004550:	20000ba4 	.word	0x20000ba4

08004554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004562:	2b00      	cmp	r3, #0
 8004564:	d108      	bne.n	8004578 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	4618      	mov	r0, r3
 800456c:	f000 ff32 	bl	80053d4 <vPortFree>
				vPortFree( pxTCB );
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 ff2f 	bl	80053d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004576:	e017      	b.n	80045a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800457e:	2b01      	cmp	r3, #1
 8004580:	d103      	bne.n	800458a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 ff26 	bl	80053d4 <vPortFree>
	}
 8004588:	e00e      	b.n	80045a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004590:	2b02      	cmp	r3, #2
 8004592:	d009      	beq.n	80045a8 <prvDeleteTCB+0x54>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e7fe      	b.n	80045a6 <prvDeleteTCB+0x52>
	}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <prvResetNextTaskUnblockTime+0x44>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <prvResetNextTaskUnblockTime+0x14>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <prvResetNextTaskUnblockTime+0x16>
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <prvResetNextTaskUnblockTime+0x48>)
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045d2:	e008      	b.n	80045e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <prvResetNextTaskUnblockTime+0x44>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4a05      	ldr	r2, [pc, #20]	; (80045f8 <prvResetNextTaskUnblockTime+0x48>)
 80045e4:	6013      	str	r3, [r2, #0]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000b74 	.word	0x20000b74
 80045f8:	20000bdc 	.word	0x20000bdc

080045fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <xTaskGetSchedulerState+0x34>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800460a:	2301      	movs	r3, #1
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	e008      	b.n	8004622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <xTaskGetSchedulerState+0x38>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004618:	2302      	movs	r3, #2
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	e001      	b.n	8004622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004622:	687b      	ldr	r3, [r7, #4]
	}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20000bc8 	.word	0x20000bc8
 8004634:	20000be4 	.word	0x20000be4

08004638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d054      	beq.n	80046f8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <xTaskPriorityDisinherit+0xcc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d009      	beq.n	800466c <xTaskPriorityDisinherit+0x34>
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e7fe      	b.n	800466a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <xTaskPriorityDisinherit+0x50>
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	e7fe      	b.n	8004686 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	429a      	cmp	r2, r3
 800469c:	d02c      	beq.n	80046f8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d128      	bne.n	80046f8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fc9e 	bl	8002fec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <xTaskPriorityDisinherit+0xd0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d903      	bls.n	80046d8 <xTaskPriorityDisinherit+0xa0>
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <xTaskPriorityDisinherit+0xd0>)
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <xTaskPriorityDisinherit+0xd4>)
 80046e6:	441a      	add	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f7fe fc1f 	bl	8002f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046f8:	697b      	ldr	r3, [r7, #20]
	}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200006e8 	.word	0x200006e8
 8004708:	20000bc4 	.word	0x20000bc4
 800470c:	200006ec 	.word	0x200006ec

08004710 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004720:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3304      	adds	r3, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fc60 	bl	8002fec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004732:	d10a      	bne.n	800474a <prvAddCurrentTaskToDelayedList+0x3a>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4819      	ldr	r0, [pc, #100]	; (80047a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004744:	f7fe fbf5 	bl	8002f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004748:	e026      	b.n	8004798 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4413      	add	r3, r2
 8004750:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	429a      	cmp	r2, r3
 8004760:	d209      	bcs.n	8004776 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004762:	4b12      	ldr	r3, [pc, #72]	; (80047ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7fe fc03 	bl	8002f7a <vListInsert>
}
 8004774:	e010      	b.n	8004798 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7fe fbf9 	bl	8002f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	d202      	bcs.n	8004798 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6013      	str	r3, [r2, #0]
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000bc0 	.word	0x20000bc0
 80047a4:	200006e8 	.word	0x200006e8
 80047a8:	20000ba8 	.word	0x20000ba8
 80047ac:	20000b78 	.word	0x20000b78
 80047b0:	20000b74 	.word	0x20000b74
 80047b4:	20000bdc 	.word	0x20000bdc

080047b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047c2:	f000 fac3 	bl	8004d4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <xTimerCreateTimerTask+0x80>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d021      	beq.n	8004812 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047d6:	1d3a      	adds	r2, r7, #4
 80047d8:	f107 0108 	add.w	r1, r7, #8
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe fb5f 	bl	8002ea4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	9202      	str	r2, [sp, #8]
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	2302      	movs	r3, #2
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2300      	movs	r3, #0
 80047f6:	460a      	mov	r2, r1
 80047f8:	4910      	ldr	r1, [pc, #64]	; (800483c <xTimerCreateTimerTask+0x84>)
 80047fa:	4811      	ldr	r0, [pc, #68]	; (8004840 <xTimerCreateTimerTask+0x88>)
 80047fc:	f7ff f8f4 	bl	80039e8 <xTaskCreateStatic>
 8004800:	4602      	mov	r2, r0
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <xTimerCreateTimerTask+0x8c>)
 8004804:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <xTimerCreateTimerTask+0x8c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800480e:	2301      	movs	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <xTimerCreateTimerTask+0x74>
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	e7fe      	b.n	800482a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800482c:	697b      	ldr	r3, [r7, #20]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000c18 	.word	0x20000c18
 800483c:	08005694 	.word	0x08005694
 8004840:	08004961 	.word	0x08004961
 8004844:	20000c1c 	.word	0x20000c1c

08004848 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <xTimerGenericCommand+0x2c>
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	e7fe      	b.n	8004872 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <xTimerGenericCommand+0x94>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d02a      	beq.n	80048d2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b05      	cmp	r3, #5
 800488c:	dc18      	bgt.n	80048c0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800488e:	f7ff feb5 	bl	80045fc <xTaskGetSchedulerState>
 8004892:	4603      	mov	r3, r0
 8004894:	2b02      	cmp	r3, #2
 8004896:	d109      	bne.n	80048ac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <xTimerGenericCommand+0x94>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	f107 0110 	add.w	r1, r7, #16
 80048a0:	2300      	movs	r3, #0
 80048a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a4:	f7fe fcca 	bl	800323c <xQueueGenericSend>
 80048a8:	6278      	str	r0, [r7, #36]	; 0x24
 80048aa:	e012      	b.n	80048d2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <xTimerGenericCommand+0x94>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	f107 0110 	add.w	r1, r7, #16
 80048b4:	2300      	movs	r3, #0
 80048b6:	2200      	movs	r2, #0
 80048b8:	f7fe fcc0 	bl	800323c <xQueueGenericSend>
 80048bc:	6278      	str	r0, [r7, #36]	; 0x24
 80048be:	e008      	b.n	80048d2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048c0:	4b06      	ldr	r3, [pc, #24]	; (80048dc <xTimerGenericCommand+0x94>)
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	f107 0110 	add.w	r1, r7, #16
 80048c8:	2300      	movs	r3, #0
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	f7fe fdb0 	bl	8003430 <xQueueGenericSendFromISR>
 80048d0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	; 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000c18 	.word	0x20000c18

080048e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <prvProcessExpiredTimer+0x7c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fb77 	bl	8002fec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d121      	bne.n	800494a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	18d1      	adds	r1, r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	6978      	ldr	r0, [r7, #20]
 8004914:	f000 f8c8 	bl	8004aa8 <prvInsertTimerInActiveList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d015      	beq.n	800494a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800491e:	2300      	movs	r3, #0
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2300      	movs	r3, #0
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	2100      	movs	r1, #0
 8004928:	6978      	ldr	r0, [r7, #20]
 800492a:	f7ff ff8d 	bl	8004848 <xTimerGenericCommand>
 800492e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <prvProcessExpiredTimer+0x6a>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e7fe      	b.n	8004948 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	6978      	ldr	r0, [r7, #20]
 8004950:	4798      	blx	r3
}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000c10 	.word	0x20000c10

08004960 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004968:	f107 0308 	add.w	r3, r7, #8
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f857 	bl	8004a20 <prvGetNextExpireTime>
 8004972:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4619      	mov	r1, r3
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f803 	bl	8004984 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800497e:	f000 f8d5 	bl	8004b2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004982:	e7f1      	b.n	8004968 <prvTimerTask+0x8>

08004984 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800498e:	f7ff fa57 	bl	8003e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004992:	f107 0308 	add.w	r3, r7, #8
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f866 	bl	8004a68 <prvSampleTimeNow>
 800499c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d130      	bne.n	8004a06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <prvProcessTimerOrBlockTask+0x3c>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d806      	bhi.n	80049c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049b2:	f7ff fa53 	bl	8003e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff91 	bl	80048e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049be:	e024      	b.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <prvProcessTimerOrBlockTask+0x90>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <prvProcessTimerOrBlockTask+0x94>)
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	f7fe ffcb 	bl	8003980 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049ea:	f7ff fa37 	bl	8003e5c <xTaskResumeAll>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <prvProcessTimerOrBlockTask+0x98>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
}
 8004a04:	e001      	b.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a06:	f7ff fa29 	bl	8003e5c <xTaskResumeAll>
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000c14 	.word	0x20000c14
 8004a18:	20000c18 	.word	0x20000c18
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <prvGetNextExpireTime+0x44>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d105      	bne.n	8004a52 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <prvGetNextExpireTime+0x44>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e001      	b.n	8004a56 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	20000c10 	.word	0x20000c10

08004a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a70:	f7ff fa90 	bl	8003f94 <xTaskGetTickCount>
 8004a74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d205      	bcs.n	8004a8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a80:	f000 f904 	bl	8004c8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a92:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a98:	68fb      	ldr	r3, [r7, #12]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000c20 	.word	0x20000c20

08004aa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d812      	bhi.n	8004af4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e01b      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <prvInsertTimerInActiveList+0x7c>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7fe fa44 	bl	8002f7a <vListInsert>
 8004af2:	e012      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d206      	bcs.n	8004b0a <prvInsertTimerInActiveList+0x62>
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e007      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <prvInsertTimerInActiveList+0x80>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f7fe fa30 	bl	8002f7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b1a:	697b      	ldr	r3, [r7, #20]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000c14 	.word	0x20000c14
 8004b28:	20000c10 	.word	0x20000c10

08004b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b32:	e099      	b.n	8004c68 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	da17      	bge.n	8004b6a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <prvProcessReceivedCommands+0x2e>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e7fe      	b.n	8004b58 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b60:	6850      	ldr	r0, [r2, #4]
 8004b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b64:	6892      	ldr	r2, [r2, #8]
 8004b66:	4611      	mov	r1, r2
 8004b68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db7a      	blt.n	8004c66 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fa33 	bl	8002fec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b86:	463b      	mov	r3, r7
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff6d 	bl	8004a68 <prvSampleTimeNow>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b09      	cmp	r3, #9
 8004b94:	d868      	bhi.n	8004c68 <prvProcessReceivedCommands+0x13c>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <prvProcessReceivedCommands+0x70>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bc5 	.word	0x08004bc5
 8004ba8:	08004c69 	.word	0x08004c69
 8004bac:	08004c1f 	.word	0x08004c1f
 8004bb0:	08004c55 	.word	0x08004c55
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bc5 	.word	0x08004bc5
 8004bbc:	08004c69 	.word	0x08004c69
 8004bc0:	08004c1f 	.word	0x08004c1f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	18d1      	adds	r1, r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd2:	f7ff ff69 	bl	8004aa8 <prvInsertTimerInActiveList>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d045      	beq.n	8004c68 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d13d      	bne.n	8004c68 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	441a      	add	r2, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bfe:	f7ff fe23 	bl	8004848 <xTimerGenericCommand>
 8004c02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d12e      	bne.n	8004c68 <prvProcessReceivedCommands+0x13c>
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	e7fe      	b.n	8004c1c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <prvProcessReceivedCommands+0x114>
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e7fe      	b.n	8004c3e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	18d1      	adds	r1, r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4e:	f7ff ff2b 	bl	8004aa8 <prvInsertTimerInActiveList>
					break;
 8004c52:	e009      	b.n	8004c68 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d104      	bne.n	8004c68 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c60:	f000 fbb8 	bl	80053d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c64:	e000      	b.n	8004c68 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c66:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <prvProcessReceivedCommands+0x15c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	1d39      	adds	r1, r7, #4
 8004c6e:	2200      	movs	r2, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe fc71 	bl	8003558 <xQueueReceive>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f47f af5b 	bne.w	8004b34 <prvProcessReceivedCommands+0x8>
	}
}
 8004c7e:	bf00      	nop
 8004c80:	3730      	adds	r7, #48	; 0x30
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000c18 	.word	0x20000c18

08004c8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c92:	e044      	b.n	8004d1e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c94:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <prvSwitchTimerLists+0xb8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c9e:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <prvSwitchTimerLists+0xb8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe f99d 	bl	8002fec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d12d      	bne.n	8004d1e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4413      	add	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d90e      	bls.n	8004cf2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ce0:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <prvSwitchTimerLists+0xb8>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4610      	mov	r0, r2
 8004cec:	f7fe f945 	bl	8002f7a <vListInsert>
 8004cf0:	e015      	b.n	8004d1e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff fda3 	bl	8004848 <xTimerGenericCommand>
 8004d02:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <prvSwitchTimerLists+0x92>
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	e7fe      	b.n	8004d1c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <prvSwitchTimerLists+0xb8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1b5      	bne.n	8004c94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <prvSwitchTimerLists+0xb8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <prvSwitchTimerLists+0xbc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a04      	ldr	r2, [pc, #16]	; (8004d44 <prvSwitchTimerLists+0xb8>)
 8004d34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d36:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <prvSwitchTimerLists+0xbc>)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	6013      	str	r3, [r2, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000c10 	.word	0x20000c10
 8004d48:	20000c14 	.word	0x20000c14

08004d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d52:	f000 f963 	bl	800501c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d120      	bne.n	8004da0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d5e:	4814      	ldr	r0, [pc, #80]	; (8004db0 <prvCheckForValidListAndQueue+0x64>)
 8004d60:	f7fe f8ba 	bl	8002ed8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d64:	4813      	ldr	r0, [pc, #76]	; (8004db4 <prvCheckForValidListAndQueue+0x68>)
 8004d66:	f7fe f8b7 	bl	8002ed8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <prvCheckForValidListAndQueue+0x6c>)
 8004d6c:	4a10      	ldr	r2, [pc, #64]	; (8004db0 <prvCheckForValidListAndQueue+0x64>)
 8004d6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <prvCheckForValidListAndQueue+0x70>)
 8004d72:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <prvCheckForValidListAndQueue+0x68>)
 8004d74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d76:	2300      	movs	r3, #0
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <prvCheckForValidListAndQueue+0x74>)
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <prvCheckForValidListAndQueue+0x78>)
 8004d7e:	2110      	movs	r1, #16
 8004d80:	200a      	movs	r0, #10
 8004d82:	f7fe f9c5 	bl	8003110 <xQueueGenericCreateStatic>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d8a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d8c:	4b07      	ldr	r3, [pc, #28]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <prvCheckForValidListAndQueue+0x60>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	490b      	ldr	r1, [pc, #44]	; (8004dc8 <prvCheckForValidListAndQueue+0x7c>)
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fdc8 	bl	8003930 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da0:	f000 f96a 	bl	8005078 <vPortExitCritical>
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000c18 	.word	0x20000c18
 8004db0:	20000be8 	.word	0x20000be8
 8004db4:	20000bfc 	.word	0x20000bfc
 8004db8:	20000c10 	.word	0x20000c10
 8004dbc:	20000c14 	.word	0x20000c14
 8004dc0:	20000cc4 	.word	0x20000cc4
 8004dc4:	20000c24 	.word	0x20000c24
 8004dc8:	0800569c 	.word	0x0800569c

08004dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3b04      	subs	r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3b04      	subs	r3, #4
 8004dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b04      	subs	r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004dfc:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <pxPortInitialiseStack+0x64>)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b14      	subs	r3, #20
 8004e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b04      	subs	r3, #4
 8004e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f06f 0202 	mvn.w	r2, #2
 8004e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b20      	subs	r3, #32
 8004e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e22:	68fb      	ldr	r3, [r7, #12]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	08004e35 	.word	0x08004e35

08004e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e3e:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <prvTaskExitError+0x50>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e46:	d009      	beq.n	8004e5c <prvTaskExitError+0x28>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e7fe      	b.n	8004e5a <prvTaskExitError+0x26>
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e6e:	bf00      	nop
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0fc      	beq.n	8004e70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	2000000c 	.word	0x2000000c
	...

08004e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <pxCurrentTCBConst2>)
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	6808      	ldr	r0, [r1, #0]
 8004e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	f380 8809 	msr	PSP, r0
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f380 8811 	msr	BASEPRI, r0
 8004eaa:	4770      	bx	lr
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst2>:
 8004eb0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004eb8:	4808      	ldr	r0, [pc, #32]	; (8004edc <prvPortStartFirstTask+0x24>)
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	6800      	ldr	r0, [r0, #0]
 8004ebe:	f380 8808 	msr	MSP, r0
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8814 	msr	CONTROL, r0
 8004eca:	b662      	cpsie	i
 8004ecc:	b661      	cpsie	f
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	df00      	svc	0
 8004ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eda:	bf00      	nop
 8004edc:	e000ed08 	.word	0xe000ed08

08004ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ee6:	4b44      	ldr	r3, [pc, #272]	; (8004ff8 <xPortStartScheduler+0x118>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a44      	ldr	r2, [pc, #272]	; (8004ffc <xPortStartScheduler+0x11c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d109      	bne.n	8004f04 <xPortStartScheduler+0x24>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e7fe      	b.n	8004f02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f04:	4b3c      	ldr	r3, [pc, #240]	; (8004ff8 <xPortStartScheduler+0x118>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <xPortStartScheduler+0x120>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d109      	bne.n	8004f22 <xPortStartScheduler+0x42>
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e7fe      	b.n	8004f20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f22:	4b38      	ldr	r3, [pc, #224]	; (8005004 <xPortStartScheduler+0x124>)
 8004f24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	22ff      	movs	r2, #255	; 0xff
 8004f32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	4b30      	ldr	r3, [pc, #192]	; (8005008 <xPortStartScheduler+0x128>)
 8004f48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f4a:	4b30      	ldr	r3, [pc, #192]	; (800500c <xPortStartScheduler+0x12c>)
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f50:	e009      	b.n	8004f66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004f52:	4b2e      	ldr	r3, [pc, #184]	; (800500c <xPortStartScheduler+0x12c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	4a2c      	ldr	r2, [pc, #176]	; (800500c <xPortStartScheduler+0x12c>)
 8004f5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b80      	cmp	r3, #128	; 0x80
 8004f70:	d0ef      	beq.n	8004f52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <xPortStartScheduler+0x12c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1c3 0307 	rsb	r3, r3, #7
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d009      	beq.n	8004f92 <xPortStartScheduler+0xb2>
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	e7fe      	b.n	8004f90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f92:	4b1e      	ldr	r3, [pc, #120]	; (800500c <xPortStartScheduler+0x12c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <xPortStartScheduler+0x12c>)
 8004f9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <xPortStartScheduler+0x12c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fa4:	4a19      	ldr	r2, [pc, #100]	; (800500c <xPortStartScheduler+0x12c>)
 8004fa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <xPortStartScheduler+0x130>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a16      	ldr	r2, [pc, #88]	; (8005010 <xPortStartScheduler+0x130>)
 8004fb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <xPortStartScheduler+0x130>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a13      	ldr	r2, [pc, #76]	; (8005010 <xPortStartScheduler+0x130>)
 8004fc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fc8:	f000 f8d6 	bl	8005178 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fcc:	4b11      	ldr	r3, [pc, #68]	; (8005014 <xPortStartScheduler+0x134>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fd2:	f000 f8f5 	bl	80051c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <xPortStartScheduler+0x138>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a0f      	ldr	r2, [pc, #60]	; (8005018 <xPortStartScheduler+0x138>)
 8004fdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fe0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fe2:	f7ff ff69 	bl	8004eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fe6:	f7ff f8a3 	bl	8004130 <vTaskSwitchContext>
	prvTaskExitError();
 8004fea:	f7ff ff23 	bl	8004e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	e000ed00 	.word	0xe000ed00
 8004ffc:	410fc271 	.word	0x410fc271
 8005000:	410fc270 	.word	0x410fc270
 8005004:	e000e400 	.word	0xe000e400
 8005008:	20000d14 	.word	0x20000d14
 800500c:	20000d18 	.word	0x20000d18
 8005010:	e000ed20 	.word	0xe000ed20
 8005014:	2000000c 	.word	0x2000000c
 8005018:	e000ef34 	.word	0xe000ef34

0800501c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <vPortEnterCritical+0x54>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3301      	adds	r3, #1
 800503a:	4a0d      	ldr	r2, [pc, #52]	; (8005070 <vPortEnterCritical+0x54>)
 800503c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <vPortEnterCritical+0x54>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d10e      	bne.n	8005064 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <vPortEnterCritical+0x58>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <vPortEnterCritical+0x48>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	e7fe      	b.n	8005062 <vPortEnterCritical+0x46>
	}
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	2000000c 	.word	0x2000000c
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800507e:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <vPortExitCritical+0x4c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <vPortExitCritical+0x22>
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	e7fe      	b.n	8005098 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <vPortExitCritical+0x4c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3b01      	subs	r3, #1
 80050a0:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <vPortExitCritical+0x4c>)
 80050a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050a4:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <vPortExitCritical+0x4c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <vPortExitCritical+0x3e>
 80050ac:	2300      	movs	r3, #0
 80050ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c
	...

080050d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050d0:	f3ef 8009 	mrs	r0, PSP
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <pxCurrentTCBConst>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	f01e 0f10 	tst.w	lr, #16
 80050e0:	bf08      	it	eq
 80050e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ea:	6010      	str	r0, [r2, #0]
 80050ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050f4:	f380 8811 	msr	BASEPRI, r0
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f7ff f816 	bl	8004130 <vTaskSwitchContext>
 8005104:	f04f 0000 	mov.w	r0, #0
 8005108:	f380 8811 	msr	BASEPRI, r0
 800510c:	bc09      	pop	{r0, r3}
 800510e:	6819      	ldr	r1, [r3, #0]
 8005110:	6808      	ldr	r0, [r1, #0]
 8005112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005116:	f01e 0f10 	tst.w	lr, #16
 800511a:	bf08      	it	eq
 800511c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005120:	f380 8809 	msr	PSP, r0
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst>:
 8005130:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005150:	f7fe ff30 	bl	8003fb4 <xTaskIncrementTick>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <SysTick_Handler+0x3c>)
 800515c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <vPortSetupTimerInterrupt+0x34>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005182:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <vPortSetupTimerInterrupt+0x38>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <vPortSetupTimerInterrupt+0x3c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <vPortSetupTimerInterrupt+0x40>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	099b      	lsrs	r3, r3, #6
 8005194:	4a09      	ldr	r2, [pc, #36]	; (80051bc <vPortSetupTimerInterrupt+0x44>)
 8005196:	3b01      	subs	r3, #1
 8005198:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800519a:	4b04      	ldr	r3, [pc, #16]	; (80051ac <vPortSetupTimerInterrupt+0x34>)
 800519c:	2207      	movs	r2, #7
 800519e:	601a      	str	r2, [r3, #0]
}
 80051a0:	bf00      	nop
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	e000e010 	.word	0xe000e010
 80051b0:	e000e018 	.word	0xe000e018
 80051b4:	20000000 	.word	0x20000000
 80051b8:	10624dd3 	.word	0x10624dd3
 80051bc:	e000e014 	.word	0xe000e014

080051c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051d0 <vPortEnableVFP+0x10>
 80051c4:	6801      	ldr	r1, [r0, #0]
 80051c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051ca:	6001      	str	r1, [r0, #0]
 80051cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051ce:	bf00      	nop
 80051d0:	e000ed88 	.word	0xe000ed88

080051d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051da:	f3ef 8305 	mrs	r3, IPSR
 80051de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b0f      	cmp	r3, #15
 80051e4:	d913      	bls.n	800520e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051e6:	4a16      	ldr	r2, [pc, #88]	; (8005240 <vPortValidateInterruptPriority+0x6c>)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051f0:	4b14      	ldr	r3, [pc, #80]	; (8005244 <vPortValidateInterruptPriority+0x70>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	7afa      	ldrb	r2, [r7, #11]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d209      	bcs.n	800520e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	e7fe      	b.n	800520c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <vPortValidateInterruptPriority+0x74>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <vPortValidateInterruptPriority+0x78>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d909      	bls.n	8005232 <vPortValidateInterruptPriority+0x5e>
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	e7fe      	b.n	8005230 <vPortValidateInterruptPriority+0x5c>
	}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	e000e3f0 	.word	0xe000e3f0
 8005244:	20000d14 	.word	0x20000d14
 8005248:	e000ed0c 	.word	0xe000ed0c
 800524c:	20000d18 	.word	0x20000d18

08005250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800525c:	f7fe fdf0 	bl	8003e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005260:	4b57      	ldr	r3, [pc, #348]	; (80053c0 <pvPortMalloc+0x170>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005268:	f000 f90c 	bl	8005484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800526c:	4b55      	ldr	r3, [pc, #340]	; (80053c4 <pvPortMalloc+0x174>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	f040 808c 	bne.w	8005392 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01c      	beq.n	80052ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005280:	2208      	movs	r2, #8
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	2b00      	cmp	r3, #0
 8005290:	d013      	beq.n	80052ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f023 0307 	bic.w	r3, r3, #7
 8005298:	3308      	adds	r3, #8
 800529a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <pvPortMalloc+0x6a>
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e7fe      	b.n	80052b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d068      	beq.n	8005392 <pvPortMalloc+0x142>
 80052c0:	4b41      	ldr	r3, [pc, #260]	; (80053c8 <pvPortMalloc+0x178>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d863      	bhi.n	8005392 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052ca:	4b40      	ldr	r3, [pc, #256]	; (80053cc <pvPortMalloc+0x17c>)
 80052cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052ce:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <pvPortMalloc+0x17c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052d4:	e004      	b.n	80052e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d903      	bls.n	80052f2 <pvPortMalloc+0xa2>
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f1      	bne.n	80052d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052f2:	4b33      	ldr	r3, [pc, #204]	; (80053c0 <pvPortMalloc+0x170>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d04a      	beq.n	8005392 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2208      	movs	r2, #8
 8005302:	4413      	add	r3, r2
 8005304:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	1ad2      	subs	r2, r2, r3
 8005316:	2308      	movs	r3, #8
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	429a      	cmp	r2, r3
 800531c:	d91e      	bls.n	800535c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4413      	add	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <pvPortMalloc+0xf4>
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e7fe      	b.n	8005342 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	1ad2      	subs	r2, r2, r3
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005356:	69b8      	ldr	r0, [r7, #24]
 8005358:	f000 f8f6 	bl	8005548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800535c:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <pvPortMalloc+0x178>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <pvPortMalloc+0x178>)
 8005368:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800536a:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <pvPortMalloc+0x178>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <pvPortMalloc+0x180>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d203      	bcs.n	800537e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <pvPortMalloc+0x178>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <pvPortMalloc+0x180>)
 800537c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <pvPortMalloc+0x174>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	431a      	orrs	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005392:	f7fe fd63 	bl	8003e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <pvPortMalloc+0x164>
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e7fe      	b.n	80053b2 <pvPortMalloc+0x162>
	return pvReturn;
 80053b4:	69fb      	ldr	r3, [r7, #28]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3728      	adds	r7, #40	; 0x28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20001924 	.word	0x20001924
 80053c4:	20001930 	.word	0x20001930
 80053c8:	20001928 	.word	0x20001928
 80053cc:	2000191c 	.word	0x2000191c
 80053d0:	2000192c 	.word	0x2000192c

080053d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d046      	beq.n	8005474 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053e6:	2308      	movs	r3, #8
 80053e8:	425b      	negs	r3, r3
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4413      	add	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	4b20      	ldr	r3, [pc, #128]	; (800547c <vPortFree+0xa8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <vPortFree+0x42>
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e7fe      	b.n	8005414 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <vPortFree+0x5e>
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	e7fe      	b.n	8005430 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <vPortFree+0xa8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d019      	beq.n	8005474 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d115      	bne.n	8005474 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <vPortFree+0xa8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005458:	f7fe fcf2 	bl	8003e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <vPortFree+0xac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4413      	add	r3, r2
 8005466:	4a06      	ldr	r2, [pc, #24]	; (8005480 <vPortFree+0xac>)
 8005468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800546a:	6938      	ldr	r0, [r7, #16]
 800546c:	f000 f86c 	bl	8005548 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005470:	f7fe fcf4 	bl	8003e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005474:	bf00      	nop
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20001930 	.word	0x20001930
 8005480:	20001928 	.word	0x20001928

08005484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800548a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800548e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005490:	4b27      	ldr	r3, [pc, #156]	; (8005530 <prvHeapInit+0xac>)
 8005492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3307      	adds	r3, #7
 80054a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <prvHeapInit+0xac>)
 80054b4:	4413      	add	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054bc:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <prvHeapInit+0xb0>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <prvHeapInit+0xb0>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4413      	add	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054d0:	2208      	movs	r2, #8
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0307 	bic.w	r3, r3, #7
 80054de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a15      	ldr	r2, [pc, #84]	; (8005538 <prvHeapInit+0xb4>)
 80054e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <prvHeapInit+0xb4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <prvHeapInit+0xb4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvHeapInit+0xb4>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a0a      	ldr	r2, [pc, #40]	; (800553c <prvHeapInit+0xb8>)
 8005512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4a09      	ldr	r2, [pc, #36]	; (8005540 <prvHeapInit+0xbc>)
 800551a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <prvHeapInit+0xc0>)
 800551e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005522:	601a      	str	r2, [r3, #0]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	20000d1c 	.word	0x20000d1c
 8005534:	2000191c 	.word	0x2000191c
 8005538:	20001924 	.word	0x20001924
 800553c:	2000192c 	.word	0x2000192c
 8005540:	20001928 	.word	0x20001928
 8005544:	20001930 	.word	0x20001930

08005548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005550:	4b28      	ldr	r3, [pc, #160]	; (80055f4 <prvInsertBlockIntoFreeList+0xac>)
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e002      	b.n	800555c <prvInsertBlockIntoFreeList+0x14>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d8f7      	bhi.n	8005556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	4413      	add	r3, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d108      	bne.n	800558a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	441a      	add	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	441a      	add	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d118      	bne.n	80055d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <prvInsertBlockIntoFreeList+0xb0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d00d      	beq.n	80055c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	441a      	add	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e008      	b.n	80055d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <prvInsertBlockIntoFreeList+0xb0>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e003      	b.n	80055d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d002      	beq.n	80055e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	2000191c 	.word	0x2000191c
 80055f8:	20001924 	.word	0x20001924

080055fc <__libc_init_array>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	4e0d      	ldr	r6, [pc, #52]	; (8005634 <__libc_init_array+0x38>)
 8005600:	4c0d      	ldr	r4, [pc, #52]	; (8005638 <__libc_init_array+0x3c>)
 8005602:	1ba4      	subs	r4, r4, r6
 8005604:	10a4      	asrs	r4, r4, #2
 8005606:	2500      	movs	r5, #0
 8005608:	42a5      	cmp	r5, r4
 800560a:	d109      	bne.n	8005620 <__libc_init_array+0x24>
 800560c:	4e0b      	ldr	r6, [pc, #44]	; (800563c <__libc_init_array+0x40>)
 800560e:	4c0c      	ldr	r4, [pc, #48]	; (8005640 <__libc_init_array+0x44>)
 8005610:	f000 f82c 	bl	800566c <_init>
 8005614:	1ba4      	subs	r4, r4, r6
 8005616:	10a4      	asrs	r4, r4, #2
 8005618:	2500      	movs	r5, #0
 800561a:	42a5      	cmp	r5, r4
 800561c:	d105      	bne.n	800562a <__libc_init_array+0x2e>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005624:	4798      	blx	r3
 8005626:	3501      	adds	r5, #1
 8005628:	e7ee      	b.n	8005608 <__libc_init_array+0xc>
 800562a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800562e:	4798      	blx	r3
 8005630:	3501      	adds	r5, #1
 8005632:	e7f2      	b.n	800561a <__libc_init_array+0x1e>
 8005634:	08005700 	.word	0x08005700
 8005638:	08005700 	.word	0x08005700
 800563c:	08005700 	.word	0x08005700
 8005640:	08005704 	.word	0x08005704

08005644 <memcpy>:
 8005644:	b510      	push	{r4, lr}
 8005646:	1e43      	subs	r3, r0, #1
 8005648:	440a      	add	r2, r1
 800564a:	4291      	cmp	r1, r2
 800564c:	d100      	bne.n	8005650 <memcpy+0xc>
 800564e:	bd10      	pop	{r4, pc}
 8005650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005654:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005658:	e7f7      	b.n	800564a <memcpy+0x6>

0800565a <memset>:
 800565a:	4402      	add	r2, r0
 800565c:	4603      	mov	r3, r0
 800565e:	4293      	cmp	r3, r2
 8005660:	d100      	bne.n	8005664 <memset+0xa>
 8005662:	4770      	bx	lr
 8005664:	f803 1b01 	strb.w	r1, [r3], #1
 8005668:	e7f9      	b.n	800565e <memset+0x4>
	...

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
