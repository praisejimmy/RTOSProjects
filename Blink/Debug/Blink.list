
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006404  08006404  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006404  08006404  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006404  08006404  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800640c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba0  20000010  0800641c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bb0  0800641c  00021bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd76  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000339b  00000000  00000000  0003cdb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  00040158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e0  00000000  00000000  00041980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000032ab  00000000  00000000  00043060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013af0  00000000  00000000  0004630b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1d56  00000000  00000000  00059dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010bb51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006720  00000000  00000000  0010bbcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800633c 	.word	0x0800633c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800633c 	.word	0x0800633c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fc82 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82e 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f9b0 	bl	8000540 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f97e 	bl	80004e0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80001e4:	f000 f93e 	bl	8000464 <MX_SPI3_Init>
  MX_I2C1_Init();
 80001e8:	f000 f87e 	bl	80002e8 <MX_I2C1_Init>
  MX_SPI2_Init();
 80001ec:	f000 f8fc 	bl	80003e8 <MX_SPI2_Init>
  MX_I2C2_Init();
 80001f0:	f000 f8ba 	bl	8000368 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f003 fbc8 	bl	8003988 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink */
  blinkHandle = osThreadNew(StartBlink, NULL, &blink_attributes);
 80001f8:	4a09      	ldr	r2, [pc, #36]	; (8000220 <main+0x50>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0x54>)
 80001fe:	f003 fc2b 	bl	8003a58 <osThreadNew>
 8000202:	4602      	mov	r2, r0
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <main+0x58>)
 8000206:	601a      	str	r2, [r3, #0]

  /* creation of blink2 */
  blink2Handle = osThreadNew(StartBlink2, NULL, &blink2_attributes);
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <main+0x5c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x60>)
 800020e:	f003 fc23 	bl	8003a58 <osThreadNew>
 8000212:	4602      	mov	r2, r0
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <main+0x64>)
 8000216:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f003 fbea 	bl	80039f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x4c>
 800021e:	bf00      	nop
 8000220:	08006384 	.word	0x08006384
 8000224:	08000611 	.word	0x08000611
 8000228:	20001b1c 	.word	0x20001b1c
 800022c:	080063a8 	.word	0x080063a8
 8000230:	08000649 	.word	0x08000649
 8000234:	20001a94 	.word	0x20001a94

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b09c      	sub	sp, #112	; 0x70
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f006 f86f 	bl	800632a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2234      	movs	r2, #52	; 0x34
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f006 f861 	bl	800632a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000278:	2300      	movs	r3, #0
 800027a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000280:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fa5a 	bl	8001740 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000292:	f000 f9f5 	bl	8000680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 f94c 	bl	8002550 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002be:	f000 f9df 	bl	8000680 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
 80002c2:	2360      	movs	r3, #96	; 0x60
 80002c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ce:	463b      	mov	r3, r7
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fba5 	bl	8002a20 <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80002dc:	f000 f9d0 	bl	8000680 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3770      	adds	r7, #112	; 0x70
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_I2C1_Init+0x74>)
 80002ee:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <MX_I2C1_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <MX_I2C1_Init+0x74>)
 80002f4:	4a1b      	ldr	r2, [pc, #108]	; (8000364 <MX_I2C1_Init+0x7c>)
 80002f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_I2C1_Init+0x74>)
 8000300:	2201      	movs	r2, #1
 8000302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_I2C1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000322:	480e      	ldr	r0, [pc, #56]	; (800035c <MX_I2C1_Init+0x74>)
 8000324:	f000 fe7c 	bl	8001020 <HAL_I2C_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800032e:	f000 f9a7 	bl	8000680 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000332:	2100      	movs	r1, #0
 8000334:	4809      	ldr	r0, [pc, #36]	; (800035c <MX_I2C1_Init+0x74>)
 8000336:	f001 f96b 	bl	8001610 <HAL_I2CEx_ConfigAnalogFilter>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000340:	f000 f99e 	bl	8000680 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000344:	2100      	movs	r1, #0
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_I2C1_Init+0x74>)
 8000348:	f001 f9ad 	bl	80016a6 <HAL_I2CEx_ConfigDigitalFilter>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000352:	f000 f995 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20001998 	.word	0x20001998
 8000360:	40005400 	.word	0x40005400
 8000364:	2000090e 	.word	0x2000090e

08000368 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_I2C2_Init+0x74>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <MX_I2C2_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_I2C2_Init+0x74>)
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <MX_I2C2_Init+0x7c>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_I2C2_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MX_I2C2_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_I2C2_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_I2C2_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C2_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_I2C2_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_I2C2_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003a2:	480e      	ldr	r0, [pc, #56]	; (80003dc <MX_I2C2_Init+0x74>)
 80003a4:	f000 fe3c 	bl	8001020 <HAL_I2C_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003ae:	f000 f967 	bl	8000680 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4809      	ldr	r0, [pc, #36]	; (80003dc <MX_I2C2_Init+0x74>)
 80003b6:	f001 f92b 	bl	8001610 <HAL_I2CEx_ConfigAnalogFilter>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003c0:	f000 f95e 	bl	8000680 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003c4:	2100      	movs	r1, #0
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_I2C2_Init+0x74>)
 80003c8:	f001 f96d 	bl	80016a6 <HAL_I2CEx_ConfigDigitalFilter>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003d2:	f000 f955 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200019e4 	.word	0x200019e4
 80003e0:	40005800 	.word	0x40005800
 80003e4:	2000090e 	.word	0x2000090e

080003e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_SPI2_Init+0x74>)
 80003ee:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <MX_SPI2_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_SPI2_Init+0x74>)
 80003f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_SPI2_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_SPI2_Init+0x74>)
 8000402:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000406:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_SPI2_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_SPI2_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_SPI2_Init+0x74>)
 8000416:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800041a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_SPI2_Init+0x74>)
 800041e:	2238      	movs	r2, #56	; 0x38
 8000420:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_SPI2_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_SPI2_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_SPI2_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_SPI2_Init+0x74>)
 8000436:	2207      	movs	r2, #7
 8000438:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_SPI2_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_SPI2_Init+0x74>)
 8000442:	2208      	movs	r2, #8
 8000444:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_SPI2_Init+0x74>)
 8000448:	f002 fc7c 	bl	8002d44 <HAL_SPI_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000452:	f000 f915 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20001934 	.word	0x20001934
 8000460:	40003800 	.word	0x40003800

08000464 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_SPI3_Init+0x74>)
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <MX_SPI3_Init+0x78>)
 800046c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_SPI3_Init+0x74>)
 8000470:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000474:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_SPI3_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_SPI3_Init+0x74>)
 800047e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000482:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_SPI3_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_SPI3_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_SPI3_Init+0x74>)
 8000492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000496:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_SPI3_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_SPI3_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_SPI3_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_SPI3_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_SPI3_Init+0x74>)
 80004b2:	2207      	movs	r2, #7
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_SPI3_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_SPI3_Init+0x74>)
 80004be:	2208      	movs	r2, #8
 80004c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_SPI3_Init+0x74>)
 80004c4:	f002 fc3e 	bl	8002d44 <HAL_SPI_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80004ce:	f000 f8d7 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20001a30 	.word	0x20001a30
 80004dc:	40003c00 	.word	0x40003c00

080004e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_USART2_UART_Init+0x58>)
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <MX_USART2_UART_Init+0x5c>)
 80004e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_USART2_UART_Init+0x58>)
 80004ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_USART2_UART_Init+0x58>)
 8000506:	220c      	movs	r2, #12
 8000508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_USART2_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_USART2_UART_Init+0x58>)
 8000524:	f002 ff42 	bl	80033ac <HAL_UART_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800052e:	f000 f8a7 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20001a98 	.word	0x20001a98
 800053c:	40004400 	.word	0x40004400

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a29      	ldr	r2, [pc, #164]	; (8000600 <MX_GPIO_Init+0xc0>)
 800055c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a23      	ldr	r2, [pc, #140]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <MX_GPIO_Init+0xc0>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <MX_GPIO_Init+0xc0>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_GPIO_Init+0xc0>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a17      	ldr	r2, [pc, #92]	; (8000600 <MX_GPIO_Init+0xc0>)
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_GPIO_Init+0xc0>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2106      	movs	r1, #6
 80005ba:	4812      	ldr	r0, [pc, #72]	; (8000604 <MX_GPIO_Init+0xc4>)
 80005bc:	f000 fd18 	bl	8000ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_GPIO_Init+0xc8>)
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <MX_GPIO_Init+0xcc>)
 80005d6:	f000 fb99 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80005da:	2306      	movs	r3, #6
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_GPIO_Init+0xc4>)
 80005f2:	f000 fb8b 	bl	8000d0c <HAL_GPIO_Init>

}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	48000400 	.word	0x48000400
 8000608:	10110000 	.word	0x10110000
 800060c:	48000800 	.word	0x48000800

08000610 <StartBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  char hello[6] = "hello";
 8000618:	4a09      	ldr	r2, [pc, #36]	; (8000640 <StartBlink+0x30>)
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	6018      	str	r0, [r3, #0]
 8000624:	3304      	adds	r3, #4
 8000626:	8019      	strh	r1, [r3, #0]
  uint8_t c = 0xCC;
 8000628:	23cc      	movs	r3, #204	; 0xcc
 800062a:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  HAL_I2C_Master_Transmit(&hi2c2, 0x11, &c, sizeof(uint8_t), 10);
 800062c:	f107 020f 	add.w	r2, r7, #15
 8000630:	230a      	movs	r3, #10
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	2111      	movs	r1, #17
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <StartBlink+0x34>)
 800063a:	f000 fd81 	bl	8001140 <HAL_I2C_Master_Transmit>
 800063e:	e7f5      	b.n	800062c <StartBlink+0x1c>
 8000640:	08006364 	.word	0x08006364
 8000644:	200019e4 	.word	0x200019e4

08000648 <StartBlink2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink2 */
void StartBlink2(void *argument)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
//    //osDelay(100);
//	vTaskDelayUntil(&xLastWakeTime, portTICK_PERIOD_MS * 50);
//  }
  /* USER CODE END StartBlink2 */
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d101      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800066e:	f000 fa4b 	bl	8000b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40001000 	.word	0x40001000

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000686:	e7fe      	b.n	8000686 <Error_Handler+0x6>

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_MspInit+0x4c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_MspInit+0x4c>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_MspInit+0x4c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <HAL_MspInit+0x4c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <HAL_MspInit+0x4c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_MspInit+0x4c>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	210f      	movs	r1, #15
 80006c2:	f06f 0001 	mvn.w	r0, #1
 80006c6:	f000 faf7 	bl	8000cb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a3e      	ldr	r2, [pc, #248]	; (80007f0 <HAL_I2C_MspInit+0x118>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d146      	bne.n	8000788 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a3d      	ldr	r2, [pc, #244]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a37      	ldr	r2, [pc, #220]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800072a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000734:	2301      	movs	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073c:	2304      	movs	r3, #4
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f000 fadf 	bl	8000d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000752:	2312      	movs	r3, #18
 8000754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000756:	2301      	movs	r3, #1
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075e:	2304      	movs	r3, #4
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4823      	ldr	r0, [pc, #140]	; (80007f8 <HAL_I2C_MspInit+0x120>)
 800076a:	f000 facf 	bl	8000d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000786:	e02e      	b.n	80007e6 <HAL_I2C_MspInit+0x10e>
  else if(hi2c->Instance==I2C2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <HAL_I2C_MspInit+0x124>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d129      	bne.n	80007e6 <HAL_I2C_MspInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b0:	2312      	movs	r3, #18
 80007b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f000 fa9f 	bl	8000d0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 80007d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_I2C_MspInit+0x11c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	; 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000400 	.word	0x48000400
 80007fc:	40005800 	.word	0x40005800

08000800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a2f      	ldr	r2, [pc, #188]	; (80008dc <HAL_SPI_MspInit+0xdc>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d129      	bne.n	8000876 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 8000840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000852:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000864:	2305      	movs	r3, #5
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	481d      	ldr	r0, [pc, #116]	; (80008e4 <HAL_SPI_MspInit+0xe4>)
 8000870:	f000 fa4c 	bl	8000d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000874:	e02d      	b.n	80008d2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <HAL_SPI_MspInit+0xe8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d128      	bne.n	80008d2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 8000886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088a:	61d3      	str	r3, [r2, #28]
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 800089e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008a2:	6153      	str	r3, [r2, #20]
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_SPI_MspInit+0xe0>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c2:	2306      	movs	r3, #6
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <HAL_SPI_MspInit+0xec>)
 80008ce:	f000 fa1d 	bl	8000d0c <HAL_GPIO_Init>
}
 80008d2:	bf00      	nop
 80008d4:	3730      	adds	r7, #48	; 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40003800 	.word	0x40003800
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000400 	.word	0x48000400
 80008e8:	40003c00 	.word	0x40003c00
 80008ec:	48000800 	.word	0x48000800

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_UART_MspInit+0x7c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d128      	bne.n	8000964 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x80>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x80>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000942:	230c      	movs	r3, #12
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 f9d4 	bl	8000d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004400 	.word	0x40004400
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	2036      	movs	r0, #54	; 0x36
 800098a:	f000 f995 	bl	8000cb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800098e:	2036      	movs	r0, #54	; 0x36
 8000990:	f000 f9ae 	bl	8000cf0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_InitTick+0xa0>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <HAL_InitTick+0xa0>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	61d3      	str	r3, [r2, #28]
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_InitTick+0xa0>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	f003 0310 	and.w	r3, r3, #16
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ac:	f107 0210 	add.w	r2, r7, #16
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f800 	bl	80029bc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009bc:	f001 ffba 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80009c0:	4603      	mov	r3, r0
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <HAL_InitTick+0xa4>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9b      	lsrs	r3, r3, #18
 80009d0:	3b01      	subs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_InitTick+0xa8>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <HAL_InitTick+0xac>)
 80009d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_InitTick+0xa8>)
 80009dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_InitTick+0xa8>)
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_InitTick+0xa8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_InitTick+0xa8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_InitTick+0xa8>)
 80009f6:	f002 fa50 	bl	8002e9a <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d104      	bne.n	8000a0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <HAL_InitTick+0xa8>)
 8000a02:	f002 faab 	bl	8002f5c <HAL_TIM_Base_Start_IT>
 8000a06:	4603      	mov	r3, r0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3730      	adds	r7, #48	; 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	431bde83 	.word	0x431bde83
 8000a1c:	20001b20 	.word	0x20001b20
 8000a20:	40001000 	.word	0x40001000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TIM6_DAC_IRQHandler+0x10>)
 8000a56:	f002 fad5 	bl	8003004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20001b20 	.word	0x20001b20

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0b      	ldr	r4, [pc, #44]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ab2:	f7ff ffd7 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f005 fc09 	bl	80062cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aba:	f7ff fb89 	bl	80001d0 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000acc:	0800640c 	.word	0x0800640c
  ldr r2, =_sbss
 8000ad0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ad4:	20001bb0 	.word	0x20001bb0

08000ad8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_IRQHandler>
	...

08000adc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x28>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x28>)
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f8d8 	bl	8000ca2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff ff3e 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fdc6 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20001b6c 	.word	0x20001b6c

08000b30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20001b6c 	.word	0x20001b6c

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <__NVIC_EnableIRQ+0x38>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ff4c 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cca:	f7ff ff61 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000cce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	6978      	ldr	r0, [r7, #20]
 8000cd6:	f7ff ffb1 	bl	8000c3c <NVIC_EncodePriority>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff80 	bl	8000be8 <__NVIC_SetPriority>
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff54 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e14e      	b.n	8000fba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8140 	beq.w	8000fb4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d00b      	beq.n	8000d54 <HAL_GPIO_Init+0x48>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d48:	2b11      	cmp	r3, #17
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b12      	cmp	r3, #18
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 0201 	and.w	r2, r3, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0xea>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d123      	bne.n	8000e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	6939      	ldr	r1, [r7, #16]
 8000e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0203 	and.w	r2, r3, #3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 809a 	beq.w	8000fb4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e80:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <HAL_GPIO_Init+0x2cc>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a54      	ldr	r2, [pc, #336]	; (8000fd8 <HAL_GPIO_Init+0x2cc>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <HAL_GPIO_Init+0x2cc>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e98:	4a50      	ldr	r2, [pc, #320]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ec2:	d013      	beq.n	8000eec <HAL_GPIO_Init+0x1e0>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <HAL_GPIO_Init+0x2d4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d00d      	beq.n	8000ee8 <HAL_GPIO_Init+0x1dc>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a45      	ldr	r2, [pc, #276]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d007      	beq.n	8000ee4 <HAL_GPIO_Init+0x1d8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a44      	ldr	r2, [pc, #272]	; (8000fe8 <HAL_GPIO_Init+0x2dc>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d101      	bne.n	8000ee0 <HAL_GPIO_Init+0x1d4>
 8000edc:	2303      	movs	r3, #3
 8000ede:	e006      	b.n	8000eee <HAL_GPIO_Init+0x1e2>
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	e004      	b.n	8000eee <HAL_GPIO_Init+0x1e2>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e002      	b.n	8000eee <HAL_GPIO_Init+0x1e2>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <HAL_GPIO_Init+0x1e2>
 8000eec:	2300      	movs	r3, #0
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	f002 0203 	and.w	r2, r2, #3
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000efe:	4937      	ldr	r1, [pc, #220]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0c:	4b37      	ldr	r3, [pc, #220]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f30:	4a2e      	ldr	r2, [pc, #184]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f5a:	4a24      	ldr	r2, [pc, #144]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f47f aea9 	bne.w	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	48000c00 	.word	0x48000c00
 8000fec:	40010400 	.word	0x40010400

08000ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001000:	787b      	ldrb	r3, [r7, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800100c:	e002      	b.n	8001014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e081      	b.n	8001136 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fb46 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2224      	movs	r2, #36	; 0x24
 8001050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0201 	bic.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d107      	bne.n	800109a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	e006      	b.n	80010a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d104      	bne.n	80010ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	ea42 0103 	orr.w	r1, r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	021a      	lsls	r2, r3, #8
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69d9      	ldr	r1, [r3, #28]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1a      	ldr	r2, [r3, #32]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0201 	orr.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2220      	movs	r2, #32
 8001122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af02      	add	r7, sp, #8
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	461a      	mov	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	817b      	strh	r3, [r7, #10]
 8001150:	4613      	mov	r3, r2
 8001152:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b20      	cmp	r3, #32
 800115e:	f040 80da 	bne.w	8001316 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_I2C_Master_Transmit+0x30>
 800116c:	2302      	movs	r3, #2
 800116e:	e0d3      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001178:	f7ff fcda 	bl	8000b30 <HAL_GetTick>
 800117c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2319      	movs	r3, #25
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f8f0 	bl	8001370 <I2C_WaitOnFlagUntilTimeout>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0be      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2221      	movs	r2, #33	; 0x21
 800119e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2210      	movs	r2, #16
 80011a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	893a      	ldrh	r2, [r7, #8]
 80011ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	2bff      	cmp	r3, #255	; 0xff
 80011ca:	d90e      	bls.n	80011ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	8979      	ldrh	r1, [r7, #10]
 80011da:	4b51      	ldr	r3, [pc, #324]	; (8001320 <HAL_I2C_Master_Transmit+0x1e0>)
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 f9e6 	bl	80015b4 <I2C_TransferConfig>
 80011e8:	e06c      	b.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	8979      	ldrh	r1, [r7, #10]
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <HAL_I2C_Master_Transmit+0x1e0>)
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f9d5 	bl	80015b4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800120a:	e05b      	b.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	6a39      	ldr	r1, [r7, #32]
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f8ed 	bl	80013f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e07b      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123a:	b29b      	uxth	r3, r3
 800123c:	3b01      	subs	r3, #1
 800123e:	b29a      	uxth	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001254:	b29b      	uxth	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d034      	beq.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125e:	2b00      	cmp	r3, #0
 8001260:	d130      	bne.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2200      	movs	r2, #0
 800126a:	2180      	movs	r1, #128	; 0x80
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f87f 	bl	8001370 <I2C_WaitOnFlagUntilTimeout>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e04d      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001280:	b29b      	uxth	r3, r3
 8001282:	2bff      	cmp	r3, #255	; 0xff
 8001284:	d90e      	bls.n	80012a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	b2da      	uxtb	r2, r3
 8001292:	8979      	ldrh	r1, [r7, #10]
 8001294:	2300      	movs	r3, #0
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f989 	bl	80015b4 <I2C_TransferConfig>
 80012a2:	e00f      	b.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	8979      	ldrh	r1, [r7, #10]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f978 	bl	80015b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d19e      	bne.n	800120c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	6a39      	ldr	r1, [r7, #32]
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 f8cc 	bl	8001470 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e01a      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2220      	movs	r2, #32
 80012e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_I2C_Master_Transmit+0x1e4>)
 80012f6:	400b      	ands	r3, r1
 80012f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001316:	2302      	movs	r3, #2
  }
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	80002000 	.word	0x80002000
 8001324:	fe00e800 	.word	0xfe00e800

08001328 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d103      	bne.n	8001346 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d007      	beq.n	8001364 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	619a      	str	r2, [r3, #24]
  }
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001380:	e022      	b.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001388:	d01e      	beq.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800138a:	f7ff fbd1 	bl	8000b30 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d302      	bcc.n	80013a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d113      	bne.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f043 0220 	orr.w	r2, r3, #32
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00f      	b.n	80013e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	4013      	ands	r3, r2
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d0cd      	beq.n	8001382 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013fc:	e02c      	b.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 f870 	bl	80014e8 <I2C_IsAcknowledgeFailed>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e02a      	b.n	8001468 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001418:	d01e      	beq.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800141a:	f7ff fb89 	bl	8000b30 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	429a      	cmp	r2, r3
 8001428:	d302      	bcc.n	8001430 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d113      	bne.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f043 0220 	orr.w	r2, r3, #32
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2220      	movs	r2, #32
 8001440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e007      	b.n	8001468 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b02      	cmp	r3, #2
 8001464:	d1cb      	bne.n	80013fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800147c:	e028      	b.n	80014d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f830 	bl	80014e8 <I2C_IsAcknowledgeFailed>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e026      	b.n	80014e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001492:	f7ff fb4d 	bl	8000b30 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d302      	bcc.n	80014a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d113      	bne.n	80014d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f043 0220 	orr.w	r2, r3, #32
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e007      	b.n	80014e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	2b20      	cmp	r3, #32
 80014dc:	d1cf      	bne.n	800147e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d151      	bne.n	80015a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001502:	e022      	b.n	800154a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800150a:	d01e      	beq.n	800154a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800150c:	f7ff fb10 	bl	8000b30 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	429a      	cmp	r2, r3
 800151a:	d302      	bcc.n	8001522 <I2C_IsAcknowledgeFailed+0x3a>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d113      	bne.n	800154a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2220      	movs	r2, #32
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e02e      	b.n	80015a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	2b20      	cmp	r3, #32
 8001556:	d1d5      	bne.n	8001504 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2210      	movs	r2, #16
 800155e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2220      	movs	r2, #32
 8001566:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fedd 	bl	8001328 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800157a:	400b      	ands	r3, r1
 800157c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f043 0204 	orr.w	r2, r3, #4
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2220      	movs	r2, #32
 800158e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	fe00e800 	.word	0xfe00e800

080015b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	817b      	strh	r3, [r7, #10]
 80015c2:	4613      	mov	r3, r2
 80015c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <I2C_TransferConfig+0x58>)
 80015d6:	430b      	orrs	r3, r1
 80015d8:	43db      	mvns	r3, r3
 80015da:	ea02 0103 	and.w	r1, r2, r3
 80015de:	897b      	ldrh	r3, [r7, #10]
 80015e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015e4:	7a7b      	ldrb	r3, [r7, #9]
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	03ff63ff 	.word	0x03ff63ff

08001610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b20      	cmp	r3, #32
 8001624:	d138      	bne.n	8001698 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001630:	2302      	movs	r3, #2
 8001632:	e032      	b.n	800169a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001662:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	e000      	b.n	800169a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001698:	2302      	movs	r3, #2
  }
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d139      	bne.n	8001730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e033      	b.n	8001732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2224      	movs	r2, #36	; 0x24
 80016d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	e000      	b.n	8001732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001730:	2302      	movs	r3, #2
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001746:	af00      	add	r7, sp, #0
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	f000 bef4 	b.w	8002542 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 816a 	beq.w	8001a3e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800176a:	4bb3      	ldr	r3, [pc, #716]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00c      	beq.n	8001790 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001776:	4bb0      	ldr	r3, [pc, #704]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b08      	cmp	r3, #8
 8001780:	d159      	bne.n	8001836 <HAL_RCC_OscConfig+0xf6>
 8001782:	4bad      	ldr	r3, [pc, #692]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178e:	d152      	bne.n	8001836 <HAL_RCC_OscConfig+0xf6>
 8001790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001794:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d102      	bne.n	80017c2 <HAL_RCC_OscConfig+0x82>
 80017bc:	4b9e      	ldr	r3, [pc, #632]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	e015      	b.n	80017ee <HAL_RCC_OscConfig+0xae>
 80017c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017ea:	4b93      	ldr	r3, [pc, #588]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017fa:	fa92 f2a2 	rbit	r2, r2
 80017fe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001802:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001806:	fab2 f282 	clz	r2, r2
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f042 0220 	orr.w	r2, r2, #32
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f002 021f 	and.w	r2, r2, #31
 8001816:	2101      	movs	r1, #1
 8001818:	fa01 f202 	lsl.w	r2, r1, r2
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 810c 	beq.w	8001a3c <HAL_RCC_OscConfig+0x2fc>
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 8106 	bne.w	8001a3c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	f000 be86 	b.w	8002542 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d106      	bne.n	8001850 <HAL_RCC_OscConfig+0x110>
 8001842:	4b7d      	ldr	r3, [pc, #500]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a7c      	ldr	r2, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e030      	b.n	80018b2 <HAL_RCC_OscConfig+0x172>
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x134>
 800185a:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a76      	ldr	r2, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b74      	ldr	r3, [pc, #464]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a73      	ldr	r2, [pc, #460]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01e      	b.n	80018b2 <HAL_RCC_OscConfig+0x172>
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187e:	d10c      	bne.n	800189a <HAL_RCC_OscConfig+0x15a>
 8001880:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a6c      	ldr	r2, [pc, #432]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a69      	ldr	r2, [pc, #420]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e00b      	b.n	80018b2 <HAL_RCC_OscConfig+0x172>
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a66      	ldr	r2, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 80018a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b64      	ldr	r3, [pc, #400]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a63      	ldr	r2, [pc, #396]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 80018ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018b2:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f023 020f 	bic.w	r2, r3, #15
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	495d      	ldr	r1, [pc, #372]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d059      	beq.n	8001984 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f92e 	bl	8000b30 <HAL_GetTick>
 80018d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018da:	f7ff f929 	bl	8000b30 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d902      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f000 be29 	b.w	8002542 <HAL_RCC_OscConfig+0xe02>
 80018f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001904:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x1e2>
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x20e>
 8001922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001926:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800193e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001952:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001956:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800195a:	fa92 f2a2 	rbit	r2, r2
 800195e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001962:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ab      	beq.n	80018da <HAL_RCC_OscConfig+0x19a>
 8001982:	e05c      	b.n	8001a3e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f8d4 	bl	8000b30 <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198e:	f7ff f8cf 	bl	8000b30 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d902      	bls.n	80019a4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	f000 bdcf 	b.w	8002542 <HAL_RCC_OscConfig+0xe02>
 80019a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_OscConfig+0x296>
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x2c2>
 80019d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_RCC_OscConfig+0x2f8>)
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a06:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a0e:	fa92 f2a2 	rbit	r2, r2
 8001a12:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a16:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a1a:	fab2 f282 	clz	r2, r2
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f042 0220 	orr.w	r2, r2, #32
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f002 021f 	and.w	r2, r2, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ab      	bne.n	800198e <HAL_RCC_OscConfig+0x24e>
 8001a36:	e002      	b.n	8001a3e <HAL_RCC_OscConfig+0x2fe>
 8001a38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 816f 	beq.w	8001d2c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a4e:	4bd0      	ldr	r3, [pc, #832]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a5a:	4bcd      	ldr	r3, [pc, #820]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d16c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x400>
 8001a66:	4bca      	ldr	r3, [pc, #808]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d166      	bne.n	8001b40 <HAL_RCC_OscConfig+0x400>
 8001a72:	2302      	movs	r3, #2
 8001a74:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a84:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x362>
 8001a9c:	4bbc      	ldr	r3, [pc, #752]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	e013      	b.n	8001aca <HAL_RCC_OscConfig+0x38a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001aba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ac6:	4bb2      	ldr	r3, [pc, #712]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2202      	movs	r2, #2
 8001acc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ad0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ad4:	fa92 f2a2 	rbit	r2, r2
 8001ad8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001adc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f002 021f 	and.w	r2, r2, #31
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_RCC_OscConfig+0x3cc>
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f000 bd1b 	b.w	8002542 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4ba0      	ldr	r3, [pc, #640]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	21f8      	movs	r1, #248	; 0xf8
 8001b1c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b24:	fa91 f1a1 	rbit	r1, r1
 8001b28:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b2c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b30:	fab1 f181 	clz	r1, r1
 8001b34:	b2c9      	uxtb	r1, r1
 8001b36:	408b      	lsls	r3, r1
 8001b38:	4995      	ldr	r1, [pc, #596]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	e0f5      	b.n	8001d2c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8085 	beq.w	8001c56 <HAL_RCC_OscConfig+0x516>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	461a      	mov	r2, r3
 8001b74:	2301      	movs	r3, #1
 8001b76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7fe ffda 	bl	8000b30 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b82:	f7fe ffd5 	bl	8000b30 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d902      	bls.n	8001b98 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	f000 bcd5 	b.w	8002542 <HAL_RCC_OscConfig+0xe02>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001baa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x488>
 8001bc2:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e013      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4b0>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bda:	2302      	movs	r3, #2
 8001bdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001be0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001bf6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bfa:	fa92 f2a2 	rbit	r2, r2
 8001bfe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c06:	fab2 f282 	clz	r2, r2
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f042 0220 	orr.w	r2, r2, #32
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f002 021f 	and.w	r2, r2, #31
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0af      	beq.n	8001b82 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	21f8      	movs	r1, #248	; 0xf8
 8001c32:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c3a:	fa91 f1a1 	rbit	r1, r1
 8001c3e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c42:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c46:	fab1 f181 	clz	r1, r1
 8001c4a:	b2c9      	uxtb	r1, r1
 8001c4c:	408b      	lsls	r3, r1
 8001c4e:	4950      	ldr	r1, [pc, #320]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e06a      	b.n	8001d2c <HAL_RCC_OscConfig+0x5ec>
 8001c56:	2301      	movs	r3, #1
 8001c58:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2300      	movs	r3, #0
 8001c80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe ff55 	bl	8000b30 <HAL_GetTick>
 8001c86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7fe ff50 	bl	8000b30 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d902      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	f000 bc50 	b.w	8002542 <HAL_RCC_OscConfig+0xe02>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d102      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x592>
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	e013      	b.n	8001cfa <HAL_RCC_OscConfig+0x5ba>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x650>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d00:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d04:	fa92 f2a2 	rbit	r2, r2
 8001d08:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f002 021f 	and.w	r2, r2, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f202 	lsl.w	r2, r1, r2
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1af      	bne.n	8001c8c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80da 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d069      	beq.n	8001e1a <HAL_RCC_OscConfig+0x6da>
 8001d46:	2301      	movs	r3, #1
 8001d48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_OscConfig+0x654>)
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7fe fede 	bl	8000b30 <HAL_GetTick>
 8001d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d78:	e00e      	b.n	8001d98 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7fe fed9 	bl	8000b30 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d906      	bls.n	8001d98 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e3d9      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	10908120 	.word	0x10908120
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001daa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dae:	2202      	movs	r2, #2
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	fa93 f2a3 	rbit	r2, r3
 8001dbc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4ba5      	ldr	r3, [pc, #660]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dde:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001de2:	2102      	movs	r1, #2
 8001de4:	6019      	str	r1, [r3, #0]
 8001de6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f1a3 	rbit	r1, r3
 8001df0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001df4:	6019      	str	r1, [r3, #0]
  return result;
 8001df6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0b0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x63a>
 8001e18:	e06a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x7b0>
 8001e1a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <HAL_RCC_OscConfig+0x934>)
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	461a      	mov	r2, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7fe fe70 	bl	8000b30 <HAL_GetTick>
 8001e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e56:	f7fe fe6b 	bl	8000b30 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e36b      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
 8001e6a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e6e:	2202      	movs	r2, #2
 8001e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fa93 f2a3 	rbit	r2, r3
 8001e7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e86:	2202      	movs	r2, #2
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001eb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb2:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001eba:	2102      	movs	r1, #2
 8001ebc:	6019      	str	r1, [r3, #0]
 8001ebe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f1a3 	rbit	r1, r3
 8001ec8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ecc:	6019      	str	r1, [r3, #0]
  return result;
 8001ece:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1b2      	bne.n	8001e56 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8158 	beq.w	80021b0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d112      	bne.n	8001f38 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a56      	ldr	r2, [pc, #344]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	4b54      	ldr	r3, [pc, #336]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b4f      	ldr	r3, [pc, #316]	; (8002078 <HAL_RCC_OscConfig+0x938>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d11a      	bne.n	8001f7a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f44:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <HAL_RCC_OscConfig+0x938>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	; (8002078 <HAL_RCC_OscConfig+0x938>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7fe fdee 	bl	8000b30 <HAL_GetTick>
 8001f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7fe fde9 	bl	8000b30 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e2e9      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b42      	ldr	r3, [pc, #264]	; (8002078 <HAL_RCC_OscConfig+0x938>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ef      	beq.n	8001f5a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x852>
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a39      	ldr	r2, [pc, #228]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e02f      	b.n	8001ff2 <HAL_RCC_OscConfig+0x8b2>
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x876>
 8001f9c:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a33      	ldr	r2, [pc, #204]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fae:	f023 0304 	bic.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	e01d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x8b2>
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x89a>
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x8b2>
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a24      	ldr	r2, [pc, #144]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d06b      	beq.n	80020d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fd98 	bl	8000b30 <HAL_GetTick>
 8002000:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7fe fd93 	bl	8000b30 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f241 3288 	movw	r2, #5000	; 0x1388
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e291      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
 800201e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	fa93 f2a3 	rbit	r2, r3
 8002030:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800203a:	2202      	movs	r2, #2
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800204c:	601a      	str	r2, [r3, #0]
  return result;
 800204e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002052:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d109      	bne.n	800207c <HAL_RCC_OscConfig+0x93c>
 8002068:	4b01      	ldr	r3, [pc, #4]	; (8002070 <HAL_RCC_OscConfig+0x930>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x958>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	10908120 	.word	0x10908120
 8002078:	40007000 	.word	0x40007000
 800207c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002080:	2202      	movs	r2, #2
 8002082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f2a3 	rbit	r2, r3
 800208e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	4bbb      	ldr	r3, [pc, #748]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800209c:	2102      	movs	r1, #2
 800209e:	6011      	str	r1, [r2, #0]
 80020a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	fa92 f1a2 	rbit	r1, r2
 80020aa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020ae:	6011      	str	r1, [r2, #0]
  return result;
 80020b0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	fab2 f282 	clz	r2, r2
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f002 021f 	and.w	r2, r2, #31
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f202 	lsl.w	r2, r1, r2
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d099      	beq.n	8002006 <HAL_RCC_OscConfig+0x8c6>
 80020d2:	e063      	b.n	800219c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7fe fd2c 	bl	8000b30 <HAL_GetTick>
 80020d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe fd27 	bl	8000b30 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e225      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
 80020f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002112:	2202      	movs	r2, #2
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002124:	601a      	str	r2, [r3, #0]
  return result;
 8002126:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800212a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d102      	bne.n	8002146 <HAL_RCC_OscConfig+0xa06>
 8002140:	4b90      	ldr	r3, [pc, #576]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	e00d      	b.n	8002162 <HAL_RCC_OscConfig+0xa22>
 8002146:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800214a:	2202      	movs	r2, #2
 800214c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002166:	2102      	movs	r1, #2
 8002168:	6011      	str	r1, [r2, #0]
 800216a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	fa92 f1a2 	rbit	r1, r2
 8002174:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002178:	6011      	str	r1, [r2, #0]
  return result;
 800217a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f002 021f 	and.w	r2, r2, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1a0      	bne.n	80020de <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800219c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b77      	ldr	r3, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	4a76      	ldr	r2, [pc, #472]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 81c2 	beq.w	8002540 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021bc:	4b71      	ldr	r3, [pc, #452]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	f000 819c 	beq.w	8002502 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	f040 8114 	bne.w	80023fe <HAL_RCC_OscConfig+0xcbe>
 80021d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fa93 f2a3 	rbit	r2, r3
 80021ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021ee:	601a      	str	r2, [r3, #0]
  return result;
 80021f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002200:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	461a      	mov	r2, r3
 8002208:	2300      	movs	r3, #0
 800220a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fc90 	bl	8000b30 <HAL_GetTick>
 8002210:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	e009      	b.n	800222a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe fc8b 	bl	8000b30 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e18b      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
 800222a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800222e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002242:	601a      	str	r2, [r3, #0]
  return result;
 8002244:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002248:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0xb24>
 800225e:	4b49      	ldr	r3, [pc, #292]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e01b      	b.n	800229c <HAL_RCC_OscConfig+0xb5c>
 8002264:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002282:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022a4:	6011      	str	r1, [r2, #0]
 80022a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	fa92 f1a2 	rbit	r1, r2
 80022b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022b4:	6011      	str	r1, [r2, #0]
  return result;
 80022b6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f042 0220 	orr.w	r2, r2, #32
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f002 021f 	and.w	r2, r2, #31
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f202 	lsl.w	r2, r1, r2
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d19e      	bne.n	8002216 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	4925      	ldr	r1, [pc, #148]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
 80022f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800230c:	601a      	str	r2, [r3, #0]
  return result;
 800230e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002312:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800231e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	461a      	mov	r2, r3
 8002326:	2301      	movs	r3, #1
 8002328:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fc01 	bl	8000b30 <HAL_GetTick>
 800232e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002332:	e009      	b.n	8002348 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fbfc 	bl	8000b30 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0fc      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
 8002348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800234c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002360:	601a      	str	r2, [r3, #0]
  return result;
 8002362:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002366:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0xc48>
 800237c:	4b01      	ldr	r3, [pc, #4]	; (8002384 <HAL_RCC_OscConfig+0xc44>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	e01e      	b.n	80023c0 <HAL_RCC_OscConfig+0xc80>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800238c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fa93 f2a3 	rbit	r2, r3
 800239c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	4b63      	ldr	r3, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0xe0c>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023c8:	6011      	str	r1, [r2, #0]
 80023ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	fa92 f1a2 	rbit	r1, r2
 80023d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023d8:	6011      	str	r1, [r2, #0]
  return result;
 80023da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f002 021f 	and.w	r2, r2, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d09b      	beq.n	8002334 <HAL_RCC_OscConfig+0xbf4>
 80023fc:	e0a0      	b.n	8002540 <HAL_RCC_OscConfig+0xe00>
 80023fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002402:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002416:	601a      	str	r2, [r3, #0]
  return result;
 8002418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002428:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	461a      	mov	r2, r3
 8002430:	2300      	movs	r3, #0
 8002432:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fb7c 	bl	8000b30 <HAL_GetTick>
 8002438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243c:	e009      	b.n	8002452 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243e:	f7fe fb77 	bl	8000b30 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e077      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
 8002452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800245a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	601a      	str	r2, [r3, #0]
  return result;
 800246c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002470:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0xd4c>
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCC_OscConfig+0xe0c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e01b      	b.n	80024c4 <HAL_RCC_OscConfig+0xd84>
 800248c:	f107 0320 	add.w	r3, r7, #32
 8002490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f107 0318 	add.w	r3, r7, #24
 80024aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f107 0318 	add.w	r3, r7, #24
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fa93 f2a3 	rbit	r2, r3
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_RCC_OscConfig+0xe0c>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	f107 0210 	add.w	r2, r7, #16
 80024c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024cc:	6011      	str	r1, [r2, #0]
 80024ce:	f107 0210 	add.w	r2, r7, #16
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	fa92 f1a2 	rbit	r1, r2
 80024d8:	f107 020c 	add.w	r2, r7, #12
 80024dc:	6011      	str	r1, [r2, #0]
  return result;
 80024de:	f107 020c 	add.w	r2, r7, #12
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	fab2 f282 	clz	r2, r2
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	f042 0220 	orr.w	r2, r2, #32
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f002 021f 	and.w	r2, r2, #31
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f202 	lsl.w	r2, r1, r2
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d19e      	bne.n	800243e <HAL_RCC_OscConfig+0xcfe>
 8002500:	e01e      	b.n	8002540 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e018      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_RCC_OscConfig+0xe0c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002518:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800251c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	429a      	cmp	r2, r3
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800252a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800252e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b09e      	sub	sp, #120	; 0x78
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e162      	b.n	800282e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b90      	ldr	r3, [pc, #576]	; (80027ac <HAL_RCC_ClockConfig+0x25c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d910      	bls.n	8002598 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b8d      	ldr	r3, [pc, #564]	; (80027ac <HAL_RCC_ClockConfig+0x25c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	498b      	ldr	r1, [pc, #556]	; (80027ac <HAL_RCC_ClockConfig+0x25c>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b89      	ldr	r3, [pc, #548]	; (80027ac <HAL_RCC_ClockConfig+0x25c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e14a      	b.n	800282e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b82      	ldr	r3, [pc, #520]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	497f      	ldr	r1, [pc, #508]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80dc 	beq.w	800277c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d13c      	bne.n	8002646 <HAL_RCC_ClockConfig+0xf6>
 80025cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xa6>
 80025f0:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	e00f      	b.n	8002616 <HAL_RCC_ClockConfig+0xc6>
 80025f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	667b      	str	r3, [r7, #100]	; 0x64
 8002604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002608:	663b      	str	r3, [r7, #96]	; 0x60
 800260a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800261a:	65ba      	str	r2, [r7, #88]	; 0x58
 800261c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002624:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f042 0220 	orr.w	r2, r2, #32
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d17b      	bne.n	800273a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0f3      	b.n	800282e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d13c      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x178>
 800264e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002652:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800265c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_RCC_ClockConfig+0x128>
 8002672:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	e00f      	b.n	8002698 <HAL_RCC_ClockConfig+0x148>
 8002678:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	647b      	str	r3, [r7, #68]	; 0x44
 8002686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268a:	643b      	str	r3, [r7, #64]	; 0x40
 800268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269c:	63ba      	str	r2, [r7, #56]	; 0x38
 800269e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026a0:	fa92 f2a2 	rbit	r2, r2
 80026a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026a8:	fab2 f282 	clz	r2, r2
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f042 0220 	orr.w	r2, r2, #32
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f002 021f 	and.w	r2, r2, #31
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f202 	lsl.w	r2, r1, r2
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d13a      	bne.n	800273a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b2      	b.n	800282e <HAL_RCC_ClockConfig+0x2de>
 80026c8:	2302      	movs	r3, #2
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x1a0>
 80026ea:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e00d      	b.n	800270c <HAL_RCC_ClockConfig+0x1bc>
 80026f0:	2302      	movs	r3, #2
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	2302      	movs	r3, #2
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2202      	movs	r2, #2
 800270e:	61ba      	str	r2, [r7, #24]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	fa92 f2a2 	rbit	r2, r2
 8002716:	617a      	str	r2, [r7, #20]
  return result;
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e079      	b.n	800282e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	491a      	ldr	r1, [pc, #104]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7fe f9f0 	bl	8000b30 <HAL_GetTick>
 8002750:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe f9ec 	bl	8000b30 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e061      	b.n	800282e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_RCC_ClockConfig+0x260>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x25c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d214      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_RCC_ClockConfig+0x25c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4906      	ldr	r1, [pc, #24]	; (80027ac <HAL_RCC_ClockConfig+0x25c>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCC_ClockConfig+0x25c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e040      	b.n	800282e <HAL_RCC_ClockConfig+0x2de>
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_ClockConfig+0x2e8>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	491a      	ldr	r1, [pc, #104]	; (8002838 <HAL_RCC_ClockConfig+0x2e8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <HAL_RCC_ClockConfig+0x2e8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4912      	ldr	r1, [pc, #72]	; (8002838 <HAL_RCC_ClockConfig+0x2e8>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027f2:	f000 f829 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80027f6:	4601      	mov	r1, r0
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_RCC_ClockConfig+0x2e8>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002800:	22f0      	movs	r2, #240	; 0xf0
 8002802:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	fa92 f2a2 	rbit	r2, r2
 800280a:	60fa      	str	r2, [r7, #12]
  return result;
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	40d3      	lsrs	r3, r2
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x2ec>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	fa21 f303 	lsr.w	r3, r1, r3
 800281e:	4a08      	ldr	r2, [pc, #32]	; (8002840 <HAL_RCC_ClockConfig+0x2f0>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_RCC_ClockConfig+0x2f4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe f8a4 	bl	8000974 <HAL_InitTick>
  
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3778      	adds	r7, #120	; 0x78
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	080063cc 	.word	0x080063cc
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	b08b      	sub	sp, #44	; 0x2c
 800284c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002862:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d002      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x30>
 8002872:	2b08      	cmp	r3, #8
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x36>
 8002876:	e03c      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_GetSysClockFreq+0xc4>)
 800287a:	623b      	str	r3, [r7, #32]
      break;
 800287c:	e03c      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002884:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002888:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	fa92 f2a2 	rbit	r2, r2
 8002890:	607a      	str	r2, [r7, #4]
  return result;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	40d3      	lsrs	r3, r2
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_RCC_GetSysClockFreq+0xc8>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	220f      	movs	r2, #15
 80028ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	fa92 f2a2 	rbit	r2, r2
 80028b4:	60fa      	str	r2, [r7, #12]
  return result;
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	40d3      	lsrs	r3, r2
 80028c0:	4a14      	ldr	r2, [pc, #80]	; (8002914 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028d0:	4a0e      	ldr	r2, [pc, #56]	; (800290c <HAL_RCC_GetSysClockFreq+0xc4>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	e004      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	623b      	str	r3, [r7, #32]
      break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_GetSysClockFreq+0xc4>)
 80028f4:	623b      	str	r3, [r7, #32]
      break;
 80028f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	372c      	adds	r7, #44	; 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	007a1200 	.word	0x007a1200
 8002910:	080063e4 	.word	0x080063e4
 8002914:	080063f4 	.word	0x080063f4
 8002918:	003d0900 	.word	0x003d0900

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_GetHCLKFreq+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800293a:	f7ff ffef 	bl	800291c <HAL_RCC_GetHCLKFreq>
 800293e:	4601      	mov	r1, r0
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002948:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800294c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	603a      	str	r2, [r7, #0]
  return result;
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	fab2 f282 	clz	r2, r2
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	40d3      	lsrs	r3, r2
 8002960:	4a04      	ldr	r2, [pc, #16]	; (8002974 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	080063dc 	.word	0x080063dc

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800297e:	f7ff ffcd 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002982:	4601      	mov	r1, r0
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800298c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002990:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	fa92 f2a2 	rbit	r2, r2
 8002998:	603a      	str	r2, [r7, #0]
  return result;
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	fab2 f282 	clz	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	40d3      	lsrs	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	080063dc 	.word	0x080063dc

080029bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	220f      	movs	r2, #15
 80029ca:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCC_GetClockConfig+0x60>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0207 	and.w	r2, r3, #7
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40022000 	.word	0x40022000

08002a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b092      	sub	sp, #72	; 0x48
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80d4 	beq.w	8002bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a44:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10e      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	61d3      	str	r3, [r2, #28]
 8002a5c:	4b48      	ldr	r3, [pc, #288]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a41      	ldr	r2, [pc, #260]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe f853 	bl	8000b30 <HAL_GetTick>
 8002a8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe f84f 	bl	8000b30 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	; 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e14b      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8084 	beq.w	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d07c      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002acc:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	461a      	mov	r2, r3
 8002af6:	2301      	movs	r3, #1
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b22:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04b      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fd ffff 	bl	8000b30 <HAL_GetTick>
 8002b32:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fd fffb 	bl	8000b30 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0f5      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	2302      	movs	r3, #2
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	61fb      	str	r3, [r7, #28]
  return result;
 8002b64:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d108      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b7a:	4b01      	ldr	r3, [pc, #4]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	e00d      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40007000 	.word	0x40007000
 8002b88:	10908100 	.word	0x10908100
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	4b69      	ldr	r3, [pc, #420]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	613a      	str	r2, [r7, #16]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	fa92 f2a2 	rbit	r2, r2
 8002ba6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0b7      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bc6:	4b5e      	ldr	r3, [pc, #376]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	495b      	ldr	r1, [pc, #364]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d105      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be0:	4b57      	ldr	r3, [pc, #348]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4a56      	ldr	r2, [pc, #344]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bf8:	4b51      	ldr	r3, [pc, #324]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f023 0203 	bic.w	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	494e      	ldr	r1, [pc, #312]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c16:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f023 0210 	bic.w	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4947      	ldr	r1, [pc, #284]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c34:	4b42      	ldr	r3, [pc, #264]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	493f      	ldr	r1, [pc, #252]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c52:	4b3b      	ldr	r3, [pc, #236]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f023 0220 	bic.w	r2, r3, #32
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	4938      	ldr	r1, [pc, #224]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c70:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	4930      	ldr	r1, [pc, #192]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4929      	ldr	r1, [pc, #164]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	4921      	ldr	r1, [pc, #132]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	491a      	ldr	r1, [pc, #104]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	4912      	ldr	r1, [pc, #72]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	490b      	ldr	r1, [pc, #44]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3748      	adds	r7, #72	; 0x48
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000

08002d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e09d      	b.n	8002e92 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d66:	d009      	beq.n	8002d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
 8002d6e:	e005      	b.n	8002d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd fd32 	bl	8000800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dbc:	d902      	bls.n	8002dc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e002      	b.n	8002dca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002dd2:	d007      	beq.n	8002de4 <HAL_SPI_Init+0xa0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	ea42 0103 	orr.w	r1, r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	f003 0204 	and.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e60:	ea42 0103 	orr.w	r1, r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e049      	b.n	8002f40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f841 	bl	8002f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f000 f9db 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d001      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e03b      	b.n	8002fec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d009      	beq.n	8002faa <HAL_TIM_Base_Start_IT+0x4e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9e:	d004      	beq.n	8002faa <HAL_TIM_Base_Start_IT+0x4e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <HAL_TIM_Base_Start_IT+0xa0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d115      	bne.n	8002fd6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b13      	ldr	r3, [pc, #76]	; (8003000 <HAL_TIM_Base_Start_IT+0xa4>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b06      	cmp	r3, #6
 8002fba:	d015      	beq.n	8002fe8 <HAL_TIM_Base_Start_IT+0x8c>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc2:	d011      	beq.n	8002fe8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd4:	e008      	b.n	8002fe8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40014000 	.word	0x40014000
 8003000:	00010007 	.word	0x00010007

08003004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d122      	bne.n	8003060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d11b      	bne.n	8003060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0202 	mvn.w	r2, #2
 8003030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f905 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f8f7 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f908 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d122      	bne.n	80030b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b04      	cmp	r3, #4
 800307a:	d11b      	bne.n	80030b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0204 	mvn.w	r2, #4
 8003084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8db 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8cd 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8de 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d122      	bne.n	8003108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d11b      	bne.n	8003108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0208 	mvn.w	r2, #8
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2204      	movs	r2, #4
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8b1 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8a3 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f8b4 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b10      	cmp	r3, #16
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b10      	cmp	r3, #16
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0210 	mvn.w	r2, #16
 800312c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2208      	movs	r2, #8
 8003132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f887 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f879 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f88a 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0201 	mvn.w	r2, #1
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fa6a 	bl	800065c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d107      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8e8 	bl	8003384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c2:	d10e      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d107      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f8db 	bl	8003398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d10e      	bne.n	800320e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d107      	bne.n	800320e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f838 	bl	800327e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b20      	cmp	r3, #32
 800321a:	d10e      	bne.n	800323a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b20      	cmp	r3, #32
 8003228:	d107      	bne.n	800323a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0220 	mvn.w	r2, #32
 8003232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f89b 	bl	8003370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a2e      	ldr	r2, [pc, #184]	; (8003360 <TIM_Base_SetConfig+0xcc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_Base_SetConfig+0x20>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d108      	bne.n	80032c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <TIM_Base_SetConfig+0xcc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00f      	beq.n	80032ee <TIM_Base_SetConfig+0x5a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x5a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a22      	ldr	r2, [pc, #136]	; (8003364 <TIM_Base_SetConfig+0xd0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x5a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a21      	ldr	r2, [pc, #132]	; (8003368 <TIM_Base_SetConfig+0xd4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x5a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a20      	ldr	r2, [pc, #128]	; (800336c <TIM_Base_SetConfig+0xd8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <TIM_Base_SetConfig+0xcc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00b      	beq.n	8003344 <TIM_Base_SetConfig+0xb0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <TIM_Base_SetConfig+0xd0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d007      	beq.n	8003344 <TIM_Base_SetConfig+0xb0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <TIM_Base_SetConfig+0xd4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0xb0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <TIM_Base_SetConfig+0xd8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	615a      	str	r2, [r3, #20]
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e040      	b.n	8003440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fa8e 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2224      	movs	r2, #36	; 0x24
 80033d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f82c 	bl	8003448 <UART_SetConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e022      	b.n	8003440 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f958 	bl	80036b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f9df 	bl	80037fc <UART_CheckIdleState>
 800343e:	4603      	mov	r3, r0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b8b      	ldr	r3, [pc, #556]	; (80036a0 <UART_SetConfig+0x258>)
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	430b      	orrs	r3, r1
 800347e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a79      	ldr	r2, [pc, #484]	; (80036a4 <UART_SetConfig+0x25c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d121      	bne.n	8003508 <UART_SetConfig+0xc0>
 80034c4:	4b78      	ldr	r3, [pc, #480]	; (80036a8 <UART_SetConfig+0x260>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d817      	bhi.n	8003500 <UART_SetConfig+0xb8>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0x90>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034f5 	.word	0x080034f5
 80034e0:	080034fb 	.word	0x080034fb
 80034e4:	080034ef 	.word	0x080034ef
 80034e8:	2300      	movs	r3, #0
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e01e      	b.n	800352c <UART_SetConfig+0xe4>
 80034ee:	2302      	movs	r3, #2
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e01b      	b.n	800352c <UART_SetConfig+0xe4>
 80034f4:	2304      	movs	r3, #4
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e018      	b.n	800352c <UART_SetConfig+0xe4>
 80034fa:	2308      	movs	r3, #8
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e015      	b.n	800352c <UART_SetConfig+0xe4>
 8003500:	2310      	movs	r3, #16
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	bf00      	nop
 8003506:	e011      	b.n	800352c <UART_SetConfig+0xe4>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a67      	ldr	r2, [pc, #412]	; (80036ac <UART_SetConfig+0x264>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d102      	bne.n	8003518 <UART_SetConfig+0xd0>
 8003512:	2300      	movs	r3, #0
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e009      	b.n	800352c <UART_SetConfig+0xe4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a64      	ldr	r2, [pc, #400]	; (80036b0 <UART_SetConfig+0x268>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d102      	bne.n	8003528 <UART_SetConfig+0xe0>
 8003522:	2300      	movs	r3, #0
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e001      	b.n	800352c <UART_SetConfig+0xe4>
 8003528:	2310      	movs	r3, #16
 800352a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003534:	d15c      	bne.n	80035f0 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d828      	bhi.n	800358e <UART_SetConfig+0x146>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0xfc>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003569 	.word	0x08003569
 8003548:	08003571 	.word	0x08003571
 800354c:	08003579 	.word	0x08003579
 8003550:	0800358f 	.word	0x0800358f
 8003554:	0800357f 	.word	0x0800357f
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800358f 	.word	0x0800358f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7ff f9e4 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 800356c:	61b8      	str	r0, [r7, #24]
        break;
 800356e:	e013      	b.n	8003598 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7ff fa02 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8003574:	61b8      	str	r0, [r7, #24]
        break;
 8003576:	e00f      	b.n	8003598 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b4e      	ldr	r3, [pc, #312]	; (80036b4 <UART_SetConfig+0x26c>)
 800357a:	61bb      	str	r3, [r7, #24]
        break;
 800357c:	e00c      	b.n	8003598 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7ff f963 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8003582:	61b8      	str	r0, [r7, #24]
        break;
 8003584:	e008      	b.n	8003598 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e004      	b.n	8003598 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	77bb      	strb	r3, [r7, #30]
        break;
 8003596:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d074      	beq.n	8003688 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	005a      	lsls	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	441a      	add	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d916      	bls.n	80035ea <UART_SetConfig+0x1a2>
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c2:	d212      	bcs.n	80035ea <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f023 030f 	bic.w	r3, r3, #15
 80035cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	b29a      	uxth	r2, r3
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	4313      	orrs	r3, r2
 80035de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	89fa      	ldrh	r2, [r7, #14]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	e04e      	b.n	8003688 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	77bb      	strb	r3, [r7, #30]
 80035ee:	e04b      	b.n	8003688 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035f0:	7ffb      	ldrb	r3, [r7, #31]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d827      	bhi.n	8003646 <UART_SetConfig+0x1fe>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0x1b4>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003621 	.word	0x08003621
 8003600:	08003629 	.word	0x08003629
 8003604:	08003631 	.word	0x08003631
 8003608:	08003647 	.word	0x08003647
 800360c:	08003637 	.word	0x08003637
 8003610:	08003647 	.word	0x08003647
 8003614:	08003647 	.word	0x08003647
 8003618:	08003647 	.word	0x08003647
 800361c:	0800363f 	.word	0x0800363f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003620:	f7ff f988 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8003624:	61b8      	str	r0, [r7, #24]
        break;
 8003626:	e013      	b.n	8003650 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7ff f9a6 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 800362c:	61b8      	str	r0, [r7, #24]
        break;
 800362e:	e00f      	b.n	8003650 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003630:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <UART_SetConfig+0x26c>)
 8003632:	61bb      	str	r3, [r7, #24]
        break;
 8003634:	e00c      	b.n	8003650 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003636:	f7ff f907 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 800363a:	61b8      	str	r0, [r7, #24]
        break;
 800363c:	e008      	b.n	8003650 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	61bb      	str	r3, [r7, #24]
        break;
 8003644:	e004      	b.n	8003650 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	77bb      	strb	r3, [r7, #30]
        break;
 800364e:	bf00      	nop
    }

    if (pclk != 0U)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	085a      	lsrs	r2, r3, #1
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	441a      	add	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	b29b      	uxth	r3, r3
 800366a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d908      	bls.n	8003684 <UART_SetConfig+0x23c>
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d204      	bcs.n	8003684 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	e001      	b.n	8003688 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003694:	7fbb      	ldrb	r3, [r7, #30]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	efff69f3 	.word	0xefff69f3
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40004400 	.word	0x40004400
 80036b0:	40004800 	.word	0x40004800
 80036b4:	007a1200 	.word	0x007a1200

080036b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01a      	beq.n	80037ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b6:	d10a      	bne.n	80037ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]
  }
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af02      	add	r7, sp, #8
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800380c:	f7fd f990 	bl	8000b30 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b08      	cmp	r3, #8
 800381e:	d10e      	bne.n	800383e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f82d 	bl	800388e <UART_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e023      	b.n	8003886 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d10e      	bne.n	800386a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800384c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f817 	bl	800388e <UART_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e00d      	b.n	8003886 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389e:	e05e      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a6:	d05a      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a8:	f7fd f942 	bl	8000b30 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <UART_WaitOnFlagUntilTimeout+0x30>
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d11b      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e043      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d02c      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003912:	d124      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800391c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800392c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d091      	beq.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398e:	f3ef 8305 	mrs	r3, IPSR
 8003992:	60bb      	str	r3, [r7, #8]
  return(result);
 8003994:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	607b      	str	r3, [r7, #4]
  return(result);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <osKernelInitialize+0x32>
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <osKernelInitialize+0x64>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d109      	bne.n	80039c2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039ae:	f3ef 8311 	mrs	r3, BASEPRI
 80039b2:	603b      	str	r3, [r7, #0]
  return(result);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80039ba:	f06f 0305 	mvn.w	r3, #5
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e00c      	b.n	80039dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <osKernelInitialize+0x64>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <osKernelInitialize+0x64>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e002      	b.n	80039dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80039dc:	68fb      	ldr	r3, [r7, #12]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	2000002c 	.word	0x2000002c

080039f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f6:	f3ef 8305 	mrs	r3, IPSR
 80039fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80039fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a02:	f3ef 8310 	mrs	r3, PRIMASK
 8003a06:	607b      	str	r3, [r7, #4]
  return(result);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <osKernelStart+0x32>
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <osKernelStart+0x64>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d109      	bne.n	8003a2a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a16:	f3ef 8311 	mrs	r3, BASEPRI
 8003a1a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003a22:	f06f 0305 	mvn.w	r3, #5
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e00e      	b.n	8003a48 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <osKernelStart+0x64>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <osKernelStart+0x64>)
 8003a34:	2202      	movs	r2, #2
 8003a36:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003a38:	f001 f808 	bl	8004a4c <vTaskStartScheduler>
      stat = osOK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e002      	b.n	8003a48 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a48:	68fb      	ldr	r3, [r7, #12]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	2000002c 	.word	0x2000002c

08003a58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b092      	sub	sp, #72	; 0x48
 8003a5c:	af04      	add	r7, sp, #16
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a68:	f3ef 8305 	mrs	r3, IPSR
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 8094 	bne.w	8003b9e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a76:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7a:	623b      	str	r3, [r7, #32]
  return(result);
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 808d 	bne.w	8003b9e <osThreadNew+0x146>
 8003a84:	4b48      	ldr	r3, [pc, #288]	; (8003ba8 <osThreadNew+0x150>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d106      	bne.n	8003a9a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a90:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f040 8082 	bne.w	8003b9e <osThreadNew+0x146>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d07e      	beq.n	8003b9e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003aa4:	2318      	movs	r3, #24
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003aac:	f107 031b 	add.w	r3, r7, #27
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d045      	beq.n	8003b4a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <osThreadNew+0x74>
        name = attr->name;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <osThreadNew+0x9a>
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	2b38      	cmp	r3, #56	; 0x38
 8003ae4:	d805      	bhi.n	8003af2 <osThreadNew+0x9a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <osThreadNew+0x9e>
        return (NULL);
 8003af2:	2300      	movs	r3, #0
 8003af4:	e054      	b.n	8003ba0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00e      	beq.n	8003b2c <osThreadNew+0xd4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b5b      	cmp	r3, #91	; 0x5b
 8003b14:	d90a      	bls.n	8003b2c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <osThreadNew+0xd4>
        mem = 1;
 8003b26:	2301      	movs	r3, #1
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2a:	e010      	b.n	8003b4e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10c      	bne.n	8003b4e <osThreadNew+0xf6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d108      	bne.n	8003b4e <osThreadNew+0xf6>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <osThreadNew+0xf6>
          mem = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b48:	e001      	b.n	8003b4e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d110      	bne.n	8003b76 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b5c:	9202      	str	r2, [sp, #8]
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fdda 	bl	8004724 <xTaskCreateStatic>
 8003b70:	4603      	mov	r3, r0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e013      	b.n	8003b9e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d110      	bne.n	8003b9e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fe21 	bl	80047d6 <xTaskCreate>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d001      	beq.n	8003b9e <osThreadNew+0x146>
          hTask = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b9e:	697b      	ldr	r3, [r7, #20]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3738      	adds	r7, #56	; 0x38
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	2000002c 	.word	0x2000002c

08003bac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <vApplicationGetIdleTaskMemory+0x30>)
 8003bc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000030 	.word	0x20000030
 8003bdc:	2000008c 	.word	0x2000008c

08003be0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <vApplicationGetTimerTaskMemory+0x2c>)
 8003bf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <vApplicationGetTimerTaskMemory+0x30>)
 8003bf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	2000028c 	.word	0x2000028c
 8003c10:	200002e8 	.word	0x200002e8

08003c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f103 0208 	add.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f103 0208 	add.w	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f103 0208 	add.w	r2, r3, #8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ccc:	d103      	bne.n	8003cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e00c      	b.n	8003cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e002      	b.n	8003ce4 <vListInsert+0x2e>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d2f6      	bcs.n	8003cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6852      	ldr	r2, [r2, #4]
 8003d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d103      	bne.n	8003d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	1e5a      	subs	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	e7fe      	b.n	8003da2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003da4:	f001 ffa2 	bl	8005cec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	441a      	add	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	22ff      	movs	r2, #255	; 0xff
 8003de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	22ff      	movs	r2, #255	; 0xff
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d114      	bne.n	8003e24 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01a      	beq.n	8003e38 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3310      	adds	r3, #16
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 f8a6 	bl	8004f58 <xTaskRemoveFromEventList>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d012      	beq.n	8003e38 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <xQueueGenericReset+0xcc>)
 8003e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	e009      	b.n	8003e38 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3310      	adds	r3, #16
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fef3 	bl	8003c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3324      	adds	r3, #36	; 0x24
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff feee 	bl	8003c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e38:	f001 ff86 	bl	8005d48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e3c:	2301      	movs	r3, #1
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08e      	sub	sp, #56	; 0x38
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <xQueueGenericCreateStatic+0x28>
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e72:	e7fe      	b.n	8003e72 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <xQueueGenericCreateStatic+0x42>
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8c:	e7fe      	b.n	8003e8c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <xQueueGenericCreateStatic+0x4e>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <xQueueGenericCreateStatic+0x52>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <xQueueGenericCreateStatic+0x54>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <xQueueGenericCreateStatic+0x6c>
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	e7fe      	b.n	8003eb6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <xQueueGenericCreateStatic+0x78>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <xQueueGenericCreateStatic+0x7c>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <xQueueGenericCreateStatic+0x7e>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <xQueueGenericCreateStatic+0x96>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e7fe      	b.n	8003ee0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ee2:	2350      	movs	r3, #80	; 0x50
 8003ee4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b50      	cmp	r3, #80	; 0x50
 8003eea:	d009      	beq.n	8003f00 <xQueueGenericCreateStatic+0xb4>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e7fe      	b.n	8003efe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00d      	beq.n	8003f26 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f805 	bl	8003f30 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3730      	adds	r7, #48	; 0x30
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	e002      	b.n	8003f52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f5e:	2101      	movs	r1, #1
 8003f60:	69b8      	ldr	r0, [r7, #24]
 8003f62:	f7ff ff0b 	bl	8003d7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08e      	sub	sp, #56	; 0x38
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f86:	2300      	movs	r3, #0
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <xQueueGenericSend+0x30>
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa6:	e7fe      	b.n	8003fa6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <xQueueGenericSend+0x3e>
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <xQueueGenericSend+0x42>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <xQueueGenericSend+0x44>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <xQueueGenericSend+0x5c>
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	e7fe      	b.n	8003fd2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d103      	bne.n	8003fe2 <xQueueGenericSend+0x6a>
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <xQueueGenericSend+0x6e>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <xQueueGenericSend+0x70>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <xQueueGenericSend+0x88>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	623b      	str	r3, [r7, #32]
 8003ffe:	e7fe      	b.n	8003ffe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004000:	f001 f966 	bl	80052d0 <xTaskGetSchedulerState>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <xQueueGenericSend+0x98>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <xQueueGenericSend+0x9c>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <xQueueGenericSend+0x9e>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <xQueueGenericSend+0xb6>
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	e7fe      	b.n	800402c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800402e:	f001 fe5d 	bl	8005cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	429a      	cmp	r2, r3
 800403c:	d302      	bcc.n	8004044 <xQueueGenericSend+0xcc>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d129      	bne.n	8004098 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800404a:	f000 f9ff 	bl	800444c <prvCopyDataToQueue>
 800404e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	3324      	adds	r3, #36	; 0x24
 800405c:	4618      	mov	r0, r3
 800405e:	f000 ff7b 	bl	8004f58 <xTaskRemoveFromEventList>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004068:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <xQueueGenericSend+0x1f0>)
 800406a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	e00a      	b.n	8004090 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004080:	4b39      	ldr	r3, [pc, #228]	; (8004168 <xQueueGenericSend+0x1f0>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004090:	f001 fe5a 	bl	8005d48 <vPortExitCritical>
				return pdPASS;
 8004094:	2301      	movs	r3, #1
 8004096:	e063      	b.n	8004160 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800409e:	f001 fe53 	bl	8005d48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e05c      	b.n	8004160 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 ffb3 	bl	800501c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040ba:	f001 fe45 	bl	8005d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040be:	f000 fd29 	bl	8004b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040c2:	f001 fe13 	bl	8005cec <vPortEnterCritical>
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d2:	d103      	bne.n	80040dc <xQueueGenericSend+0x164>
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040e2:	b25b      	sxtb	r3, r3
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e8:	d103      	bne.n	80040f2 <xQueueGenericSend+0x17a>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f2:	f001 fe29 	bl	8005d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040f6:	1d3a      	adds	r2, r7, #4
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 ffa2 	bl	8005048 <xTaskCheckForTimeOut>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d124      	bne.n	8004154 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800410a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800410c:	f000 fa96 	bl	800463c <prvIsQueueFull>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	3310      	adds	r3, #16
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fecc 	bl	8004ebc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004126:	f000 fa21 	bl	800456c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800412a:	f000 fd01 	bl	8004b30 <xTaskResumeAll>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	f47f af7c 	bne.w	800402e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <xQueueGenericSend+0x1f0>)
 8004138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	e772      	b.n	800402e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800414a:	f000 fa0f 	bl	800456c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800414e:	f000 fcef 	bl	8004b30 <xTaskResumeAll>
 8004152:	e76c      	b.n	800402e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004156:	f000 fa09 	bl	800456c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800415a:	f000 fce9 	bl	8004b30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800415e:	2300      	movs	r3, #0
		}
	}
}
 8004160:	4618      	mov	r0, r3
 8004162:	3738      	adds	r7, #56	; 0x38
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08e      	sub	sp, #56	; 0x38
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <xQueueGenericSendFromISR+0x2c>
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e7fe      	b.n	8004196 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSendFromISR+0x3a>
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <xQueueGenericSendFromISR+0x3e>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericSendFromISR+0x40>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <xQueueGenericSendFromISR+0x58>
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	e7fe      	b.n	80041c2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSendFromISR+0x66>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <xQueueGenericSendFromISR+0x6a>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <xQueueGenericSendFromISR+0x6c>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <xQueueGenericSendFromISR+0x84>
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e7fe      	b.n	80041ee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041f0:	f001 fe58 	bl	8005ea4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041f4:	f3ef 8211 	mrs	r2, BASEPRI
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	61ba      	str	r2, [r7, #24]
 800420a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800420c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <xQueueGenericSendFromISR+0xb6>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d12c      	bne.n	800427c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004232:	f000 f90b 	bl	800444c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004236:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423e:	d112      	bne.n	8004266 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d016      	beq.n	8004276 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	3324      	adds	r3, #36	; 0x24
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fe83 	bl	8004f58 <xTaskRemoveFromEventList>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e007      	b.n	8004276 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004266:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800426a:	3301      	adds	r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	b25a      	sxtb	r2, r3
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004276:	2301      	movs	r3, #1
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800427a:	e001      	b.n	8004280 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800427c:	2300      	movs	r3, #0
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800428c:	4618      	mov	r0, r3
 800428e:	3738      	adds	r7, #56	; 0x38
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08c      	sub	sp, #48	; 0x30
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <xQueueReceive+0x2e>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	623b      	str	r3, [r7, #32]
 80042c0:	e7fe      	b.n	80042c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <xQueueReceive+0x3c>
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <xQueueReceive+0x40>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <xQueueReceive+0x42>
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <xQueueReceive+0x5a>
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	e7fe      	b.n	80042ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ee:	f000 ffef 	bl	80052d0 <xTaskGetSchedulerState>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <xQueueReceive+0x6a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <xQueueReceive+0x6e>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueueReceive+0x70>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <xQueueReceive+0x88>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e7fe      	b.n	800431a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800431c:	f001 fce6 	bl	8005cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01f      	beq.n	800436c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004330:	f000 f8f6 	bl	8004520 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	1e5a      	subs	r2, r3, #1
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00f      	beq.n	8004364 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	3310      	adds	r3, #16
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fe05 	bl	8004f58 <xTaskRemoveFromEventList>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004354:	4b3c      	ldr	r3, [pc, #240]	; (8004448 <xQueueReceive+0x1b4>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004364:	f001 fcf0 	bl	8005d48 <vPortExitCritical>
				return pdPASS;
 8004368:	2301      	movs	r3, #1
 800436a:	e069      	b.n	8004440 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004372:	f001 fce9 	bl	8005d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004376:	2300      	movs	r3, #0
 8004378:	e062      	b.n	8004440 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004380:	f107 0310 	add.w	r3, r7, #16
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe49 	bl	800501c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800438a:	2301      	movs	r3, #1
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800438e:	f001 fcdb 	bl	8005d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004392:	f000 fbbf 	bl	8004b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004396:	f001 fca9 	bl	8005cec <vPortEnterCritical>
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a6:	d103      	bne.n	80043b0 <xQueueReceive+0x11c>
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b6:	b25b      	sxtb	r3, r3
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043bc:	d103      	bne.n	80043c6 <xQueueReceive+0x132>
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c6:	f001 fcbf 	bl	8005d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ca:	1d3a      	adds	r2, r7, #4
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fe38 	bl	8005048 <xTaskCheckForTimeOut>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d123      	bne.n	8004426 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e0:	f000 f916 	bl	8004610 <prvIsQueueEmpty>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d017      	beq.n	800441a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	3324      	adds	r3, #36	; 0x24
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fd62 	bl	8004ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043fa:	f000 f8b7 	bl	800456c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043fe:	f000 fb97 	bl	8004b30 <xTaskResumeAll>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d189      	bne.n	800431c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <xQueueReceive+0x1b4>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	e780      	b.n	800431c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800441a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441c:	f000 f8a6 	bl	800456c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004420:	f000 fb86 	bl	8004b30 <xTaskResumeAll>
 8004424:	e77a      	b.n	800431c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004428:	f000 f8a0 	bl	800456c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800442c:	f000 fb80 	bl	8004b30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004432:	f000 f8ed 	bl	8004610 <prvIsQueueEmpty>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	f43f af6f 	beq.w	800431c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800443e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004440:	4618      	mov	r0, r3
 8004442:	3730      	adds	r7, #48	; 0x30
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10d      	bne.n	8004486 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d14d      	bne.n	800450e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 ff48 	bl	800530c <xTaskPriorityDisinherit>
 800447c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	e043      	b.n	800450e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d119      	bne.n	80044c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6898      	ldr	r0, [r3, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	461a      	mov	r2, r3
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	f001 ff3c 	bl	8006314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d32b      	bcc.n	800450e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	e026      	b.n	800450e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68d8      	ldr	r0, [r3, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	461a      	mov	r2, r3
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	f001 ff22 	bl	8006314 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	425b      	negs	r3, r3
 80044da:	441a      	add	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d207      	bcs.n	80044fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	425b      	negs	r3, r3
 80044f6:	441a      	add	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d105      	bne.n	800450e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3b01      	subs	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004516:	697b      	ldr	r3, [r7, #20]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d018      	beq.n	8004564 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	441a      	add	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	d303      	bcc.n	8004554 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68d9      	ldr	r1, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	461a      	mov	r2, r3
 800455e:	6838      	ldr	r0, [r7, #0]
 8004560:	f001 fed8 	bl	8006314 <memcpy>
	}
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004574:	f001 fbba 	bl	8005cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004580:	e011      	b.n	80045a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d012      	beq.n	80045b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3324      	adds	r3, #36	; 0x24
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fce2 	bl	8004f58 <xTaskRemoveFromEventList>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800459a:	f000 fdb5 	bl	8005108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dce9      	bgt.n	8004582 <prvUnlockQueue+0x16>
 80045ae:	e000      	b.n	80045b2 <prvUnlockQueue+0x46>
					break;
 80045b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	22ff      	movs	r2, #255	; 0xff
 80045b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045ba:	f001 fbc5 	bl	8005d48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045be:	f001 fb95 	bl	8005cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045ca:	e011      	b.n	80045f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3310      	adds	r3, #16
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fcbd 	bl	8004f58 <xTaskRemoveFromEventList>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045e4:	f000 fd90 	bl	8005108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045e8:	7bbb      	ldrb	r3, [r7, #14]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dce9      	bgt.n	80045cc <prvUnlockQueue+0x60>
 80045f8:	e000      	b.n	80045fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	22ff      	movs	r2, #255	; 0xff
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004604:	f001 fba0 	bl	8005d48 <vPortExitCritical>
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004618:	f001 fb68 	bl	8005cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e001      	b.n	800462e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800462e:	f001 fb8b 	bl	8005d48 <vPortExitCritical>

	return xReturn;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004644:	f001 fb52 	bl	8005cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004650:	429a      	cmp	r2, r3
 8004652:	d102      	bne.n	800465a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004654:	2301      	movs	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e001      	b.n	800465e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800465e:	f001 fb73 	bl	8005d48 <vPortExitCritical>

	return xReturn;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e014      	b.n	80046a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800467c:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <vQueueAddToRegistry+0x4c>)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004688:	490b      	ldr	r1, [pc, #44]	; (80046b8 <vQueueAddToRegistry+0x4c>)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <vQueueAddToRegistry+0x4c>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800469e:	e005      	b.n	80046ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b07      	cmp	r3, #7
 80046aa:	d9e7      	bls.n	800467c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	20001b70 	.word	0x20001b70

080046bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046cc:	f001 fb0e 	bl	8005cec <vPortEnterCritical>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046dc:	d103      	bne.n	80046e6 <vQueueWaitForMessageRestricted+0x2a>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f2:	d103      	bne.n	80046fc <vQueueWaitForMessageRestricted+0x40>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046fc:	f001 fb24 	bl	8005d48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3324      	adds	r3, #36	; 0x24
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fbf7 	bl	8004f04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff ff28 	bl	800456c <prvUnlockQueue>
	}
 800471c:	bf00      	nop
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08e      	sub	sp, #56	; 0x38
 8004728:	af04      	add	r7, sp, #16
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <xTaskCreateStatic+0x28>
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	623b      	str	r3, [r7, #32]
 800474a:	e7fe      	b.n	800474a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <xTaskCreateStatic+0x42>
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	e7fe      	b.n	8004764 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004766:	235c      	movs	r3, #92	; 0x5c
 8004768:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b5c      	cmp	r3, #92	; 0x5c
 800476e:	d009      	beq.n	8004784 <xTaskCreateStatic+0x60>
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e7fe      	b.n	8004782 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01e      	beq.n	80047c8 <xTaskCreateStatic+0xa4>
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01b      	beq.n	80047c8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047a2:	2300      	movs	r3, #0
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	9302      	str	r3, [sp, #8]
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f850 	bl	8004860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047c2:	f000 f8d3 	bl	800496c <prvAddNewTaskToReadyList>
 80047c6:	e001      	b.n	80047cc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047cc:	697b      	ldr	r3, [r7, #20]
	}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3728      	adds	r7, #40	; 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08c      	sub	sp, #48	; 0x30
 80047da:	af04      	add	r7, sp, #16
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 fb98 	bl	8005f20 <pvPortMalloc>
 80047f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00e      	beq.n	8004816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80047f8:	205c      	movs	r0, #92	; 0x5c
 80047fa:	f001 fb91 	bl	8005f20 <pvPortMalloc>
 80047fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
 800480c:	e005      	b.n	800481a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f001 fc48 	bl	80060a4 <vPortFree>
 8004814:	e001      	b.n	800481a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004828:	88fa      	ldrh	r2, [r7, #6]
 800482a:	2300      	movs	r3, #0
 800482c:	9303      	str	r3, [sp, #12]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	9302      	str	r3, [sp, #8]
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f80e 	bl	8004860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004844:	69f8      	ldr	r0, [r7, #28]
 8004846:	f000 f891 	bl	800496c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e002      	b.n	8004856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004856:	69bb      	ldr	r3, [r7, #24]
	}
 8004858:	4618      	mov	r0, r3
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	461a      	mov	r2, r3
 8004878:	21a5      	movs	r1, #165	; 0xa5
 800487a:	f001 fd56 	bl	800632a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004888:	3b01      	subs	r3, #1
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <prvInitialiseNewTask+0x56>
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	e7fe      	b.n	80048b4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	e012      	b.n	80048e2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	7819      	ldrb	r1, [r3, #0]
 80048c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	3334      	adds	r3, #52	; 0x34
 80048cc:	460a      	mov	r2, r1
 80048ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3301      	adds	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d9e9      	bls.n	80048bc <prvInitialiseNewTask+0x5c>
 80048e8:	e000      	b.n	80048ec <prvInitialiseNewTask+0x8c>
		{
			break;
 80048ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	2b37      	cmp	r3, #55	; 0x37
 80048f8:	d901      	bls.n	80048fe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048fa:	2337      	movs	r3, #55	; 0x37
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004908:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	2200      	movs	r2, #0
 800490e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff f99d 	bl	8003c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	3318      	adds	r3, #24
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f998 	bl	8003c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004928:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004938:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2200      	movs	r2, #0
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	69b8      	ldr	r0, [r7, #24]
 800494e:	f001 f8a7 	bl	8005aa0 <pxPortInitialiseStack>
 8004952:	4602      	mov	r2, r0
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004962:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004964:	bf00      	nop
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004974:	f001 f9ba 	bl	8005cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004978:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <prvAddNewTaskToReadyList+0xc4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <prvAddNewTaskToReadyList+0xc4>)
 8004980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004982:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <prvAddNewTaskToReadyList+0xc4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d110      	bne.n	80049ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004998:	f000 fbda 	bl	8005150 <prvInitialiseTaskLists>
 800499c:	e00d      	b.n	80049ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <prvAddNewTaskToReadyList+0xcc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d802      	bhi.n	80049ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <prvAddNewTaskToReadyList+0xd0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <prvAddNewTaskToReadyList+0xd0>)
 80049c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049c4:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <prvAddNewTaskToReadyList+0xd0>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <prvAddNewTaskToReadyList+0xd4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d903      	bls.n	80049e0 <prvAddNewTaskToReadyList+0x74>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <prvAddNewTaskToReadyList+0xd4>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <prvAddNewTaskToReadyList+0xd8>)
 80049ee:	441a      	add	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7ff f939 	bl	8003c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049fc:	f001 f9a4 	bl	8005d48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <prvAddNewTaskToReadyList+0xcc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d207      	bcs.n	8004a26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <prvAddNewTaskToReadyList+0xdc>)
 8004a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000bbc 	.word	0x20000bbc
 8004a34:	200006e8 	.word	0x200006e8
 8004a38:	20000bc8 	.word	0x20000bc8
 8004a3c:	20000bd8 	.word	0x20000bd8
 8004a40:	20000bc4 	.word	0x20000bc4
 8004a44:	200006ec 	.word	0x200006ec
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a5a:	463a      	mov	r2, r7
 8004a5c:	1d39      	adds	r1, r7, #4
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff f8a2 	bl	8003bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	9202      	str	r2, [sp, #8]
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	2300      	movs	r3, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2300      	movs	r3, #0
 8004a78:	460a      	mov	r2, r1
 8004a7a:	4920      	ldr	r1, [pc, #128]	; (8004afc <vTaskStartScheduler+0xb0>)
 8004a7c:	4820      	ldr	r0, [pc, #128]	; (8004b00 <vTaskStartScheduler+0xb4>)
 8004a7e:	f7ff fe51 	bl	8004724 <xTaskCreateStatic>
 8004a82:	4602      	mov	r2, r0
 8004a84:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <vTaskStartScheduler+0xb8>)
 8004a86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <vTaskStartScheduler+0xb8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e001      	b.n	8004a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d102      	bne.n	8004aa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004aa0:	f000 fcf4 	bl	800548c <xTimerCreateTimerTask>
 8004aa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d115      	bne.n	8004ad8 <vTaskStartScheduler+0x8c>
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <vTaskStartScheduler+0xbc>)
 8004ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ac4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <vTaskStartScheduler+0xc0>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <vTaskStartScheduler+0xc4>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ad2:	f001 f86d 	bl	8005bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ad6:	e00d      	b.n	8004af4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ade:	d109      	bne.n	8004af4 <vTaskStartScheduler+0xa8>
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	e7fe      	b.n	8004af2 <vTaskStartScheduler+0xa6>
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	0800636c 	.word	0x0800636c
 8004b00:	08005121 	.word	0x08005121
 8004b04:	20000be0 	.word	0x20000be0
 8004b08:	20000bdc 	.word	0x20000bdc
 8004b0c:	20000bc8 	.word	0x20000bc8
 8004b10:	20000bc0 	.word	0x20000bc0

08004b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <vTaskSuspendAll+0x18>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	4a03      	ldr	r2, [pc, #12]	; (8004b2c <vTaskSuspendAll+0x18>)
 8004b20:	6013      	str	r3, [r2, #0]
}
 8004b22:	bf00      	nop
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20000be4 	.word	0x20000be4

08004b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b3e:	4b41      	ldr	r3, [pc, #260]	; (8004c44 <xTaskResumeAll+0x114>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <xTaskResumeAll+0x2a>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	e7fe      	b.n	8004b58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b5a:	f001 f8c7 	bl	8005cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b5e:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <xTaskResumeAll+0x114>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	4a37      	ldr	r2, [pc, #220]	; (8004c44 <xTaskResumeAll+0x114>)
 8004b66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b68:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <xTaskResumeAll+0x114>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d162      	bne.n	8004c36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <xTaskResumeAll+0x118>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d05e      	beq.n	8004c36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b78:	e02f      	b.n	8004bda <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004b7a:	4b34      	ldr	r3, [pc, #208]	; (8004c4c <xTaskResumeAll+0x11c>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3318      	adds	r3, #24
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff f8ce 	bl	8003d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff f8c9 	bl	8003d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <xTaskResumeAll+0x120>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d903      	bls.n	8004baa <xTaskResumeAll+0x7a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4a2a      	ldr	r2, [pc, #168]	; (8004c50 <xTaskResumeAll+0x120>)
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4a27      	ldr	r2, [pc, #156]	; (8004c54 <xTaskResumeAll+0x124>)
 8004bb8:	441a      	add	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f7ff f854 	bl	8003c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <xTaskResumeAll+0x128>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004bd4:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <xTaskResumeAll+0x12c>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bda:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <xTaskResumeAll+0x11c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1cb      	bne.n	8004b7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004be8:	f000 fb4c 	bl	8005284 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <xTaskResumeAll+0x130>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d010      	beq.n	8004c1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bf8:	f000 f846 	bl	8004c88 <xTaskIncrementTick>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004c02:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <xTaskResumeAll+0x12c>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f1      	bne.n	8004bf8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <xTaskResumeAll+0x130>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <xTaskResumeAll+0x12c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c22:	2301      	movs	r3, #1
 8004c24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <xTaskResumeAll+0x134>)
 8004c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c36:	f001 f887 	bl	8005d48 <vPortExitCritical>

	return xAlreadyYielded;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000be4 	.word	0x20000be4
 8004c48:	20000bbc 	.word	0x20000bbc
 8004c4c:	20000b7c 	.word	0x20000b7c
 8004c50:	20000bc4 	.word	0x20000bc4
 8004c54:	200006ec 	.word	0x200006ec
 8004c58:	200006e8 	.word	0x200006e8
 8004c5c:	20000bd0 	.word	0x20000bd0
 8004c60:	20000bcc 	.word	0x20000bcc
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <xTaskGetTickCount+0x1c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c74:	687b      	ldr	r3, [r7, #4]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000bc0 	.word	0x20000bc0

08004c88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c92:	4b51      	ldr	r3, [pc, #324]	; (8004dd8 <xTaskIncrementTick+0x150>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 808d 	bne.w	8004db6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c9c:	4b4f      	ldr	r3, [pc, #316]	; (8004ddc <xTaskIncrementTick+0x154>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ca4:	4a4d      	ldr	r2, [pc, #308]	; (8004ddc <xTaskIncrementTick+0x154>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11f      	bne.n	8004cf0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cb0:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <xTaskIncrementTick+0x158>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <xTaskIncrementTick+0x46>
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	e7fe      	b.n	8004ccc <xTaskIncrementTick+0x44>
 8004cce:	4b44      	ldr	r3, [pc, #272]	; (8004de0 <xTaskIncrementTick+0x158>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	4b43      	ldr	r3, [pc, #268]	; (8004de4 <xTaskIncrementTick+0x15c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a41      	ldr	r2, [pc, #260]	; (8004de0 <xTaskIncrementTick+0x158>)
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4a41      	ldr	r2, [pc, #260]	; (8004de4 <xTaskIncrementTick+0x15c>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <xTaskIncrementTick+0x160>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	4a3f      	ldr	r2, [pc, #252]	; (8004de8 <xTaskIncrementTick+0x160>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	f000 faca 	bl	8005284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cf0:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <xTaskIncrementTick+0x164>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d34e      	bcc.n	8004d98 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cfa:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <xTaskIncrementTick+0x158>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <xTaskIncrementTick+0x80>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <xTaskIncrementTick+0x82>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d0e:	4b37      	ldr	r3, [pc, #220]	; (8004dec <xTaskIncrementTick+0x164>)
 8004d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d14:	601a      	str	r2, [r3, #0]
					break;
 8004d16:	e03f      	b.n	8004d98 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d18:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <xTaskIncrementTick+0x158>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d203      	bcs.n	8004d38 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d30:	4a2e      	ldr	r2, [pc, #184]	; (8004dec <xTaskIncrementTick+0x164>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6013      	str	r3, [r2, #0]
						break;
 8004d36:	e02f      	b.n	8004d98 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fff3 	bl	8003d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3318      	adds	r3, #24
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe ffea 	bl	8003d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d58:	4b25      	ldr	r3, [pc, #148]	; (8004df0 <xTaskIncrementTick+0x168>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d903      	bls.n	8004d68 <xTaskIncrementTick+0xe0>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	4a22      	ldr	r2, [pc, #136]	; (8004df0 <xTaskIncrementTick+0x168>)
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <xTaskIncrementTick+0x16c>)
 8004d76:	441a      	add	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f7fe ff75 	bl	8003c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d88:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <xTaskIncrementTick+0x170>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d3b3      	bcc.n	8004cfa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004d92:	2301      	movs	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d96:	e7b0      	b.n	8004cfa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d98:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <xTaskIncrementTick+0x170>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9e:	4915      	ldr	r1, [pc, #84]	; (8004df4 <xTaskIncrementTick+0x16c>)
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d907      	bls.n	8004dc0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e004      	b.n	8004dc0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <xTaskIncrementTick+0x174>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4a0f      	ldr	r2, [pc, #60]	; (8004dfc <xTaskIncrementTick+0x174>)
 8004dbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <xTaskIncrementTick+0x178>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004dcc:	697b      	ldr	r3, [r7, #20]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000be4 	.word	0x20000be4
 8004ddc:	20000bc0 	.word	0x20000bc0
 8004de0:	20000b74 	.word	0x20000b74
 8004de4:	20000b78 	.word	0x20000b78
 8004de8:	20000bd4 	.word	0x20000bd4
 8004dec:	20000bdc 	.word	0x20000bdc
 8004df0:	20000bc4 	.word	0x20000bc4
 8004df4:	200006ec 	.word	0x200006ec
 8004df8:	200006e8 	.word	0x200006e8
 8004dfc:	20000bcc 	.word	0x20000bcc
 8004e00:	20000bd0 	.word	0x20000bd0

08004e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e0a:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <vTaskSwitchContext+0xa4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <vTaskSwitchContext+0xa8>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e18:	e040      	b.n	8004e9c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004e1a:	4b24      	ldr	r3, [pc, #144]	; (8004eac <vTaskSwitchContext+0xa8>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e20:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <vTaskSwitchContext+0xac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e00f      	b.n	8004e48 <vTaskSwitchContext+0x44>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <vTaskSwitchContext+0x3e>
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	e7fe      	b.n	8004e40 <vTaskSwitchContext+0x3c>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	491a      	ldr	r1, [pc, #104]	; (8004eb4 <vTaskSwitchContext+0xb0>)
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0e5      	beq.n	8004e28 <vTaskSwitchContext+0x24>
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <vTaskSwitchContext+0xb0>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	605a      	str	r2, [r3, #4]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d104      	bne.n	8004e8c <vTaskSwitchContext+0x88>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <vTaskSwitchContext+0xb4>)
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <vTaskSwitchContext+0xac>)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6013      	str	r3, [r2, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000be4 	.word	0x20000be4
 8004eac:	20000bd0 	.word	0x20000bd0
 8004eb0:	20000bc4 	.word	0x20000bc4
 8004eb4:	200006ec 	.word	0x200006ec
 8004eb8:	200006e8 	.word	0x200006e8

08004ebc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <vTaskPlaceOnEventList+0x24>
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e7fe      	b.n	8004ede <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <vTaskPlaceOnEventList+0x44>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3318      	adds	r3, #24
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fe fee4 	bl	8003cb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004eee:	2101      	movs	r1, #1
 8004ef0:	6838      	ldr	r0, [r7, #0]
 8004ef2:	f000 fa77 	bl	80053e4 <prvAddCurrentTaskToDelayedList>
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200006e8 	.word	0x200006e8

08004f04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <vTaskPlaceOnEventListRestricted+0x26>
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e7fe      	b.n	8004f28 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <vTaskPlaceOnEventListRestricted+0x50>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3318      	adds	r3, #24
 8004f30:	4619      	mov	r1, r3
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7fe fe9b 	bl	8003c6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	68b8      	ldr	r0, [r7, #8]
 8004f48:	f000 fa4c 	bl	80053e4 <prvAddCurrentTaskToDelayedList>
	}
 8004f4c:	bf00      	nop
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	200006e8 	.word	0x200006e8

08004f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <xTaskRemoveFromEventList+0x2a>
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e7fe      	b.n	8004f80 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3318      	adds	r3, #24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fece 	bl	8003d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <xTaskRemoveFromEventList+0xac>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11d      	bne.n	8004fd0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fe fec5 	bl	8003d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	4b19      	ldr	r3, [pc, #100]	; (8005008 <xTaskRemoveFromEventList+0xb0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d903      	bls.n	8004fb2 <xTaskRemoveFromEventList+0x5a>
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	4a16      	ldr	r2, [pc, #88]	; (8005008 <xTaskRemoveFromEventList+0xb0>)
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4a13      	ldr	r2, [pc, #76]	; (800500c <xTaskRemoveFromEventList+0xb4>)
 8004fc0:	441a      	add	r2, r3
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f7fe fe50 	bl	8003c6e <vListInsertEnd>
 8004fce:	e005      	b.n	8004fdc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	3318      	adds	r3, #24
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	480e      	ldr	r0, [pc, #56]	; (8005010 <xTaskRemoveFromEventList+0xb8>)
 8004fd8:	f7fe fe49 	bl	8003c6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <xTaskRemoveFromEventList+0xbc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d905      	bls.n	8004ff6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <xTaskRemoveFromEventList+0xc0>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e001      	b.n	8004ffa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004ffa:	697b      	ldr	r3, [r7, #20]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000be4 	.word	0x20000be4
 8005008:	20000bc4 	.word	0x20000bc4
 800500c:	200006ec 	.word	0x200006ec
 8005010:	20000b7c 	.word	0x20000b7c
 8005014:	200006e8 	.word	0x200006e8
 8005018:	20000bd0 	.word	0x20000bd0

0800501c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <vTaskInternalSetTimeOutState+0x24>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <vTaskInternalSetTimeOutState+0x28>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	605a      	str	r2, [r3, #4]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000bd4 	.word	0x20000bd4
 8005044:	20000bc0 	.word	0x20000bc0

08005048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d109      	bne.n	800506c <xTaskCheckForTimeOut+0x24>
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	e7fe      	b.n	800506a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <xTaskCheckForTimeOut+0x3e>
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e7fe      	b.n	8005084 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005086:	f000 fe31 	bl	8005cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <xTaskCheckForTimeOut+0xb8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a2:	d102      	bne.n	80050aa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	e023      	b.n	80050f2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <xTaskCheckForTimeOut+0xbc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d007      	beq.n	80050c6 <xTaskCheckForTimeOut+0x7e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e015      	b.n	80050f2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d20b      	bcs.n	80050e8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ff9d 	bl	800501c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e004      	b.n	80050f2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050f2:	f000 fe29 	bl	8005d48 <vPortExitCritical>

	return xReturn;
 80050f6:	69fb      	ldr	r3, [r7, #28]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20000bc0 	.word	0x20000bc0
 8005104:	20000bd4 	.word	0x20000bd4

08005108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <vTaskMissedYield+0x14>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000bd0 	.word	0x20000bd0

08005120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005128:	f000 f852 	bl	80051d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <prvIdleTask+0x28>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d9f9      	bls.n	8005128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <prvIdleTask+0x2c>)
 8005136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005144:	e7f0      	b.n	8005128 <prvIdleTask+0x8>
 8005146:	bf00      	nop
 8005148:	200006ec 	.word	0x200006ec
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	e00c      	b.n	8005176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <prvInitialiseTaskLists+0x60>)
 8005168:	4413      	add	r3, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f7fe fd52 	bl	8003c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3301      	adds	r3, #1
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b37      	cmp	r3, #55	; 0x37
 800517a:	d9ef      	bls.n	800515c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800517c:	480d      	ldr	r0, [pc, #52]	; (80051b4 <prvInitialiseTaskLists+0x64>)
 800517e:	f7fe fd49 	bl	8003c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005182:	480d      	ldr	r0, [pc, #52]	; (80051b8 <prvInitialiseTaskLists+0x68>)
 8005184:	f7fe fd46 	bl	8003c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005188:	480c      	ldr	r0, [pc, #48]	; (80051bc <prvInitialiseTaskLists+0x6c>)
 800518a:	f7fe fd43 	bl	8003c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800518e:	480c      	ldr	r0, [pc, #48]	; (80051c0 <prvInitialiseTaskLists+0x70>)
 8005190:	f7fe fd40 	bl	8003c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005194:	480b      	ldr	r0, [pc, #44]	; (80051c4 <prvInitialiseTaskLists+0x74>)
 8005196:	f7fe fd3d 	bl	8003c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <prvInitialiseTaskLists+0x78>)
 800519c:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <prvInitialiseTaskLists+0x64>)
 800519e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <prvInitialiseTaskLists+0x7c>)
 80051a2:	4a05      	ldr	r2, [pc, #20]	; (80051b8 <prvInitialiseTaskLists+0x68>)
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200006ec 	.word	0x200006ec
 80051b4:	20000b4c 	.word	0x20000b4c
 80051b8:	20000b60 	.word	0x20000b60
 80051bc:	20000b7c 	.word	0x20000b7c
 80051c0:	20000b90 	.word	0x20000b90
 80051c4:	20000ba8 	.word	0x20000ba8
 80051c8:	20000b74 	.word	0x20000b74
 80051cc:	20000b78 	.word	0x20000b78

080051d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051d6:	e019      	b.n	800520c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051d8:	f000 fd88 	bl	8005cec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <prvCheckTasksWaitingTermination+0x4c>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe fd9d 	bl	8003d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <prvCheckTasksWaitingTermination+0x50>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <prvCheckTasksWaitingTermination+0x50>)
 80051f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <prvCheckTasksWaitingTermination+0x54>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4a09      	ldr	r2, [pc, #36]	; (8005224 <prvCheckTasksWaitingTermination+0x54>)
 8005200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005202:	f000 fda1 	bl	8005d48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f80e 	bl	8005228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <prvCheckTasksWaitingTermination+0x54>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e1      	bne.n	80051d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20000b90 	.word	0x20000b90
 8005220:	20000bbc 	.word	0x20000bbc
 8005224:	20000ba4 	.word	0x20000ba4

08005228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005236:	2b00      	cmp	r3, #0
 8005238:	d108      	bne.n	800524c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	4618      	mov	r0, r3
 8005240:	f000 ff30 	bl	80060a4 <vPortFree>
				vPortFree( pxTCB );
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 ff2d 	bl	80060a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800524a:	e017      	b.n	800527c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005252:	2b01      	cmp	r3, #1
 8005254:	d103      	bne.n	800525e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 ff24 	bl	80060a4 <vPortFree>
	}
 800525c:	e00e      	b.n	800527c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005264:	2b02      	cmp	r3, #2
 8005266:	d009      	beq.n	800527c <prvDeleteTCB+0x54>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e7fe      	b.n	800527a <prvDeleteTCB+0x52>
	}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <prvResetNextTaskUnblockTime+0x44>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <prvResetNextTaskUnblockTime+0x14>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <prvResetNextTaskUnblockTime+0x16>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <prvResetNextTaskUnblockTime+0x48>)
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052a6:	e008      	b.n	80052ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052a8:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <prvResetNextTaskUnblockTime+0x44>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4a05      	ldr	r2, [pc, #20]	; (80052cc <prvResetNextTaskUnblockTime+0x48>)
 80052b8:	6013      	str	r3, [r2, #0]
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000b74 	.word	0x20000b74
 80052cc:	20000bdc 	.word	0x20000bdc

080052d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <xTaskGetSchedulerState+0x34>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052de:	2301      	movs	r3, #1
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	e008      	b.n	80052f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052e4:	4b08      	ldr	r3, [pc, #32]	; (8005308 <xTaskGetSchedulerState+0x38>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052ec:	2302      	movs	r3, #2
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	e001      	b.n	80052f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052f6:	687b      	ldr	r3, [r7, #4]
	}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000bc8 	.word	0x20000bc8
 8005308:	20000be4 	.word	0x20000be4

0800530c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d054      	beq.n	80053cc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005322:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <xTaskPriorityDisinherit+0xcc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	429a      	cmp	r2, r3
 800532a:	d009      	beq.n	8005340 <xTaskPriorityDisinherit+0x34>
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e7fe      	b.n	800533e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <xTaskPriorityDisinherit+0x50>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	e7fe      	b.n	800535a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	429a      	cmp	r2, r3
 8005370:	d02c      	beq.n	80053cc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005376:	2b00      	cmp	r3, #0
 8005378:	d128      	bne.n	80053cc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3304      	adds	r3, #4
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fcd2 	bl	8003d28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <xTaskPriorityDisinherit+0xd0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d903      	bls.n	80053ac <xTaskPriorityDisinherit+0xa0>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <xTaskPriorityDisinherit+0xd0>)
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <xTaskPriorityDisinherit+0xd4>)
 80053ba:	441a      	add	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	3304      	adds	r3, #4
 80053c0:	4619      	mov	r1, r3
 80053c2:	4610      	mov	r0, r2
 80053c4:	f7fe fc53 	bl	8003c6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053cc:	697b      	ldr	r3, [r7, #20]
	}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200006e8 	.word	0x200006e8
 80053dc:	20000bc4 	.word	0x20000bc4
 80053e0:	200006ec 	.word	0x200006ec

080053e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053ee:	4b21      	ldr	r3, [pc, #132]	; (8005474 <prvAddCurrentTaskToDelayedList+0x90>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fc94 	bl	8003d28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005406:	d10a      	bne.n	800541e <prvAddCurrentTaskToDelayedList+0x3a>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800540e:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4819      	ldr	r0, [pc, #100]	; (800547c <prvAddCurrentTaskToDelayedList+0x98>)
 8005418:	f7fe fc29 	bl	8003c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800541c:	e026      	b.n	800546c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	429a      	cmp	r2, r3
 8005434:	d209      	bcs.n	800544a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe fc37 	bl	8003cb6 <vListInsert>
}
 8005448:	e010      	b.n	800546c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <prvAddCurrentTaskToDelayedList+0xa0>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <prvAddCurrentTaskToDelayedList+0x94>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7fe fc2d 	bl	8003cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <prvAddCurrentTaskToDelayedList+0xa4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	d202      	bcs.n	800546c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005466:	4a08      	ldr	r2, [pc, #32]	; (8005488 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6013      	str	r3, [r2, #0]
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000bc0 	.word	0x20000bc0
 8005478:	200006e8 	.word	0x200006e8
 800547c:	20000ba8 	.word	0x20000ba8
 8005480:	20000b78 	.word	0x20000b78
 8005484:	20000b74 	.word	0x20000b74
 8005488:	20000bdc 	.word	0x20000bdc

0800548c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005496:	f000 fac3 	bl	8005a20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800549a:	4b1c      	ldr	r3, [pc, #112]	; (800550c <xTimerCreateTimerTask+0x80>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d021      	beq.n	80054e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054aa:	1d3a      	adds	r2, r7, #4
 80054ac:	f107 0108 	add.w	r1, r7, #8
 80054b0:	f107 030c 	add.w	r3, r7, #12
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe fb93 	bl	8003be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	9202      	str	r2, [sp, #8]
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	2302      	movs	r3, #2
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	460a      	mov	r2, r1
 80054cc:	4910      	ldr	r1, [pc, #64]	; (8005510 <xTimerCreateTimerTask+0x84>)
 80054ce:	4811      	ldr	r0, [pc, #68]	; (8005514 <xTimerCreateTimerTask+0x88>)
 80054d0:	f7ff f928 	bl	8004724 <xTaskCreateStatic>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <xTimerCreateTimerTask+0x8c>)
 80054d8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <xTimerCreateTimerTask+0x8c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054e2:	2301      	movs	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d109      	bne.n	8005500 <xTimerCreateTimerTask+0x74>
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	e7fe      	b.n	80054fe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005500:	697b      	ldr	r3, [r7, #20]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000c18 	.word	0x20000c18
 8005510:	08006374 	.word	0x08006374
 8005514:	08005635 	.word	0x08005635
 8005518:	20000c1c 	.word	0x20000c1c

0800551c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800552a:	2300      	movs	r3, #0
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <xTimerGenericCommand+0x2c>
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	623b      	str	r3, [r7, #32]
 8005546:	e7fe      	b.n	8005546 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <xTimerGenericCommand+0x94>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d02a      	beq.n	80055a6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b05      	cmp	r3, #5
 8005560:	dc18      	bgt.n	8005594 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005562:	f7ff feb5 	bl	80052d0 <xTaskGetSchedulerState>
 8005566:	4603      	mov	r3, r0
 8005568:	2b02      	cmp	r3, #2
 800556a:	d109      	bne.n	8005580 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800556c:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <xTimerGenericCommand+0x94>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	f107 0110 	add.w	r1, r7, #16
 8005574:	2300      	movs	r3, #0
 8005576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005578:	f7fe fcfe 	bl	8003f78 <xQueueGenericSend>
 800557c:	6278      	str	r0, [r7, #36]	; 0x24
 800557e:	e012      	b.n	80055a6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <xTimerGenericCommand+0x94>)
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	f107 0110 	add.w	r1, r7, #16
 8005588:	2300      	movs	r3, #0
 800558a:	2200      	movs	r2, #0
 800558c:	f7fe fcf4 	bl	8003f78 <xQueueGenericSend>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24
 8005592:	e008      	b.n	80055a6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <xTimerGenericCommand+0x94>)
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	f107 0110 	add.w	r1, r7, #16
 800559c:	2300      	movs	r3, #0
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	f7fe fde4 	bl	800416c <xQueueGenericSendFromISR>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3728      	adds	r7, #40	; 0x28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000c18 	.word	0x20000c18

080055b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055be:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <prvProcessExpiredTimer+0x7c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe fbab 	bl	8003d28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d121      	bne.n	800561e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	18d1      	adds	r1, r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	6978      	ldr	r0, [r7, #20]
 80055e8:	f000 f8c8 	bl	800577c <prvInsertTimerInActiveList>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d015      	beq.n	800561e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	2100      	movs	r1, #0
 80055fc:	6978      	ldr	r0, [r7, #20]
 80055fe:	f7ff ff8d 	bl	800551c <xTimerGenericCommand>
 8005602:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <prvProcessExpiredTimer+0x6a>
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e7fe      	b.n	800561c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	6978      	ldr	r0, [r7, #20]
 8005624:	4798      	blx	r3
}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000c10 	.word	0x20000c10

08005634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	4618      	mov	r0, r3
 8005642:	f000 f857 	bl	80056f4 <prvGetNextExpireTime>
 8005646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4619      	mov	r1, r3
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f803 	bl	8005658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005652:	f000 f8d5 	bl	8005800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005656:	e7f1      	b.n	800563c <prvTimerTask+0x8>

08005658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005662:	f7ff fa57 	bl	8004b14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	4618      	mov	r0, r3
 800566c:	f000 f866 	bl	800573c <prvSampleTimeNow>
 8005670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d130      	bne.n	80056da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <prvProcessTimerOrBlockTask+0x3c>
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d806      	bhi.n	8005694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005686:	f7ff fa53 	bl	8004b30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ff91 	bl	80055b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005692:	e024      	b.n	80056de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <prvProcessTimerOrBlockTask+0x90>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056ac:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <prvProcessTimerOrBlockTask+0x94>)
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	4619      	mov	r1, r3
 80056ba:	f7fe ffff 	bl	80046bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056be:	f7ff fa37 	bl	8004b30 <xTaskResumeAll>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056c8:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <prvProcessTimerOrBlockTask+0x98>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
}
 80056d8:	e001      	b.n	80056de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056da:	f7ff fa29 	bl	8004b30 <xTaskResumeAll>
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000c14 	.word	0x20000c14
 80056ec:	20000c18 	.word	0x20000c18
 80056f0:	e000ed04 	.word	0xe000ed04

080056f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056fc:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <prvGetNextExpireTime+0x44>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d105      	bne.n	8005726 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <prvGetNextExpireTime+0x44>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e001      	b.n	800572a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800572a:	68fb      	ldr	r3, [r7, #12]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	20000c10 	.word	0x20000c10

0800573c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005744:	f7ff fa90 	bl	8004c68 <xTaskGetTickCount>
 8005748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800574a:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <prvSampleTimeNow+0x3c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	429a      	cmp	r2, r3
 8005752:	d205      	bcs.n	8005760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005754:	f000 f904 	bl	8005960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e002      	b.n	8005766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005766:	4a04      	ldr	r2, [pc, #16]	; (8005778 <prvSampleTimeNow+0x3c>)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800576c:	68fb      	ldr	r3, [r7, #12]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000c20 	.word	0x20000c20

0800577c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d812      	bhi.n	80057c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	1ad2      	subs	r2, r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e01b      	b.n	80057ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <prvInsertTimerInActiveList+0x7c>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f7fe fa78 	bl	8003cb6 <vListInsert>
 80057c6:	e012      	b.n	80057ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d206      	bcs.n	80057de <prvInsertTimerInActiveList+0x62>
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e007      	b.n	80057ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <prvInsertTimerInActiveList+0x80>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7fe fa64 	bl	8003cb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057ee:	697b      	ldr	r3, [r7, #20]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000c14 	.word	0x20000c14
 80057fc:	20000c10 	.word	0x20000c10

08005800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08e      	sub	sp, #56	; 0x38
 8005804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005806:	e099      	b.n	800593c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	da17      	bge.n	800583e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	3304      	adds	r3, #4
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <prvProcessReceivedCommands+0x2e>
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	e7fe      	b.n	800582c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005834:	6850      	ldr	r0, [r2, #4]
 8005836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005838:	6892      	ldr	r2, [r2, #8]
 800583a:	4611      	mov	r1, r2
 800583c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	db7a      	blt.n	800593a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fa67 	bl	8003d28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800585a:	463b      	mov	r3, r7
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff ff6d 	bl	800573c <prvSampleTimeNow>
 8005862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b09      	cmp	r3, #9
 8005868:	d868      	bhi.n	800593c <prvProcessReceivedCommands+0x13c>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <prvProcessReceivedCommands+0x70>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005899 	.word	0x08005899
 8005874:	08005899 	.word	0x08005899
 8005878:	08005899 	.word	0x08005899
 800587c:	0800593d 	.word	0x0800593d
 8005880:	080058f3 	.word	0x080058f3
 8005884:	08005929 	.word	0x08005929
 8005888:	08005899 	.word	0x08005899
 800588c:	08005899 	.word	0x08005899
 8005890:	0800593d 	.word	0x0800593d
 8005894:	080058f3 	.word	0x080058f3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	18d1      	adds	r1, r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a6:	f7ff ff69 	bl	800577c <prvInsertTimerInActiveList>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d045      	beq.n	800593c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d13d      	bne.n	800593c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	441a      	add	r2, r3
 80058c8:	2300      	movs	r3, #0
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	2100      	movs	r1, #0
 80058d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d2:	f7ff fe23 	bl	800551c <xTimerGenericCommand>
 80058d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d12e      	bne.n	800593c <prvProcessReceivedCommands+0x13c>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e7fe      	b.n	80058f0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d109      	bne.n	8005914 <prvProcessReceivedCommands+0x114>
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e7fe      	b.n	8005912 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	18d1      	adds	r1, r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005922:	f7ff ff2b 	bl	800577c <prvInsertTimerInActiveList>
					break;
 8005926:	e009      	b.n	800593c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005934:	f000 fbb6 	bl	80060a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005938:	e000      	b.n	800593c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800593a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800593c:	4b07      	ldr	r3, [pc, #28]	; (800595c <prvProcessReceivedCommands+0x15c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	1d39      	adds	r1, r7, #4
 8005942:	2200      	movs	r2, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fca5 	bl	8004294 <xQueueReceive>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	f47f af5b 	bne.w	8005808 <prvProcessReceivedCommands+0x8>
	}
}
 8005952:	bf00      	nop
 8005954:	3730      	adds	r7, #48	; 0x30
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000c18 	.word	0x20000c18

08005960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005966:	e044      	b.n	80059f2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <prvSwitchTimerLists+0xb8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005972:	4b29      	ldr	r3, [pc, #164]	; (8005a18 <prvSwitchTimerLists+0xb8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3304      	adds	r3, #4
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe f9d1 	bl	8003d28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d12d      	bne.n	80059f2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4413      	add	r3, r2
 800599e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d90e      	bls.n	80059c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059b4:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <prvSwitchTimerLists+0xb8>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7fe f979 	bl	8003cb6 <vListInsert>
 80059c4:	e015      	b.n	80059f2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059c6:	2300      	movs	r3, #0
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	2300      	movs	r3, #0
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	2100      	movs	r1, #0
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff fda3 	bl	800551c <xTimerGenericCommand>
 80059d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <prvSwitchTimerLists+0x92>
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	e7fe      	b.n	80059f0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059f2:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <prvSwitchTimerLists+0xb8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1b5      	bne.n	8005968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <prvSwitchTimerLists+0xb8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <prvSwitchTimerLists+0xbc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <prvSwitchTimerLists+0xb8>)
 8005a08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a0a:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <prvSwitchTimerLists+0xbc>)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	6013      	str	r3, [r2, #0]
}
 8005a10:	bf00      	nop
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000c10 	.word	0x20000c10
 8005a1c:	20000c14 	.word	0x20000c14

08005a20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a26:	f000 f961 	bl	8005cec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a2a:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d120      	bne.n	8005a74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a32:	4814      	ldr	r0, [pc, #80]	; (8005a84 <prvCheckForValidListAndQueue+0x64>)
 8005a34:	f7fe f8ee 	bl	8003c14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a38:	4813      	ldr	r0, [pc, #76]	; (8005a88 <prvCheckForValidListAndQueue+0x68>)
 8005a3a:	f7fe f8eb 	bl	8003c14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <prvCheckForValidListAndQueue+0x6c>)
 8005a40:	4a10      	ldr	r2, [pc, #64]	; (8005a84 <prvCheckForValidListAndQueue+0x64>)
 8005a42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <prvCheckForValidListAndQueue+0x70>)
 8005a46:	4a10      	ldr	r2, [pc, #64]	; (8005a88 <prvCheckForValidListAndQueue+0x68>)
 8005a48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <prvCheckForValidListAndQueue+0x74>)
 8005a50:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <prvCheckForValidListAndQueue+0x78>)
 8005a52:	2110      	movs	r1, #16
 8005a54:	200a      	movs	r0, #10
 8005a56:	f7fe f9f9 	bl	8003e4c <xQueueGenericCreateStatic>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a5e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <prvCheckForValidListAndQueue+0x60>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	490b      	ldr	r1, [pc, #44]	; (8005a9c <prvCheckForValidListAndQueue+0x7c>)
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fdfc 	bl	800466c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a74:	f000 f968 	bl	8005d48 <vPortExitCritical>
}
 8005a78:	bf00      	nop
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000c18 	.word	0x20000c18
 8005a84:	20000be8 	.word	0x20000be8
 8005a88:	20000bfc 	.word	0x20000bfc
 8005a8c:	20000c10 	.word	0x20000c10
 8005a90:	20000c14 	.word	0x20000c14
 8005a94:	20000cc4 	.word	0x20000cc4
 8005a98:	20000c24 	.word	0x20000c24
 8005a9c:	0800637c 	.word	0x0800637c

08005aa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3b04      	subs	r3, #4
 8005ab0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3b04      	subs	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f023 0201 	bic.w	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3b04      	subs	r3, #4
 8005ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ad0:	4a0c      	ldr	r2, [pc, #48]	; (8005b04 <pxPortInitialiseStack+0x64>)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3b14      	subs	r3, #20
 8005ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3b04      	subs	r3, #4
 8005ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f06f 0202 	mvn.w	r2, #2
 8005aee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3b20      	subs	r3, #32
 8005af4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005af6:	68fb      	ldr	r3, [r7, #12]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	08005b09 	.word	0x08005b09

08005b08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b12:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <prvTaskExitError+0x50>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b1a:	d009      	beq.n	8005b30 <prvTaskExitError+0x28>
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e7fe      	b.n	8005b2e <prvTaskExitError+0x26>
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b42:	bf00      	nop
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0fc      	beq.n	8005b44 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	2000000c 	.word	0x2000000c
 8005b5c:	00000000 	.word	0x00000000

08005b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <pxCurrentTCBConst2>)
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	6808      	ldr	r0, [r1, #0]
 8005b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6a:	f380 8809 	msr	PSP, r0
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8811 	msr	BASEPRI, r0
 8005b7a:	4770      	bx	lr
 8005b7c:	f3af 8000 	nop.w

08005b80 <pxCurrentTCBConst2>:
 8005b80:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop

08005b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b88:	4808      	ldr	r0, [pc, #32]	; (8005bac <prvPortStartFirstTask+0x24>)
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f380 8808 	msr	MSP, r0
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f380 8814 	msr	CONTROL, r0
 8005b9a:	b662      	cpsie	i
 8005b9c:	b661      	cpsie	f
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	df00      	svc	0
 8005ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005baa:	bf00      	nop
 8005bac:	e000ed08 	.word	0xe000ed08

08005bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005bb6:	4b44      	ldr	r3, [pc, #272]	; (8005cc8 <xPortStartScheduler+0x118>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a44      	ldr	r2, [pc, #272]	; (8005ccc <xPortStartScheduler+0x11c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d109      	bne.n	8005bd4 <xPortStartScheduler+0x24>
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	e7fe      	b.n	8005bd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bd4:	4b3c      	ldr	r3, [pc, #240]	; (8005cc8 <xPortStartScheduler+0x118>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a3d      	ldr	r2, [pc, #244]	; (8005cd0 <xPortStartScheduler+0x120>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d109      	bne.n	8005bf2 <xPortStartScheduler+0x42>
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e7fe      	b.n	8005bf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bf2:	4b38      	ldr	r3, [pc, #224]	; (8005cd4 <xPortStartScheduler+0x124>)
 8005bf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	22ff      	movs	r2, #255	; 0xff
 8005c02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4b30      	ldr	r3, [pc, #192]	; (8005cd8 <xPortStartScheduler+0x128>)
 8005c18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c1a:	4b30      	ldr	r3, [pc, #192]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005c1c:	2207      	movs	r2, #7
 8005c1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c20:	e009      	b.n	8005c36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005c22:	4b2e      	ldr	r3, [pc, #184]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005c2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c36:	78fb      	ldrb	r3, [r7, #3]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d0ef      	beq.n	8005c22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c42:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f1c3 0307 	rsb	r3, r3, #7
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d009      	beq.n	8005c62 <xPortStartScheduler+0xb2>
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	e7fe      	b.n	8005c60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c62:	4b1e      	ldr	r3, [pc, #120]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005c6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c74:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <xPortStartScheduler+0x12c>)
 8005c76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <xPortStartScheduler+0x130>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <xPortStartScheduler+0x130>)
 8005c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c8c:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <xPortStartScheduler+0x130>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <xPortStartScheduler+0x130>)
 8005c92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c98:	f000 f8d6 	bl	8005e48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c9c:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <xPortStartScheduler+0x134>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ca2:	f000 f8f5 	bl	8005e90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ca6:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <xPortStartScheduler+0x138>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a0f      	ldr	r2, [pc, #60]	; (8005ce8 <xPortStartScheduler+0x138>)
 8005cac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005cb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cb2:	f7ff ff69 	bl	8005b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cb6:	f7ff f8a5 	bl	8004e04 <vTaskSwitchContext>
	prvTaskExitError();
 8005cba:	f7ff ff25 	bl	8005b08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	e000ed00 	.word	0xe000ed00
 8005ccc:	410fc271 	.word	0x410fc271
 8005cd0:	410fc270 	.word	0x410fc270
 8005cd4:	e000e400 	.word	0xe000e400
 8005cd8:	20000d14 	.word	0x20000d14
 8005cdc:	20000d18 	.word	0x20000d18
 8005ce0:	e000ed20 	.word	0xe000ed20
 8005ce4:	2000000c 	.word	0x2000000c
 8005ce8:	e000ef34 	.word	0xe000ef34

08005cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <vPortEnterCritical+0x54>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a0d      	ldr	r2, [pc, #52]	; (8005d40 <vPortEnterCritical+0x54>)
 8005d0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <vPortEnterCritical+0x54>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d10e      	bne.n	8005d34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d16:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <vPortEnterCritical+0x58>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <vPortEnterCritical+0x48>
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	603b      	str	r3, [r7, #0]
 8005d32:	e7fe      	b.n	8005d32 <vPortEnterCritical+0x46>
	}
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	2000000c 	.word	0x2000000c
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d4e:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <vPortExitCritical+0x4c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <vPortExitCritical+0x22>
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	e7fe      	b.n	8005d68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <vPortExitCritical+0x4c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	4a08      	ldr	r2, [pc, #32]	; (8005d94 <vPortExitCritical+0x4c>)
 8005d72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <vPortExitCritical+0x4c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <vPortExitCritical+0x3e>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	2000000c 	.word	0x2000000c
	...

08005da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005da0:	f3ef 8009 	mrs	r0, PSP
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <pxCurrentTCBConst>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	f01e 0f10 	tst.w	lr, #16
 8005db0:	bf08      	it	eq
 8005db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	6010      	str	r0, [r2, #0]
 8005dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005dc4:	f380 8811 	msr	BASEPRI, r0
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f7ff f818 	bl	8004e04 <vTaskSwitchContext>
 8005dd4:	f04f 0000 	mov.w	r0, #0
 8005dd8:	f380 8811 	msr	BASEPRI, r0
 8005ddc:	bc09      	pop	{r0, r3}
 8005dde:	6819      	ldr	r1, [r3, #0]
 8005de0:	6808      	ldr	r0, [r1, #0]
 8005de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de6:	f01e 0f10 	tst.w	lr, #16
 8005dea:	bf08      	it	eq
 8005dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005df0:	f380 8809 	msr	PSP, r0
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	f3af 8000 	nop.w

08005e00 <pxCurrentTCBConst>:
 8005e00:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop

08005e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e20:	f7fe ff32 	bl	8004c88 <xTaskIncrementTick>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <SysTick_Handler+0x3c>)
 8005e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	2300      	movs	r3, #0
 8005e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <vPortSetupTimerInterrupt+0x34>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vPortSetupTimerInterrupt+0x38>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <vPortSetupTimerInterrupt+0x3c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <vPortSetupTimerInterrupt+0x40>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	099b      	lsrs	r3, r3, #6
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <vPortSetupTimerInterrupt+0x44>)
 8005e66:	3b01      	subs	r3, #1
 8005e68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e6a:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <vPortSetupTimerInterrupt+0x34>)
 8005e6c:	2207      	movs	r2, #7
 8005e6e:	601a      	str	r2, [r3, #0]
}
 8005e70:	bf00      	nop
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	e000e010 	.word	0xe000e010
 8005e80:	e000e018 	.word	0xe000e018
 8005e84:	20000000 	.word	0x20000000
 8005e88:	10624dd3 	.word	0x10624dd3
 8005e8c:	e000e014 	.word	0xe000e014

08005e90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ea0 <vPortEnableVFP+0x10>
 8005e94:	6801      	ldr	r1, [r0, #0]
 8005e96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e9a:	6001      	str	r1, [r0, #0]
 8005e9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e9e:	bf00      	nop
 8005ea0:	e000ed88 	.word	0xe000ed88

08005ea4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eaa:	f3ef 8305 	mrs	r3, IPSR
 8005eae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	d913      	bls.n	8005ede <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eb6:	4a16      	ldr	r2, [pc, #88]	; (8005f10 <vPortValidateInterruptPriority+0x6c>)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <vPortValidateInterruptPriority+0x70>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	7afa      	ldrb	r2, [r7, #11]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d209      	bcs.n	8005ede <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	607b      	str	r3, [r7, #4]
 8005edc:	e7fe      	b.n	8005edc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ede:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <vPortValidateInterruptPriority+0x74>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <vPortValidateInterruptPriority+0x78>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d909      	bls.n	8005f02 <vPortValidateInterruptPriority+0x5e>
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	e7fe      	b.n	8005f00 <vPortValidateInterruptPriority+0x5c>
	}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000e3f0 	.word	0xe000e3f0
 8005f14:	20000d14 	.word	0x20000d14
 8005f18:	e000ed0c 	.word	0xe000ed0c
 8005f1c:	20000d18 	.word	0x20000d18

08005f20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f2c:	f7fe fdf2 	bl	8004b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f30:	4b57      	ldr	r3, [pc, #348]	; (8006090 <pvPortMalloc+0x170>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f38:	f000 f90c 	bl	8006154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f3c:	4b55      	ldr	r3, [pc, #340]	; (8006094 <pvPortMalloc+0x174>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f040 808c 	bne.w	8006062 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01c      	beq.n	8005f8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005f50:	2208      	movs	r2, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4413      	add	r3, r2
 8005f56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d013      	beq.n	8005f8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f023 0307 	bic.w	r3, r3, #7
 8005f68:	3308      	adds	r3, #8
 8005f6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <pvPortMalloc+0x6a>
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e7fe      	b.n	8005f88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d068      	beq.n	8006062 <pvPortMalloc+0x142>
 8005f90:	4b41      	ldr	r3, [pc, #260]	; (8006098 <pvPortMalloc+0x178>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d863      	bhi.n	8006062 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f9a:	4b40      	ldr	r3, [pc, #256]	; (800609c <pvPortMalloc+0x17c>)
 8005f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f9e:	4b3f      	ldr	r3, [pc, #252]	; (800609c <pvPortMalloc+0x17c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fa4:	e004      	b.n	8005fb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d903      	bls.n	8005fc2 <pvPortMalloc+0xa2>
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f1      	bne.n	8005fa6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fc2:	4b33      	ldr	r3, [pc, #204]	; (8006090 <pvPortMalloc+0x170>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d04a      	beq.n	8006062 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	4413      	add	r3, r2
 8005fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	1ad2      	subs	r2, r2, r3
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d91e      	bls.n	800602c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <pvPortMalloc+0xf4>
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	e7fe      	b.n	8006012 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006026:	69b8      	ldr	r0, [r7, #24]
 8006028:	f000 f8f6 	bl	8006218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800602c:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <pvPortMalloc+0x178>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <pvPortMalloc+0x178>)
 8006038:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800603a:	4b17      	ldr	r3, [pc, #92]	; (8006098 <pvPortMalloc+0x178>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	4b18      	ldr	r3, [pc, #96]	; (80060a0 <pvPortMalloc+0x180>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d203      	bcs.n	800604e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <pvPortMalloc+0x178>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a15      	ldr	r2, [pc, #84]	; (80060a0 <pvPortMalloc+0x180>)
 800604c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <pvPortMalloc+0x174>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	431a      	orrs	r2, r3
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006062:	f7fe fd65 	bl	8004b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <pvPortMalloc+0x164>
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e7fe      	b.n	8006082 <pvPortMalloc+0x162>
	return pvReturn;
 8006084:	69fb      	ldr	r3, [r7, #28]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3728      	adds	r7, #40	; 0x28
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20001924 	.word	0x20001924
 8006094:	20001930 	.word	0x20001930
 8006098:	20001928 	.word	0x20001928
 800609c:	2000191c 	.word	0x2000191c
 80060a0:	2000192c 	.word	0x2000192c

080060a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d046      	beq.n	8006144 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060b6:	2308      	movs	r3, #8
 80060b8:	425b      	negs	r3, r3
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	4b20      	ldr	r3, [pc, #128]	; (800614c <vPortFree+0xa8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <vPortFree+0x42>
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e7fe      	b.n	80060e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <vPortFree+0x5e>
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	60bb      	str	r3, [r7, #8]
 8006100:	e7fe      	b.n	8006100 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <vPortFree+0xa8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d019      	beq.n	8006144 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d115      	bne.n	8006144 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <vPortFree+0xa8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	43db      	mvns	r3, r3
 8006122:	401a      	ands	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006128:	f7fe fcf4 	bl	8004b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <vPortFree+0xac>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4413      	add	r3, r2
 8006136:	4a06      	ldr	r2, [pc, #24]	; (8006150 <vPortFree+0xac>)
 8006138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800613a:	6938      	ldr	r0, [r7, #16]
 800613c:	f000 f86c 	bl	8006218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006140:	f7fe fcf6 	bl	8004b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006144:	bf00      	nop
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20001930 	.word	0x20001930
 8006150:	20001928 	.word	0x20001928

08006154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800615a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800615e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006160:	4b27      	ldr	r3, [pc, #156]	; (8006200 <prvHeapInit+0xac>)
 8006162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3307      	adds	r3, #7
 8006172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0307 	bic.w	r3, r3, #7
 800617a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <prvHeapInit+0xac>)
 8006184:	4413      	add	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800618c:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <prvHeapInit+0xb0>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006192:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <prvHeapInit+0xb0>)
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4413      	add	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061a0:	2208      	movs	r2, #8
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0307 	bic.w	r3, r3, #7
 80061ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4a15      	ldr	r2, [pc, #84]	; (8006208 <prvHeapInit+0xb4>)
 80061b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <prvHeapInit+0xb4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2200      	movs	r2, #0
 80061bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <prvHeapInit+0xb4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <prvHeapInit+0xb4>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4a0a      	ldr	r2, [pc, #40]	; (800620c <prvHeapInit+0xb8>)
 80061e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4a09      	ldr	r2, [pc, #36]	; (8006210 <prvHeapInit+0xbc>)
 80061ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061ec:	4b09      	ldr	r3, [pc, #36]	; (8006214 <prvHeapInit+0xc0>)
 80061ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061f2:	601a      	str	r2, [r3, #0]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000d1c 	.word	0x20000d1c
 8006204:	2000191c 	.word	0x2000191c
 8006208:	20001924 	.word	0x20001924
 800620c:	2000192c 	.word	0x2000192c
 8006210:	20001928 	.word	0x20001928
 8006214:	20001930 	.word	0x20001930

08006218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006220:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <prvInsertBlockIntoFreeList+0xac>)
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e002      	b.n	800622c <prvInsertBlockIntoFreeList+0x14>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	429a      	cmp	r2, r3
 8006234:	d8f7      	bhi.n	8006226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4413      	add	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	429a      	cmp	r2, r3
 8006246:	d108      	bne.n	800625a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	441a      	add	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d118      	bne.n	80062a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d00d      	beq.n	8006296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	441a      	add	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e008      	b.n	80062a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e003      	b.n	80062a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d002      	beq.n	80062b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b6:	bf00      	nop
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	2000191c 	.word	0x2000191c
 80062c8:	20001924 	.word	0x20001924

080062cc <__libc_init_array>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4e0d      	ldr	r6, [pc, #52]	; (8006304 <__libc_init_array+0x38>)
 80062d0:	4c0d      	ldr	r4, [pc, #52]	; (8006308 <__libc_init_array+0x3c>)
 80062d2:	1ba4      	subs	r4, r4, r6
 80062d4:	10a4      	asrs	r4, r4, #2
 80062d6:	2500      	movs	r5, #0
 80062d8:	42a5      	cmp	r5, r4
 80062da:	d109      	bne.n	80062f0 <__libc_init_array+0x24>
 80062dc:	4e0b      	ldr	r6, [pc, #44]	; (800630c <__libc_init_array+0x40>)
 80062de:	4c0c      	ldr	r4, [pc, #48]	; (8006310 <__libc_init_array+0x44>)
 80062e0:	f000 f82c 	bl	800633c <_init>
 80062e4:	1ba4      	subs	r4, r4, r6
 80062e6:	10a4      	asrs	r4, r4, #2
 80062e8:	2500      	movs	r5, #0
 80062ea:	42a5      	cmp	r5, r4
 80062ec:	d105      	bne.n	80062fa <__libc_init_array+0x2e>
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062f4:	4798      	blx	r3
 80062f6:	3501      	adds	r5, #1
 80062f8:	e7ee      	b.n	80062d8 <__libc_init_array+0xc>
 80062fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062fe:	4798      	blx	r3
 8006300:	3501      	adds	r5, #1
 8006302:	e7f2      	b.n	80062ea <__libc_init_array+0x1e>
 8006304:	08006404 	.word	0x08006404
 8006308:	08006404 	.word	0x08006404
 800630c:	08006404 	.word	0x08006404
 8006310:	08006408 	.word	0x08006408

08006314 <memcpy>:
 8006314:	b510      	push	{r4, lr}
 8006316:	1e43      	subs	r3, r0, #1
 8006318:	440a      	add	r2, r1
 800631a:	4291      	cmp	r1, r2
 800631c:	d100      	bne.n	8006320 <memcpy+0xc>
 800631e:	bd10      	pop	{r4, pc}
 8006320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006328:	e7f7      	b.n	800631a <memcpy+0x6>

0800632a <memset>:
 800632a:	4402      	add	r2, r0
 800632c:	4603      	mov	r3, r0
 800632e:	4293      	cmp	r3, r2
 8006330:	d100      	bne.n	8006334 <memset+0xa>
 8006332:	4770      	bx	lr
 8006334:	f803 1b01 	strb.w	r1, [r3], #1
 8006338:	e7f9      	b.n	800632e <memset+0x4>
	...

0800633c <_init>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr

08006348 <_fini>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	bf00      	nop
 800634c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634e:	bc08      	pop	{r3}
 8006350:	469e      	mov	lr, r3
 8006352:	4770      	bx	lr
